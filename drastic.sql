-- MySQL dump 10.11
--
-- Host: localhost    Database: drastic
-- ------------------------------------------------------
-- Server version	5.0.75-0ubuntu10

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `assets`
--

DROP TABLE IF EXISTS `assets`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assets` (
  `id` int(11) NOT NULL auto_increment,
  `content_type` varchar(255) default NULL,
  `filename` varchar(255) default NULL,
  `size` int(11) default NULL,
  `parent_id` int(11) default NULL,
  `thumbnail` varchar(255) default NULL,
  `width` int(11) default NULL,
  `height` int(11) default NULL,
  `site_id` int(11) default NULL,
  `created_at` datetime default NULL,
  `title` varchar(255) default NULL,
  `thumbnails_count` int(11) default '0',
  `user_id` int(11) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assets`
--

LOCK TABLES `assets` WRITE;
/*!40000 ALTER TABLE `assets` DISABLE KEYS */;
/*!40000 ALTER TABLE `assets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `assigned_assets`
--

DROP TABLE IF EXISTS `assigned_assets`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assigned_assets` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `asset_id` int(11) default NULL,
  `position` int(11) default NULL,
  `label` varchar(255) default NULL,
  `created_at` datetime default NULL,
  `active` tinyint(1) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assigned_assets`
--

LOCK TABLES `assigned_assets` WRITE;
/*!40000 ALTER TABLE `assigned_assets` DISABLE KEYS */;
/*!40000 ALTER TABLE `assigned_assets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `assigned_sections`
--

DROP TABLE IF EXISTS `assigned_sections`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assigned_sections` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `section_id` int(11) default NULL,
  `position` int(11) default '1',
  PRIMARY KEY  (`id`),
  KEY `idx_a_sections_article_section` (`article_id`,`section_id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assigned_sections`
--

LOCK TABLES `assigned_sections` WRITE;
/*!40000 ALTER TABLE `assigned_sections` DISABLE KEYS */;
INSERT INTO `assigned_sections` VALUES (2,2,1,1);
INSERT INTO `assigned_sections` VALUES (3,3,1,2);
INSERT INTO `assigned_sections` VALUES (4,4,1,3);
INSERT INTO `assigned_sections` VALUES (5,5,1,4);
INSERT INTO `assigned_sections` VALUES (6,6,1,5);
INSERT INTO `assigned_sections` VALUES (7,8,1,6);
INSERT INTO `assigned_sections` VALUES (8,9,1,7);
INSERT INTO `assigned_sections` VALUES (9,10,1,8);
/*!40000 ALTER TABLE `assigned_sections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cached_pages`
--

DROP TABLE IF EXISTS `cached_pages`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `cached_pages` (
  `id` int(11) NOT NULL auto_increment,
  `url` varchar(255) default NULL,
  `references` text,
  `updated_at` datetime default NULL,
  `site_id` int(11) default NULL,
  `cleared_at` datetime default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `cached_pages`
--

LOCK TABLES `cached_pages` WRITE;
/*!40000 ALTER TABLE `cached_pages` DISABLE KEYS */;
INSERT INTO `cached_pages` VALUES (1,'/','[10:Article][1:Site][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article][1:Section]','2009-07-19 05:47:02',1,NULL);
INSERT INTO `cached_pages` VALUES (2,'/stylesheets/main.css','','2009-05-20 05:14:03',1,'2009-07-19 05:46:53');
INSERT INTO `cached_pages` VALUES (3,'/images/bg.png','','2009-05-20 05:14:03',1,'2009-07-19 05:46:53');
INSERT INTO `cached_pages` VALUES (4,'/stylesheets/text.css','','2009-07-19 05:47:04',1,NULL);
INSERT INTO `cached_pages` VALUES (5,'/stylesheets/reset.css','','2009-07-19 05:47:03',1,NULL);
INSERT INTO `cached_pages` VALUES (6,'/stylesheets/960.css','','2009-07-19 05:47:03',1,NULL);
INSERT INTO `cached_pages` VALUES (7,'/javascripts/code_highlighter.js','','2009-07-19 05:47:02',1,NULL);
INSERT INTO `cached_pages` VALUES (8,'/stylesheets/drastic.css','','2009-07-19 05:47:03',1,NULL);
INSERT INTO `cached_pages` VALUES (9,'/javascripts/ruby.js','','2009-07-19 05:47:02',1,NULL);
INSERT INTO `cached_pages` VALUES (10,'/javascripts/javascript.js','','2009-07-19 05:47:06',1,NULL);
INSERT INTO `cached_pages` VALUES (11,'/javascripts/jquery.js','','2009-07-19 05:47:03',1,NULL);
INSERT INTO `cached_pages` VALUES (12,'/javascripts/application.js','','2009-07-19 05:47:03',1,NULL);
INSERT INTO `cached_pages` VALUES (13,'/2009/5/20/a-smart-pluralizing-helper-for-rails','[2:Article][1:Site][1:User]','2009-05-20 08:20:00',1,'2009-07-19 05:46:53');
INSERT INTO `cached_pages` VALUES (14,'/tags/gist','[3:Article][1:Site][4:Article][2:Article][9:Article][5:Article][6:Article][8:Article]','2009-07-10 02:32:34',1,'2009-07-19 05:46:53');
INSERT INTO `cached_pages` VALUES (15,'/tags/rails','[9:Article][1:Site][5:Article][3:Article][2:Article][6:Article][4:Article][8:Article][10:Article]','2009-07-23 08:32:28',1,NULL);
INSERT INTO `cached_pages` VALUES (16,'/tags/ruby','[9:Article][1:Site][5:Article][2:Article][6:Article][4:Article][3:Article][8:Article][10:Article]','2009-07-25 09:44:46',1,NULL);
INSERT INTO `cached_pages` VALUES (17,'/feed/atom.xml','[1:Section][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2009-07-19 06:17:18',1,NULL);
INSERT INTO `cached_pages` VALUES (18,'/archives/2009/5','[3:Article][1:Site][4:Article][2:Article][1:Section][10:Article][9:Article][8:Article][6:Article][5:Article]','2009-07-19 08:02:31',1,NULL);
INSERT INTO `cached_pages` VALUES (19,'/stylesheets/ie.css','','2009-07-23 22:02:32',1,NULL);
INSERT INTO `cached_pages` VALUES (20,'/2009/5/26/resizing-textareas-as-you-type-with-jquery','[4:Article][1:Site][1:User][9:Article][5:Article][6:Article][3:Article][2:Article][8:Article][10:Article]','2009-07-24 18:23:46',1,NULL);
INSERT INTO `cached_pages` VALUES (21,'/tags/user%20experience','[1:Site][9:Article][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-22 21:12:12',1,NULL);
INSERT INTO `cached_pages` VALUES (22,'/tags/jquery','[6:Article][1:Site][4:Article][9:Article][5:Article][3:Article][2:Article][8:Article][10:Article]','2009-07-23 07:06:31',1,NULL);
INSERT INTO `cached_pages` VALUES (23,'/2009/5/19/a-smart-pluralizing-helper-for-rails','[2:Article][1:Site][1:User][9:Article][5:Article][6:Article][4:Article][3:Article][8:Article]','2009-07-19 07:37:14',1,NULL);
INSERT INTO `cached_pages` VALUES (24,'/tags/javascript','[8:Article][1:Site][6:Article][3:Article][4:Article][9:Article][5:Article][2:Article]','2009-07-22 09:45:22',1,NULL);
INSERT INTO `cached_pages` VALUES (25,'/2009/5/27/resizing-textareas-as-you-type-with-prototype','[3:Article][1:Site][1:User][9:Article][5:Article][6:Article][4:Article][2:Article][8:Article][10:Article]','2009-07-24 21:48:45',1,NULL);
INSERT INTO `cached_pages` VALUES (26,'/tags/prototype','[3:Article][1:Site][9:Article][5:Article][6:Article][4:Article][2:Article][8:Article]','2009-07-23 02:08:05',1,NULL);
INSERT INTO `cached_pages` VALUES (27,'/tags/ux','[6:Article][1:Site][3:Article][4:Article][9:Article][5:Article][2:Article][8:Article][10:Article]','2009-07-23 13:19:23',1,NULL);
INSERT INTO `cached_pages` VALUES (28,'/archives/2009/6','[8:Article][1:Site][6:Article][5:Article][1:Section][10:Article][9:Article][3:Article][4:Article][2:Article]','2009-07-19 08:02:25',1,NULL);
INSERT INTO `cached_pages` VALUES (29,'/2009/6/10/how-to-load-a-yaml-config-object','[5:Article][1:Site][1:User][9:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-19 17:50:04',1,NULL);
INSERT INTO `cached_pages` VALUES (30,'/tags/filter','[6:Article][1:Site][9:Article][5:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-11 09:30:24',1,'2009-07-19 05:46:53');
INSERT INTO `cached_pages` VALUES (31,'/tags/search','[6:Article][1:Site][9:Article][5:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-20 05:04:11',1,NULL);
INSERT INTO `cached_pages` VALUES (32,'/2009/6/17/instant-search-in-pure-javascript-almost-instantly','[6:Article][1:Site][1:User][7:Comment][9:Article][5:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2009-07-23 03:15:04',1,NULL);
INSERT INTO `cached_pages` VALUES (33,'/tags/convention','[5:Article][1:Site][9:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-19 16:12:24',1,NULL);
INSERT INTO `cached_pages` VALUES (34,'/tags/configuration','[5:Article][1:Site][9:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-19 12:37:18',1,NULL);
INSERT INTO `cached_pages` VALUES (35,'/tags/yaml','[5:Article][1:Site][9:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-22 21:47:59',1,NULL);
INSERT INTO `cached_pages` VALUES (36,'/javascripts/bash.js','','2009-07-19 05:47:02',1,NULL);
INSERT INTO `cached_pages` VALUES (37,'/2009/6/26/setting-up-an-interactive-javascript-console','[8:Article][1:Site][1:User][9:Article][5:Article][6:Article][4:Article][3:Article][2:Article][10:Article]','2009-07-23 03:14:55',1,NULL);
INSERT INTO `cached_pages` VALUES (38,'/tags/shell','[8:Article][1:Site][9:Article][5:Article][6:Article][4:Article][3:Article][2:Article][10:Article]','2009-07-24 19:33:59',1,NULL);
INSERT INTO `cached_pages` VALUES (39,'/tags/rhino','[8:Article][1:Site][9:Article][5:Article][6:Article][4:Article][3:Article][2:Article][10:Article]','2009-07-24 09:49:12',1,NULL);
INSERT INTO `cached_pages` VALUES (40,'/archives/2009/7','[10:Article][1:Site][9:Article][1:Section][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2009-07-19 08:02:17',1,NULL);
INSERT INTO `cached_pages` VALUES (41,'/2009/7/10/make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','[9:Article][1:Site][1:User][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2009-07-23 03:13:50',1,NULL);
INSERT INTO `cached_pages` VALUES (42,'/tags/private','[9:Article][1:Site][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-22 09:04:19',1,NULL);
INSERT INTO `cached_pages` VALUES (43,'/tags/fix','[9:Article][1:Site][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-10 01:45:34',1,'2009-07-19 05:46:53');
INSERT INTO `cached_pages` VALUES (44,'/tags/bug','[9:Article][1:Site][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2009-07-24 12:33:53',1,NULL);
INSERT INTO `cached_pages` VALUES (45,'/tags/patch','[9:Article][1:Site][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-10 01:45:47',1,'2009-07-19 05:46:53');
INSERT INTO `cached_pages` VALUES (46,'/tags/collision','[9:Article][1:Site][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-21 13:24:01',1,NULL);
INSERT INTO `cached_pages` VALUES (47,'/tags/activerecord','[9:Article][1:Site][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-10 01:46:17',1,'2009-07-19 05:46:53');
INSERT INTO `cached_pages` VALUES (48,'/2009/7/19/timetrap-simple-command-line-time-tracking-with-ruby','[10:Article][1:Site][1:User][9:Article][5:Article][6:Article][4:Article][3:Article][2:Article][8:Article]','2009-07-19 06:25:21',1,NULL);
INSERT INTO `cached_pages` VALUES (49,'/feed','[1:Section][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2009-07-19 06:33:41',1,NULL);
INSERT INTO `cached_pages` VALUES (50,'/feed/rss.xml','[1:Section][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2009-07-19 06:34:11',1,NULL);
/*!40000 ALTER TABLE `cached_pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `content_versions`
--

DROP TABLE IF EXISTS `content_versions`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `content_versions` (
  `id` int(11) NOT NULL auto_increment,
  `content_id` int(11) default NULL,
  `version` int(11) default NULL,
  `article_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `title` varchar(255) default NULL,
  `permalink` varchar(255) default NULL,
  `excerpt` text,
  `body` text,
  `excerpt_html` text,
  `body_html` text,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `published_at` datetime default NULL,
  `author` varchar(100) default NULL,
  `author_url` varchar(255) default NULL,
  `author_email` varchar(255) default NULL,
  `author_ip` varchar(100) default NULL,
  `comments_count` int(11) default '0',
  `updater_id` int(11) default NULL,
  `versioned_type` varchar(20) default NULL,
  `site_id` int(11) default NULL,
  `approved` tinyint(1) default '0',
  `comment_age` int(11) default '0',
  `filter` varchar(255) default NULL,
  `user_agent` varchar(255) default NULL,
  `referrer` varchar(255) default NULL,
  `assets_count` int(11) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `content_versions`
--

LOCK TABLES `content_versions` WRITE;
/*!40000 ALTER TABLE `content_versions` DISABLE KEYS */;
INSERT INTO `content_versions` VALUES (3,NULL,2,2,1,'A smart pluralizing helper for rails.','a-smart-pluralizing-helper-for-rails','','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Since Ruby lets you add methods to any class we just reopen <code>String</code> and add a <code>smart_pluralize</code> method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-05-20 06:59:24','2009-05-20 06:59:24','2009-05-20 05:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (4,NULL,3,2,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Since Ruby lets you add methods to any class we just reopen <code>String</code> and add a <code>smart_pluralize</code> method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-05-20 08:11:59','2009-05-20 08:11:59','2009-05-20 05:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (5,NULL,4,2,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Now here&#8217;s the fun part.  Having this method take <code>self</code> (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-05-20 08:16:54','2009-05-20 08:16:54','2009-05-20 05:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (24,NULL,17,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">function scaleTextareas() {\n  var textareaWidth = 65;\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/textareaWidth) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-05-26 21:34:05','2009-05-26 21:34:05',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (28,NULL,18,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">function scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-05-28 07:31:34','2009-05-28 07:31:34','2009-05-26 21:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (29,NULL,6,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(textareaWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">function scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(textareaWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-05-28 07:32:37','2009-05-28 07:32:37','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (30,NULL,7,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires Prototype\r\n*/\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(textareaWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n* Scale all textareas dynamically on the page\n* Requires Prototype\n*/\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(textareaWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-05-28 07:34:25','2009-05-28 07:34:25','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (31,NULL,8,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(t.offsetWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-05-28 07:39:03','2009-05-28 07:39:03','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (32,NULL,19,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-05-28 07:45:05','2009-05-28 07:45:05','2009-05-26 21:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (33,NULL,20,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires jQuery\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires jQuery\n */\nfunction scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-06-01 20:33:42','2009-06-01 20:33:42','2009-05-26 21:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (34,NULL,9,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nIts tested in Firefox, Safari, IE6 and IE7.\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(t.offsetWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Its tested in Firefox, Safari, <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span>.</p>\n\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-06-02 05:38:10','2009-06-02 05:38:10','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (35,NULL,1,5,1,'How to load a Yaml config object','how-to-load-a-yaml-config-object','','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"Yaml\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.\r\n\r\n<pre><code class=\"ruby\">\r\nclass MyClass\r\n  def self.config_file\r\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\r\n  end \r\n\r\n  def self.config\r\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\r\n  end \r\n\r\n  def config\r\n    self.class.config\r\n  end \r\nend\r\n</code></pre>\r\n\r\nNow you can do things like this in your instance and class methods:\r\n\r\n<pre><code class=\"ruby\">\r\ndef where_am_i\r\n  config[:host]\r\nend\r\n</code></pre>\r\n\r\nThe yaml file would look like this:\r\n\r\n<pre><code class=\"yaml\">\r\ndevelopment:\r\n  host: localhost\r\ntest:\r\n  host: test.host\r\nproduction:\r\n  host: your_production_host.com\r\n</code></pre>','','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\">Yaml</a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>\n\n\n<pre><code class=\"ruby\">\nclass MyClass\n  def self.config_file\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\n  end \n\n  def self.config\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\n  end \n\n  def config\n    self.class.config\n  end \nend\n</code></pre>\n\n	<p>Now you can do things like this in your instance and class methods:</p>\n\n\n<pre><code class=\"ruby\">\ndef where_am_i\n  config[:host]\nend\n</code></pre>\n\n	<p>The yaml file would look like this:</p>\n\n\n<pre><code class=\"yaml\">\ndevelopment:\n  host: localhost\ntest:\n  host: test.host\nproduction:\n  host: your_production_host.com\n</code></pre>','2009-06-10 17:13:51','2009-06-10 17:13:51',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (41,NULL,6,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like _a.*z_ will work just fine.\r\n','','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>Here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a></p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <em>a.*z</em> will work just fine.</p>','2009-06-17 23:01:23','2009-06-17 23:01:23',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (42,NULL,7,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.\r\n','','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>Here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a></p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.</p>','2009-06-17 23:02:44','2009-06-17 23:02:44',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (43,NULL,8,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>Here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a></p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.  It wouldn&#8217;t be hard to enhance this to split keywords in the query apart, so <code>Bachelor Mount</code> would match an item call <em>Mount Bachelor</em>.  If this appeals to you feel free to fork the <a href=\"http://gist.github.com/131085\">gist on github</a>.</p>','2009-06-17 23:05:28','2009-06-17 23:05:28',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (44,NULL,9,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.  It wouldn&#8217;t be hard to enhance this to split keywords in the query apart, so <code>Bachelor Mount</code> would match an item call <em>Mount Bachelor</em>.  If this appeals to you feel free to fork the <a href=\"http://gist.github.com/131085\">gist on github</a>.</p>','2009-06-17 23:08:43','2009-06-17 23:08:43',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (45,NULL,5,2,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Now here&#8217;s the fun part.  Having this method take <code>self</code> (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-06-19 16:20:40','2009-06-19 16:20:40','2009-05-19 20:58:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (51,NULL,6,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','','<p>When you&#8217;re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>Well now there&#8217;s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is <em>an open-source implementation of JavaScript written entirely in Java</em>.</p>\n\n\n	<p>I&#8217;ll show you how to get it up and running on <span class=\"caps\">OS X</span>, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nNow that&#8217;s it.  Now you can get into an interactive javascript console by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put the following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>So that was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states: <em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 22:56:31','2009-06-26 22:56:31',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (52,NULL,7,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell there\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>Well there&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to get it up and running on <span class=\"caps\">OS X</span>, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put the following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 23:04:26','2009-06-26 23:04:26',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (53,NULL,8,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to get it up and running on <span class=\"caps\">OS X</span>, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put the following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 23:04:59','2009-06-26 23:04:59',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (54,NULL,9,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) as well with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put the following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 23:05:51','2009-06-26 23:05:51',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (60,NULL,6,9,1,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside of the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @#define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n    def method_missing(method_id, *args, &block)\r\n      method_name = method_id.to_s\r\n\r\n      if self.class.private_method_defined?(method_name)\r\n        raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n      end\r\n\r\n      # If we haven\'t generated any methods yet, generate them, then\r\n      # see if we\'ve created the method we\'re looking for.\r\n      if !self.class.generated_methods?\r\n        self.class.define_attribute_methods\r\n        if self.class.generated_methods.include?(method_name)\r\n          return self.send(method_id, *args, &block)\r\n        end\r\n      end\r\n\r\n      if self.class.primary_key.to_s == method_name\r\n        id\r\n      elsif md = self.class.match_attribute_method?(method_name)\r\n        attribute_name, method_type = md.pre_match, md.to_s\r\n        if @attributes.include?(attribute_name)\r\n          __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n        else\r\n          super\r\n        end\r\n      elsif @attributes.include?(method_name)\r\n        read_attribute(method_name)\r\n      else\r\n        super\r\n      end\r\n    end\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside of the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>#define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n    def method_missing(method_id, *args, &#38;block)\n      method_name = method_id.to_s\n\n      if self.class.private_method_defined?(method_name)\n        raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n      end\n\n      # If we haven\'t generated any methods yet, generate them, then\n      # see if we\'ve created the method we\'re looking for.\n      if !self.class.generated_methods?\n        self.class.define_attribute_methods\n        if self.class.generated_methods.include?(method_name)\n          return self.send(method_id, *args, &#38;block)\n        end\n      end\n\n      if self.class.primary_key.to_s == method_name\n        id\n      elsif md = self.class.match_attribute_method?(method_name)\n        attribute_name, method_type = md.pre_match, md.to_s\n        if @attributes.include?(attribute_name)\n          __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n        else\n          super\n        end\n      elsif @attributes.include?(method_name)\n        read_attribute(method_name)\n      else\n        super\n      end\n    end\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-10 00:32:15','2009-07-10 00:32:15',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (61,NULL,7,9,1,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them.  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @#define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them.  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>#define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-10 00:35:40','2009-07-10 00:35:40',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (63,NULL,8,9,1,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-18 23:45:27','2009-07-18 23:45:27','2009-07-10 00:38:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (64,NULL,10,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put this following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put this following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-07-18 23:46:47','2009-07-18 23:46:47','2009-06-26 23:07:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (65,NULL,10,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.  It wouldn&#8217;t be hard to enhance this to split keywords in the query apart, so <code>Bachelor Mount</code> would match an item call <em>Mount Bachelor</em>.  If this appeals to you feel free to fork the <a href=\"http://gist.github.com/131085\">gist on github</a>.</p>','2009-07-18 23:47:22','2009-07-18 23:47:22','2009-06-17 23:09:00',NULL,NULL,NULL,NULL,1,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (66,NULL,2,5,1,'How to load a YAML config object','how-to-load-a-yaml-config-object','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.\r\n\r\n<pre><code class=\"ruby\">\r\nclass MyClass\r\n  def self.config_file\r\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\r\n  end \r\n\r\n  def self.config\r\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\r\n  end \r\n\r\n  def config\r\n    self.class.config\r\n  end \r\nend\r\n</code></pre>\r\n\r\nNow you can do things like this in your instance and class methods:\r\n\r\n<pre><code class=\"ruby\">\r\ndef where_am_i\r\n  config[:host]\r\nend\r\n</code></pre>\r\n\r\nThe YAML file would look like this:\r\n\r\n<pre><code class=\"yaml\">\r\ndevelopment:\r\n  host: localhost\r\ntest:\r\n  host: test.host\r\nproduction:\r\n  host: your_production_host.com\r\n</code></pre>','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\"><span class=\"caps\">YAML</span></a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\"><span class=\"caps\">YAML</span></a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>\n\n\n<pre><code class=\"ruby\">\nclass MyClass\n  def self.config_file\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\n  end \n\n  def self.config\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\n  end \n\n  def config\n    self.class.config\n  end \nend\n</code></pre>\n\n	<p>Now you can do things like this in your instance and class methods:</p>\n\n\n<pre><code class=\"ruby\">\ndef where_am_i\n  config[:host]\nend\n</code></pre>\n\n	<p>The <span class=\"caps\">YAML</span> file would look like this:</p>\n\n\n<pre><code class=\"yaml\">\ndevelopment:\n  host: localhost\ntest:\n  host: test.host\nproduction:\n  host: your_production_host.com\n</code></pre>','2009-07-18 23:48:11','2009-07-18 23:48:11','2009-06-10 17:13:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (67,NULL,21,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires jQuery\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires jQuery\n */\nfunction scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-07-18 23:48:53','2009-07-18 23:48:53','2009-05-26 21:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (68,NULL,6,2,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Now here&#8217;s the fun part.  Having this method take <code>self</code> (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-07-18 23:49:21','2009-07-18 23:49:21','2009-05-19 20:58:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (69,NULL,10,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nIts tested in Firefox, Safari, IE6 and IE7.\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(t.offsetWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Its tested in Firefox, Safari, <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span>.</p>\n\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-07-18 23:50:35','2009-07-18 23:50:35','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (70,NULL,9,9,1,'Fix for \"random\" NoMethodError in Rails ActiveRecord ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-18 23:56:51','2009-07-18 23:56:51','2009-07-10 00:38:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (78,NULL,9,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of these commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of these commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months now, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:41:42','2009-07-19 05:41:42',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (79,NULL,10,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months now, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:41:59','2009-07-19 05:41:59',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (80,NULL,11,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:42:22','2009-07-19 05:42:22',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (81,NULL,12,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when _I find the time_ (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when <em>I find the time</em> (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:43:02','2009-07-19 05:43:02',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (82,NULL,13,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when _I find the time_ (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when <em>I find the time</em> (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:43:34','2009-07-19 05:43:34',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (83,NULL,10,9,1,'Fix for \"random\" NoMethodError in Rails\' ActiveRecord ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-19 05:46:44','2009-07-19 05:46:44','2009-07-10 00:38:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
/*!40000 ALTER TABLE `content_versions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contents`
--

DROP TABLE IF EXISTS `contents`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `contents` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `title` varchar(255) default NULL,
  `permalink` varchar(255) default NULL,
  `excerpt` text,
  `body` text,
  `excerpt_html` text,
  `body_html` text,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `published_at` datetime default NULL,
  `type` varchar(20) default NULL,
  `author` varchar(100) default NULL,
  `author_url` varchar(255) default NULL,
  `author_email` varchar(255) default NULL,
  `author_ip` varchar(100) default NULL,
  `comments_count` int(11) default '0',
  `updater_id` int(11) default NULL,
  `version` int(11) default NULL,
  `site_id` int(11) default NULL,
  `approved` tinyint(1) default '0',
  `comment_age` int(11) default '0',
  `filter` varchar(255) default NULL,
  `user_agent` varchar(255) default NULL,
  `referrer` varchar(255) default NULL,
  `assets_count` int(11) default '0',
  PRIMARY KEY  (`id`),
  KEY `idx_comments` (`article_id`,`approved`,`type`),
  KEY `idx_articles_published` (`published_at`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `contents`
--

LOCK TABLES `contents` WRITE;
/*!40000 ALTER TABLE `contents` DISABLE KEYS */;
INSERT INTO `contents` VALUES (2,NULL,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Now here&#8217;s the fun part.  Having this method take <code>self</code> (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-05-20 05:35:17','2009-07-18 23:49:21','2009-05-19 20:58:00','Article',NULL,NULL,NULL,NULL,0,1,6,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (3,NULL,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nIts tested in Firefox, Safari, IE6 and IE7.\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(t.offsetWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Its tested in Firefox, Safari, <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span>.</p>\n\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-05-26 01:38:17','2009-07-18 23:50:35','2009-05-27 20:09:00','Article',NULL,NULL,NULL,NULL,0,1,10,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (4,NULL,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires jQuery\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires jQuery\n */\nfunction scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-05-26 01:39:03','2009-07-18 23:48:53','2009-05-26 21:34:00','Article',NULL,NULL,NULL,NULL,0,1,21,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (5,NULL,1,'How to load a YAML config object','how-to-load-a-yaml-config-object','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.\r\n\r\n<pre><code class=\"ruby\">\r\nclass MyClass\r\n  def self.config_file\r\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\r\n  end \r\n\r\n  def self.config\r\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\r\n  end \r\n\r\n  def config\r\n    self.class.config\r\n  end \r\nend\r\n</code></pre>\r\n\r\nNow you can do things like this in your instance and class methods:\r\n\r\n<pre><code class=\"ruby\">\r\ndef where_am_i\r\n  config[:host]\r\nend\r\n</code></pre>\r\n\r\nThe YAML file would look like this:\r\n\r\n<pre><code class=\"yaml\">\r\ndevelopment:\r\n  host: localhost\r\ntest:\r\n  host: test.host\r\nproduction:\r\n  host: your_production_host.com\r\n</code></pre>','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\"><span class=\"caps\">YAML</span></a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\"><span class=\"caps\">YAML</span></a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>\n\n\n<pre><code class=\"ruby\">\nclass MyClass\n  def self.config_file\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\n  end \n\n  def self.config\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\n  end \n\n  def config\n    self.class.config\n  end \nend\n</code></pre>\n\n	<p>Now you can do things like this in your instance and class methods:</p>\n\n\n<pre><code class=\"ruby\">\ndef where_am_i\n  config[:host]\nend\n</code></pre>\n\n	<p>The <span class=\"caps\">YAML</span> file would look like this:</p>\n\n\n<pre><code class=\"yaml\">\ndevelopment:\n  host: localhost\ntest:\n  host: test.host\nproduction:\n  host: your_production_host.com\n</code></pre>','2009-06-10 17:13:51','2009-07-18 23:48:11','2009-06-10 17:13:00','Article',NULL,NULL,NULL,NULL,0,1,2,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (6,NULL,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.  It wouldn&#8217;t be hard to enhance this to split keywords in the query apart, so <code>Bachelor Mount</code> would match an item call <em>Mount Bachelor</em>.  If this appeals to you feel free to fork the <a href=\"http://gist.github.com/131085\">gist on github</a>.</p>','2009-06-17 22:47:59','2009-07-18 23:47:22','2009-06-17 23:09:00','Article',NULL,NULL,NULL,NULL,1,1,10,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (7,6,NULL,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly',NULL,'Dead simple, but seems like it won\'t scale too well. I wonder how hard it would be to index them using a trie?','','<p>Dead simple, but seems like it won&#8217;t scale too well. I wonder how hard it would be to index them using a trie?</p>','2009-06-18 20:53:18','2009-06-18 20:53:18','2009-06-17 23:09:00','Comment','Ian Smith-Heisters','http://idiosyncra.tc','i@idiosyncra.tc','70.36.142.16',0,NULL,NULL,1,1,0,'textile_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/525.28.3 (KHTML, like Gecko) Version/3.2.3 Safari/525.28.3','http://drasticcode.com/2009/6/17/instant-search-in-pure-javascript-almost-instantly',0);
INSERT INTO `contents` VALUES (8,NULL,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put this following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put this following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 22:22:39','2009-07-18 23:46:47','2009-06-26 23:07:00','Article',NULL,NULL,NULL,NULL,0,1,10,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (9,NULL,1,'Fix for \"random\" NoMethodError in Rails\' ActiveRecord ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-09 23:41:23','2009-07-19 05:46:44','2009-07-10 00:38:00','Article',NULL,NULL,NULL,NULL,0,1,10,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (10,NULL,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when _I find the time_ (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when <em>I find the time</em> (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-13 21:16:02','2009-07-19 05:44:49','2009-07-19 05:44:00','Article',NULL,NULL,NULL,NULL,0,1,13,1,0,30,'textile_filter',NULL,NULL,0);
/*!40000 ALTER TABLE `contents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `events`
--

DROP TABLE IF EXISTS `events`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `events` (
  `id` int(11) NOT NULL auto_increment,
  `mode` varchar(255) default NULL,
  `user_id` int(11) default NULL,
  `article_id` int(11) default NULL,
  `title` text,
  `body` text,
  `created_at` datetime default NULL,
  `author` varchar(100) default NULL,
  `comment_id` int(11) default NULL,
  `site_id` int(11) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=77 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `events`
--

LOCK TABLES `events` WRITE;
/*!40000 ALTER TABLE `events` DISABLE KEYS */;
INSERT INTO `events` VALUES (2,'publish',1,2,'A smart pluralizing helper for rails.','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so my pair and I wrote this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-05-20 05:35:17',NULL,NULL,1);
INSERT INTO `events` VALUES (3,'edit',1,2,'A smart pluralizing helper for rails.','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-05-20 06:59:24',NULL,NULL,1);
INSERT INTO `events` VALUES (4,'edit',1,2,'Smart Pluralize for Rails','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-05-20 08:11:59',NULL,NULL,1);
INSERT INTO `events` VALUES (5,'edit',1,2,'Smart Pluralize for Rails','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-05-20 08:16:54',NULL,NULL,1);
INSERT INTO `events` VALUES (6,'publish',1,3,'Resizing Textareas as You Type with Prototype','','2009-05-26 01:38:17',NULL,NULL,1);
INSERT INTO `events` VALUES (7,'publish',1,4,'Resizing Textareas as You Type with JQuery','','2009-05-26 01:39:03',NULL,NULL,1);
INSERT INTO `events` VALUES (8,'edit',1,4,'Resizing Textareas as You Type with JQuery','<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 01:49:20',NULL,NULL,1);
INSERT INTO `events` VALUES (9,'edit',1,3,'Resizing Textareas as You Type with Prototype','<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/90) + 1\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(\'scaleTextareas();\', 1000)\r\n}\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});\r\n</code></pre>\r\n','2009-05-26 01:51:37',NULL,NULL,1);
INSERT INTO `events` VALUES (10,'edit',1,4,'Resizing Textareas as You Type with JQuery','\r\n<textarea>\r\nDue to circumstances beyond your control, you are master of your fate\r\nand captain of your soul.\r\n\r\nWhom computers would destroy, they must first drive mad.\r\n\r\nThe sooner you make your first 5000 mistakes, the sooner you will be\r\nable to correct them.\r\n                -- Nicolaides\r\n\r\nRule of Defactualization:\r\n  Information deteriorates upward through bureaucracies.\r\n\r\nDocumentation is like sex: when it is good, it is very, very good; and \r\nwhen it is bad, it is better than nothing.\r\n    -- Dick Brandon\r\n\r\n</textarea>\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:03:43',NULL,NULL,1);
INSERT INTO `events` VALUES (11,'edit',1,4,'Resizing Textareas as You Type with JQuery','<textarea>Due to circumstances beyond your control, you are master of your fate\r\nand captain of your soul.</textarea>\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:04:56',NULL,NULL,1);
INSERT INTO `events` VALUES (12,'edit',1,4,'Resizing Textareas as You Type with JQuery','<textarea>Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:05:20',NULL,NULL,1);
INSERT INTO `events` VALUES (13,'edit',1,4,'Resizing Textareas as You Type with JQuery','<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Spill your guts:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:07:43',NULL,NULL,1);
INSERT INTO `events` VALUES (14,'edit',1,4,'Resizing Textareas as You Type with JQuery','<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Spill your guts:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n\r\nHere\'s the code:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:09:49',NULL,NULL,1);
INSERT INTO `events` VALUES (15,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has empty.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:20:42',NULL,NULL,1);
INSERT INTO `events` VALUES (16,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has empty.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:21:07',NULL,NULL,1);
INSERT INTO `events` VALUES (17,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running jQuery\":http://jquery.com ) and all your textareas expand to fit the text the user has empty.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:21:55',NULL,NULL,1);
INSERT INTO `events` VALUES (18,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has empty.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:22:15',NULL,NULL,1);
INSERT INTO `events` VALUES (19,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in Internet Explorer (after some refactoring).  ','2009-05-26 05:24:22',NULL,NULL,1);
INSERT INTO `events` VALUES (20,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires jQuery\r\n*/\r\nfunction scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n    setTimeout(scaleTextareas, 1000);\r\n  });\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});\r\n$(document).ready(function(){\r\n  scaleAll()\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 20:27:05',NULL,NULL,1);
INSERT INTO `events` VALUES (21,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n<input type=\"submit\" value=\"Submit\" onclick=\"return false\"/>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires jQuery\r\n*/\r\nfunction scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n    setTimeout(scaleTextareas, 1000);\r\n  });\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 20:27:36',NULL,NULL,1);
INSERT INTO `events` VALUES (22,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires jQuery\r\n*/\r\nfunction scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n    setTimeout(scaleTextareas, 1000);\r\n  });\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 20:29:55',NULL,NULL,1);
INSERT INTO `events` VALUES (23,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires jQuery\r\n*/\r\nfunction scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n    setTimeout(scaleTextareas, 1000);\r\n  });\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 20:30:58',NULL,NULL,1);
INSERT INTO `events` VALUES (24,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 21:34:05',NULL,NULL,1);
INSERT INTO `events` VALUES (25,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  The only problem is what if you\'re not running jQuery.  Rails by default uses the \"Prototype\":http://www.prototypejs.org/ javascript framework, and you may not want to switch to jQuery just for fancy-pancy resizing textareas.  Well not to worry.  Here\'s the same functionality built on top of Prototype:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires Prototype\r\n*/\r\nfunction scaleTextareas(){\r\n  var textareaWidth = 65;\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/textareaWidth) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n','2009-05-27 01:52:53',NULL,NULL,1);
INSERT INTO `events` VALUES (26,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires Prototype\r\n*/\r\nfunction scaleTextareas(){\r\n  var textareaWidth = 65;\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/textareaWidth) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextareas/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-27 20:00:16',NULL,NULL,1);
INSERT INTO `events` VALUES (27,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires Prototype\r\n*/\r\nfunction scaleTextareas(){\r\n  var textareaWidth = 65;\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/textareaWidth) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-27 20:04:58',NULL,NULL,1);
INSERT INTO `events` VALUES (28,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-28 07:31:34',NULL,NULL,1);
INSERT INTO `events` VALUES (29,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(textareaWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-28 07:32:37',NULL,NULL,1);
INSERT INTO `events` VALUES (30,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(textareaWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-28 07:34:25',NULL,NULL,1);
INSERT INTO `events` VALUES (31,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-28 07:39:03',NULL,NULL,1);
INSERT INTO `events` VALUES (32,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-28 07:45:05',NULL,NULL,1);
INSERT INTO `events` VALUES (33,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires jQuery\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-06-01 20:33:42',NULL,NULL,1);
INSERT INTO `events` VALUES (34,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nIts tested in Firefox, Safari, IE6 and IE7.\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-06-02 05:38:11',NULL,NULL,1);
INSERT INTO `events` VALUES (35,'publish',1,5,'How to load a YAML config object','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.\r\n\r\n<pre><code class=\"ruby\">\r\nclass MyClass\r\n  def self.config_file\r\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\r\n  end \r\n\r\n  def self.config\r\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\r\n  end \r\n\r\n  def config\r\n    self.class.config\r\n  end \r\nend\r\n</code></pre>\r\n\r\nNow you can do things like this in your instance and class methods:\r\n\r\n<pre><code class=\"ruby\">\r\ndef where_am_i\r\n  config[:host]\r\nend\r\n</code></pre>\r\n\r\nThe YAML file would look like this:\r\n\r\n<pre><code class=\"yaml\">\r\ndevelopment:\r\n  host: localhost\r\ntest:\r\n  host: test.host\r\nproduction:\r\n  host: your_production_host.com\r\n</code></pre>','2009-06-10 17:13:51',NULL,NULL,1);
INSERT INTO `events` VALUES (36,'publish',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html','2009-06-17 22:47:59',NULL,NULL,1);
INSERT INTO `events` VALUES (37,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>','2009-06-17 22:53:06',NULL,NULL,1);
INSERT INTO `events` VALUES (38,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with *search_item* classes, and these contain an element with a *search_text* class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>','2009-06-17 22:56:02',NULL,NULL,1);
INSERT INTO `events` VALUES (39,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with *search_item* classes, and these contain an element with a *search_text* class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\n','2009-06-17 22:58:49',NULL,NULL,1);
INSERT INTO `events` VALUES (40,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with *search_item* classes, and these contain an element with a *search_text* class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like _a.*z_ will work just fine.\r\n','2009-06-17 23:00:45',NULL,NULL,1);
INSERT INTO `events` VALUES (41,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like _a.*z_ will work just fine.\r\n','2009-06-17 23:01:23',NULL,NULL,1);
INSERT INTO `events` VALUES (42,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.\r\n','2009-06-17 23:02:44',NULL,NULL,1);
INSERT INTO `events` VALUES (43,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','2009-06-17 23:05:28',NULL,NULL,1);
INSERT INTO `events` VALUES (44,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','2009-06-17 23:08:43',NULL,NULL,1);
INSERT INTO `events` VALUES (45,'comment',NULL,6,'Instant Search in pure Javascript (almost instantly)','Dead simple, but seems like it won\'t scale too well. I wonder how hard it would be to index them using a trie?','2009-06-18 20:53:18','Ian Smith-Heisters',7,1);
INSERT INTO `events` VALUES (46,'edit',1,2,'Smart Pluralize for Rails','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-06-19 16:20:40',NULL,NULL,1);
INSERT INTO `events` VALUES (47,'publish',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ \r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\n','2009-06-26 22:22:39',NULL,NULL,1);
INSERT INTO `events` VALUES (48,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nbq. JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar. \r\n\r\n','2009-06-26 22:25:57',NULL,NULL,1);
INSERT INTO `events` VALUES (49,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library from @http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip@ and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 22:31:50',NULL,NULL,1);
INSERT INTO `events` VALUES (50,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nand copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 22:54:33',NULL,NULL,1);
INSERT INTO `events` VALUES (51,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 22:55:17',NULL,NULL,1);
INSERT INTO `events` VALUES (52,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 22:56:31',NULL,NULL,1);
INSERT INTO `events` VALUES (53,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell there\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 23:04:26',NULL,NULL,1);
INSERT INTO `events` VALUES (54,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 23:04:59',NULL,NULL,1);
INSERT INTO `events` VALUES (55,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put this following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 23:05:51',NULL,NULL,1);
INSERT INTO `events` VALUES (56,'publish',1,9,'Make it so AR attributes which conflict with object-private methods (e.g.  system) don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix an esoteric (but dangerous) bug in ActiveRecord which can potentially cause a call to one of your model\'s attribute methods to sometimes through a NoMethodError. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Then suddenly the site started throwing errors, which I traced back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>','2009-07-09 23:41:23',NULL,NULL,1);
INSERT INTO `events` VALUES (57,'edit',1,9,'Make it so AR attributes which conflict with object-private methods (e.g.  system) don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix an esoteric (but dangerous) bug in ActiveRecord which can potentially cause a call to one of your model\'s attribute methods to sometimes through a NoMethodError. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Then suddenly the site started throwing errors, which I traced back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">\r\n@demo_files.map{|p| p.system}.compact\r\n</code></pre>','2009-07-09 23:42:09',NULL,NULL,1);
INSERT INTO `events` VALUES (58,'edit',1,9,'Make it so AR attributes which conflict with object-private methods (e.g.  system) don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix an esoteric (but dangerous) bug in ActiveRecord which can potentially cause a call to one of your model\'s attribute methods to sometimes through a NoMethodError. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code</pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system = \"openSUSE\"\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code</pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning a no','2009-07-09 23:53:51',NULL,NULL,1);
INSERT INTO `events` VALUES (59,'edit',1,9,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in ActiveRecord which can cause a call to one of your model\'s attribute methods to sometimes throw a NoMethodError. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code</pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system = \"openSUSE\"\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning and raise an error if you try to call them.  Before it would just call the method even if was private.\r\n\r\nThe problem was that ','2009-07-09 23:56:26',NULL,NULL,1);
INSERT INTO `events` VALUES (60,'edit',1,9,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside of the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n      # Checks whether the method is defined in the model or any of its subclasses\r\n      # that also derive from Active Record. Raises DangerousAttributeError if the\r\n      # method is defined by Active Record though.\r\n      def instance_method_already_implemented?(method_name)\r\n        method_name = method_name.to_s\r\n        return true if method_name =~ /^id(=$|\\?$|$)/\r\n        @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n        @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n        raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n        @_defined_class_methods.include?(method_name)\r\n      end\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @#define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-10 00:13:36',NULL,NULL,1);
INSERT INTO `events` VALUES (61,'edit',1,9,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside of the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @#define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-10 00:32:15',NULL,NULL,1);
INSERT INTO `events` VALUES (62,'edit',1,9,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-10 00:35:40',NULL,NULL,1);
INSERT INTO `events` VALUES (63,'publish',1,10,'Timetrap: A command-line timetracker in Ruby','http://github.com/samg/timetrap/tree/master','2009-07-13 21:16:02',NULL,NULL,1);
INSERT INTO `events` VALUES (64,'edit',1,9,'Fix for \"random\" NoMethodError in Rails ActiveRecord ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-18 23:56:51',NULL,NULL,1);
INSERT INTO `events` VALUES (65,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  There\'s a lot of \"good reason\'s\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot \r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:05:21',NULL,NULL,1);
INSERT INTO `events` VALUES (66,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  There\'s a lot of \"good reason\'s\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved the interface.\r\n\r\n<pre><code>\r\n$ t switch writing\r\n$ t in blog post\r\n$ t out\r\n$ t display\r\nTimesheet writing:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    blog post\r\n                                     0:12:45\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:24:35',NULL,NULL,1);
INSERT INTO `events` VALUES (67,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago (and the reason I wrote \"Timetrap\":http://github.com/samg/timetrap/tree/master.)\r\n\r\nThere\'s a lot of \"good reason\'s\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.\r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:46:39',NULL,NULL,1);
INSERT INTO `events` VALUES (68,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago (and the reason I wrote \"Timetrap\":http://github.com/samg/timetrap/tree/master.)\r\n\r\nThere\'s a lot of \"good reason\'s\"(8 Reasons Time Tracking Is Good):http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.\r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:48:17',NULL,NULL,1);
INSERT INTO `events` VALUES (69,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago (and the reason I wrote \"Timetrap\":http://github.com/samg/timetrap/tree/master.)\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.\r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:49:06',NULL,NULL,1);
INSERT INTO `events` VALUES (70,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago (and the reason I wrote \"Timetrap\":http://github.com/samg/timetrap/tree/master.)\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 00:51:08',NULL,NULL,1);
INSERT INTO `events` VALUES (71,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:39:02',NULL,NULL,1);
INSERT INTO `events` VALUES (72,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of these commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:41:42',NULL,NULL,1);
INSERT INTO `events` VALUES (73,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:41:59',NULL,NULL,1);
INSERT INTO `events` VALUES (74,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:42:22',NULL,NULL,1);
INSERT INTO `events` VALUES (75,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when _I find the time_ (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:43:02',NULL,NULL,1);
INSERT INTO `events` VALUES (76,'edit',1,9,'Fix for \"random\" NoMethodError in Rails\' ActiveRecord ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-19 05:46:44',NULL,NULL,1);
/*!40000 ALTER TABLE `events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `feedbacks`
--

DROP TABLE IF EXISTS `feedbacks`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `feedbacks` (
  `id` int(11) NOT NULL auto_increment,
  `site_id` int(11) default NULL,
  `name` varchar(255) default NULL,
  `email` varchar(255) default NULL,
  `body` text,
  `key` varchar(255) default NULL,
  `created_at` datetime default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `feedbacks`
--

LOCK TABLES `feedbacks` WRITE;
/*!40000 ALTER TABLE `feedbacks` DISABLE KEYS */;
/*!40000 ALTER TABLE `feedbacks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `memberships`
--

DROP TABLE IF EXISTS `memberships`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `memberships` (
  `id` int(11) NOT NULL auto_increment,
  `site_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `created_at` datetime default NULL,
  `admin` tinyint(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `memberships`
--

LOCK TABLES `memberships` WRITE;
/*!40000 ALTER TABLE `memberships` DISABLE KEYS */;
/*!40000 ALTER TABLE `memberships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mephisto_plugins`
--

DROP TABLE IF EXISTS `mephisto_plugins`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `mephisto_plugins` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `options` text,
  `type` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `mephisto_plugins`
--

LOCK TABLES `mephisto_plugins` WRITE;
/*!40000 ALTER TABLE `mephisto_plugins` DISABLE KEYS */;
/*!40000 ALTER TABLE `mephisto_plugins` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) NOT NULL,
  UNIQUE KEY `unique_schema_migrations` (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('1');
INSERT INTO `schema_migrations` VALUES ('10');
INSERT INTO `schema_migrations` VALUES ('11');
INSERT INTO `schema_migrations` VALUES ('12');
INSERT INTO `schema_migrations` VALUES ('13');
INSERT INTO `schema_migrations` VALUES ('14');
INSERT INTO `schema_migrations` VALUES ('15');
INSERT INTO `schema_migrations` VALUES ('16');
INSERT INTO `schema_migrations` VALUES ('17');
INSERT INTO `schema_migrations` VALUES ('18');
INSERT INTO `schema_migrations` VALUES ('19');
INSERT INTO `schema_migrations` VALUES ('2');
INSERT INTO `schema_migrations` VALUES ('20');
INSERT INTO `schema_migrations` VALUES ('20081219130711');
INSERT INTO `schema_migrations` VALUES ('20081223142853');
INSERT INTO `schema_migrations` VALUES ('20081223221228');
INSERT INTO `schema_migrations` VALUES ('21');
INSERT INTO `schema_migrations` VALUES ('22');
INSERT INTO `schema_migrations` VALUES ('23');
INSERT INTO `schema_migrations` VALUES ('24');
INSERT INTO `schema_migrations` VALUES ('25');
INSERT INTO `schema_migrations` VALUES ('26');
INSERT INTO `schema_migrations` VALUES ('27');
INSERT INTO `schema_migrations` VALUES ('28');
INSERT INTO `schema_migrations` VALUES ('29');
INSERT INTO `schema_migrations` VALUES ('3');
INSERT INTO `schema_migrations` VALUES ('30');
INSERT INTO `schema_migrations` VALUES ('31');
INSERT INTO `schema_migrations` VALUES ('32');
INSERT INTO `schema_migrations` VALUES ('33');
INSERT INTO `schema_migrations` VALUES ('34');
INSERT INTO `schema_migrations` VALUES ('35');
INSERT INTO `schema_migrations` VALUES ('36');
INSERT INTO `schema_migrations` VALUES ('37');
INSERT INTO `schema_migrations` VALUES ('38');
INSERT INTO `schema_migrations` VALUES ('39');
INSERT INTO `schema_migrations` VALUES ('4');
INSERT INTO `schema_migrations` VALUES ('40');
INSERT INTO `schema_migrations` VALUES ('41');
INSERT INTO `schema_migrations` VALUES ('42');
INSERT INTO `schema_migrations` VALUES ('43');
INSERT INTO `schema_migrations` VALUES ('44');
INSERT INTO `schema_migrations` VALUES ('45');
INSERT INTO `schema_migrations` VALUES ('46');
INSERT INTO `schema_migrations` VALUES ('47');
INSERT INTO `schema_migrations` VALUES ('48');
INSERT INTO `schema_migrations` VALUES ('49');
INSERT INTO `schema_migrations` VALUES ('5');
INSERT INTO `schema_migrations` VALUES ('50');
INSERT INTO `schema_migrations` VALUES ('51');
INSERT INTO `schema_migrations` VALUES ('52');
INSERT INTO `schema_migrations` VALUES ('53');
INSERT INTO `schema_migrations` VALUES ('54');
INSERT INTO `schema_migrations` VALUES ('55');
INSERT INTO `schema_migrations` VALUES ('56');
INSERT INTO `schema_migrations` VALUES ('57');
INSERT INTO `schema_migrations` VALUES ('58');
INSERT INTO `schema_migrations` VALUES ('59');
INSERT INTO `schema_migrations` VALUES ('6');
INSERT INTO `schema_migrations` VALUES ('60');
INSERT INTO `schema_migrations` VALUES ('61');
INSERT INTO `schema_migrations` VALUES ('62');
INSERT INTO `schema_migrations` VALUES ('63');
INSERT INTO `schema_migrations` VALUES ('64');
INSERT INTO `schema_migrations` VALUES ('65');
INSERT INTO `schema_migrations` VALUES ('66');
INSERT INTO `schema_migrations` VALUES ('67');
INSERT INTO `schema_migrations` VALUES ('68');
INSERT INTO `schema_migrations` VALUES ('69');
INSERT INTO `schema_migrations` VALUES ('7');
INSERT INTO `schema_migrations` VALUES ('70');
INSERT INTO `schema_migrations` VALUES ('71');
INSERT INTO `schema_migrations` VALUES ('72');
INSERT INTO `schema_migrations` VALUES ('73');
INSERT INTO `schema_migrations` VALUES ('74');
INSERT INTO `schema_migrations` VALUES ('75');
INSERT INTO `schema_migrations` VALUES ('76');
INSERT INTO `schema_migrations` VALUES ('8');
INSERT INTO `schema_migrations` VALUES ('9');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sections`
--

DROP TABLE IF EXISTS `sections`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `sections` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `show_paged_articles` tinyint(1) default '0',
  `articles_per_page` int(11) default '15',
  `layout` varchar(255) default NULL,
  `template` varchar(255) default NULL,
  `site_id` int(11) default NULL,
  `path` varchar(255) default NULL,
  `articles_count` int(11) default '0',
  `archive_path` varchar(255) default NULL,
  `archive_template` varchar(255) default NULL,
  `position` int(11) default '1',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `sections`
--

LOCK TABLES `sections` WRITE;
/*!40000 ALTER TABLE `sections` DISABLE KEYS */;
INSERT INTO `sections` VALUES (1,'Home',0,15,NULL,'home.liquid',1,'',8,'archives',NULL,1);
/*!40000 ALTER TABLE `sections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sites`
--

DROP TABLE IF EXISTS `sites`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `sites` (
  `id` int(11) NOT NULL auto_increment,
  `title` varchar(255) default NULL,
  `subtitle` varchar(255) default NULL,
  `email` varchar(255) default NULL,
  `ping_urls` text,
  `articles_per_page` int(11) default '15',
  `host` varchar(255) default NULL,
  `approve_comments` tinyint(1) default NULL,
  `comment_age` int(11) default NULL,
  `timezone` varchar(255) default NULL,
  `filter` varchar(255) default 'textile_filter',
  `permalink_style` varchar(255) default NULL,
  `search_path` varchar(255) default NULL,
  `tag_path` varchar(255) default NULL,
  `tag_layout` varchar(255) default NULL,
  `current_theme_path` varchar(255) default NULL,
  `akismet_key` varchar(100) default NULL,
  `akismet_url` varchar(255) default NULL,
  `lang` varchar(255) NOT NULL default 'en-US',
  PRIMARY KEY  (`id`),
  KEY `index_sites_on_host` (`host`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `sites`
--

LOCK TABLES `sites` WRITE;
/*!40000 ALTER TABLE `sites` DISABLE KEYS */;
INSERT INTO `sites` VALUES (1,'Drastic Code','Thoughts and riffs on code and other things. ','sgrock@gmail.com',NULL,15,'unusedfornow.com',1,30,'US/Pacific','textile_filter',':year/:month/:day/:permalink','search','tags',NULL,'drastic','','','en-US');
/*!40000 ALTER TABLE `sites` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taggings`
--

DROP TABLE IF EXISTS `taggings`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `taggings` (
  `id` int(11) NOT NULL auto_increment,
  `tag_id` int(11) default NULL,
  `taggable_id` int(11) default NULL,
  `taggable_type` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `taggings`
--

LOCK TABLES `taggings` WRITE;
/*!40000 ALTER TABLE `taggings` DISABLE KEYS */;
INSERT INTO `taggings` VALUES (1,1,1,'Content');
INSERT INTO `taggings` VALUES (2,2,1,'Content');
INSERT INTO `taggings` VALUES (3,3,1,'Content');
INSERT INTO `taggings` VALUES (4,1,2,'Content');
INSERT INTO `taggings` VALUES (5,2,2,'Content');
INSERT INTO `taggings` VALUES (6,3,2,'Content');
INSERT INTO `taggings` VALUES (7,3,4,'Content');
INSERT INTO `taggings` VALUES (8,4,4,'Content');
INSERT INTO `taggings` VALUES (9,5,4,'Content');
INSERT INTO `taggings` VALUES (11,1,3,'Content');
INSERT INTO `taggings` VALUES (12,3,3,'Content');
INSERT INTO `taggings` VALUES (13,4,3,'Content');
INSERT INTO `taggings` VALUES (15,7,3,'Content');
INSERT INTO `taggings` VALUES (16,8,3,'Content');
INSERT INTO `taggings` VALUES (17,8,4,'Content');
INSERT INTO `taggings` VALUES (18,4,6,'Content');
INSERT INTO `taggings` VALUES (19,5,6,'Content');
INSERT INTO `taggings` VALUES (20,8,6,'Content');
INSERT INTO `taggings` VALUES (21,9,6,'Content');
INSERT INTO `taggings` VALUES (22,10,6,'Content');
INSERT INTO `taggings` VALUES (23,1,5,'Content');
INSERT INTO `taggings` VALUES (24,2,5,'Content');
INSERT INTO `taggings` VALUES (25,11,5,'Content');
INSERT INTO `taggings` VALUES (26,12,5,'Content');
INSERT INTO `taggings` VALUES (27,13,5,'Content');
INSERT INTO `taggings` VALUES (28,4,8,'Content');
INSERT INTO `taggings` VALUES (29,14,8,'Content');
INSERT INTO `taggings` VALUES (30,15,8,'Content');
INSERT INTO `taggings` VALUES (31,1,9,'Content');
INSERT INTO `taggings` VALUES (32,2,9,'Content');
INSERT INTO `taggings` VALUES (33,16,9,'Content');
INSERT INTO `taggings` VALUES (34,17,9,'Content');
INSERT INTO `taggings` VALUES (35,18,9,'Content');
INSERT INTO `taggings` VALUES (36,19,9,'Content');
INSERT INTO `taggings` VALUES (37,20,9,'Content');
INSERT INTO `taggings` VALUES (38,21,9,'Content');
/*!40000 ALTER TABLE `taggings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `tags` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'rails');
INSERT INTO `tags` VALUES (2,'ruby');
INSERT INTO `tags` VALUES (3,'gist');
INSERT INTO `tags` VALUES (4,'javascript');
INSERT INTO `tags` VALUES (5,'jquery');
INSERT INTO `tags` VALUES (6,'user experience');
INSERT INTO `tags` VALUES (7,'prototype');
INSERT INTO `tags` VALUES (8,'ux');
INSERT INTO `tags` VALUES (9,'search');
INSERT INTO `tags` VALUES (10,'filter');
INSERT INTO `tags` VALUES (11,'yaml');
INSERT INTO `tags` VALUES (12,'configuration');
INSERT INTO `tags` VALUES (13,'convention');
INSERT INTO `tags` VALUES (14,'rhino');
INSERT INTO `tags` VALUES (15,'shell');
INSERT INTO `tags` VALUES (16,'activerecord');
INSERT INTO `tags` VALUES (17,'patch');
INSERT INTO `tags` VALUES (18,'bug');
INSERT INTO `tags` VALUES (19,'fix');
INSERT INTO `tags` VALUES (20,'private');
INSERT INTO `tags` VALUES (21,'collision');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `users` (
  `id` int(11) NOT NULL auto_increment,
  `login` varchar(40) default NULL,
  `email` varchar(100) default NULL,
  `crypted_password` varchar(40) default NULL,
  `salt` varchar(40) default NULL,
  `activation_code` varchar(40) default NULL,
  `activated_at` datetime default NULL,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `deleted_at` datetime default NULL,
  `token` varchar(255) default NULL,
  `token_expires_at` datetime default NULL,
  `filter` varchar(255) default 'textile_filter',
  `admin` tinyint(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Sam Goldstein','sgrock@gmail.com','6cb884089938772d892cb0ca45545a0866fec409','7e3041ebc2fc05a40c60028e2c4901a81035d3cd',NULL,'2009-05-20 05:06:17','2009-05-20 05:06:17','2009-07-23 03:25:15',NULL,'3a5ff56fda913646bc849b5cfdf6724326af4e51','2009-08-06 03:25:15','textile_filter',1);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2009-07-25 10:59:28
