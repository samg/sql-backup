-- MySQL dump 10.11
--
-- Host: localhost    Database: drastic
-- ------------------------------------------------------
-- Server version	5.0.75-0ubuntu10.5

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `assets`
--

DROP TABLE IF EXISTS `assets`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assets` (
  `id` int(11) NOT NULL auto_increment,
  `content_type` varchar(255) default NULL,
  `filename` varchar(255) default NULL,
  `size` int(11) default NULL,
  `parent_id` int(11) default NULL,
  `thumbnail` varchar(255) default NULL,
  `width` int(11) default NULL,
  `height` int(11) default NULL,
  `site_id` int(11) default NULL,
  `created_at` datetime default NULL,
  `title` varchar(255) default NULL,
  `thumbnails_count` int(11) default '0',
  `user_id` int(11) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assets`
--

LOCK TABLES `assets` WRITE;
/*!40000 ALTER TABLE `assets` DISABLE KEYS */;
INSERT INTO `assets` VALUES (2,'image/jpeg','IMG_1591.JPG',1208070,NULL,NULL,NULL,NULL,1,'2009-08-26 02:04:22',NULL,0,NULL);
/*!40000 ALTER TABLE `assets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `assigned_assets`
--

DROP TABLE IF EXISTS `assigned_assets`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assigned_assets` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `asset_id` int(11) default NULL,
  `position` int(11) default NULL,
  `label` varchar(255) default NULL,
  `created_at` datetime default NULL,
  `active` tinyint(1) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assigned_assets`
--

LOCK TABLES `assigned_assets` WRITE;
/*!40000 ALTER TABLE `assigned_assets` DISABLE KEYS */;
INSERT INTO `assigned_assets` VALUES (1,18,2,1,NULL,'2009-08-26 02:05:24',1);
/*!40000 ALTER TABLE `assigned_assets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `assigned_sections`
--

DROP TABLE IF EXISTS `assigned_sections`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `assigned_sections` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `section_id` int(11) default NULL,
  `position` int(11) default '1',
  PRIMARY KEY  (`id`),
  KEY `idx_a_sections_article_section` (`article_id`,`section_id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `assigned_sections`
--

LOCK TABLES `assigned_sections` WRITE;
/*!40000 ALTER TABLE `assigned_sections` DISABLE KEYS */;
INSERT INTO `assigned_sections` VALUES (2,2,1,1);
INSERT INTO `assigned_sections` VALUES (3,3,1,2);
INSERT INTO `assigned_sections` VALUES (4,4,1,3);
INSERT INTO `assigned_sections` VALUES (5,5,1,4);
INSERT INTO `assigned_sections` VALUES (6,6,1,5);
INSERT INTO `assigned_sections` VALUES (7,8,1,6);
INSERT INTO `assigned_sections` VALUES (8,9,1,7);
INSERT INTO `assigned_sections` VALUES (9,10,1,8);
INSERT INTO `assigned_sections` VALUES (10,11,1,9);
INSERT INTO `assigned_sections` VALUES (11,13,1,10);
INSERT INTO `assigned_sections` VALUES (13,18,1,11);
INSERT INTO `assigned_sections` VALUES (14,19,1,12);
INSERT INTO `assigned_sections` VALUES (15,20,1,13);
INSERT INTO `assigned_sections` VALUES (16,21,1,14);
INSERT INTO `assigned_sections` VALUES (17,22,1,15);
INSERT INTO `assigned_sections` VALUES (18,23,1,16);
INSERT INTO `assigned_sections` VALUES (19,33,1,17);
INSERT INTO `assigned_sections` VALUES (20,34,1,18);
INSERT INTO `assigned_sections` VALUES (21,35,1,19);
INSERT INTO `assigned_sections` VALUES (22,36,1,20);
INSERT INTO `assigned_sections` VALUES (23,39,1,21);
INSERT INTO `assigned_sections` VALUES (24,40,1,22);
INSERT INTO `assigned_sections` VALUES (25,41,1,23);
INSERT INTO `assigned_sections` VALUES (26,42,1,24);
/*!40000 ALTER TABLE `assigned_sections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cached_pages`
--

DROP TABLE IF EXISTS `cached_pages`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `cached_pages` (
  `id` int(11) NOT NULL auto_increment,
  `url` varchar(255) default NULL,
  `references` text,
  `updated_at` datetime default NULL,
  `site_id` int(11) default NULL,
  `cleared_at` datetime default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=206 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `cached_pages`
--

LOCK TABLES `cached_pages` WRITE;
/*!40000 ALTER TABLE `cached_pages` DISABLE KEYS */;
INSERT INTO `cached_pages` VALUES (1,'/','[42:Article][1:Site][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article][1:Section]','2011-04-06 16:16:42',1,NULL);
INSERT INTO `cached_pages` VALUES (2,'/stylesheets/main.css','','2009-05-20 05:14:03',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (3,'/images/bg.png','','2009-05-20 05:14:03',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (4,'/stylesheets/text.css','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (5,'/stylesheets/reset.css','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (6,'/stylesheets/960.css','','2011-04-06 17:05:13',1,NULL);
INSERT INTO `cached_pages` VALUES (7,'/javascripts/code_highlighter.js','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (8,'/stylesheets/drastic.css','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (9,'/javascripts/ruby.js','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (10,'/javascripts/javascript.js','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (11,'/javascripts/jquery.js','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (12,'/javascripts/application.js','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (13,'/2009/5/20/a-smart-pluralizing-helper-for-rails','[2:Article][1:Site][1:User]','2009-05-20 08:20:00',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (14,'/tags/gist','[21:Article][1:Site][3:Article][4:Article][2:Article][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][41:Article][40:Article][13:Article][6:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 21:17:14',1,NULL);
INSERT INTO `cached_pages` VALUES (15,'/tags/rails','[36:Article][1:Site][18:Article][13:Article][9:Article][5:Article][3:Article][2:Article][20:Article][42:Article][34:Article][11:Article][22:Article][23:Article][21:Article][41:Article][40:Article][6:Article][4:Article][39:Article][8:Article][35:Article][10:Article]','2011-04-06 21:39:18',1,NULL);
INSERT INTO `cached_pages` VALUES (16,'/tags/ruby','[41:Article][1:Site][40:Article][39:Article][36:Article][13:Article][9:Article][5:Article][2:Article][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][21:Article][6:Article][4:Article][3:Article][8:Article][35:Article][10:Article]','2011-04-07 17:39:23',1,NULL);
INSERT INTO `cached_pages` VALUES (17,'/feed/atom.xml','[1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article]','2011-04-06 17:05:13',1,NULL);
INSERT INTO `cached_pages` VALUES (18,'/archives/2009/5','[3:Article][1:Site][4:Article][2:Article][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article]','2011-04-07 13:46:23',1,NULL);
INSERT INTO `cached_pages` VALUES (19,'/stylesheets/ie.css','','2011-04-06 18:54:16',1,NULL);
INSERT INTO `cached_pages` VALUES (20,'/2009/5/26/resizing-textareas-as-you-type-with-jquery','[4:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 19:38:36',1,NULL);
INSERT INTO `cached_pages` VALUES (21,'/tags/user%20experience','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-25 04:39:07',1,NULL);
INSERT INTO `cached_pages` VALUES (22,'/tags/jquery','[6:Article][1:Site][4:Article][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 23:43:25',1,NULL);
INSERT INTO `cached_pages` VALUES (23,'/2009/5/19/a-smart-pluralizing-helper-for-rails','[2:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 19:29:17',1,NULL);
INSERT INTO `cached_pages` VALUES (24,'/tags/javascript','[21:Article][1:Site][8:Article][6:Article][3:Article][4:Article][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][41:Article][40:Article][13:Article][2:Article][39:Article][35:Article][36:Article][10:Article]','2011-04-07 06:11:20',1,NULL);
INSERT INTO `cached_pages` VALUES (25,'/2009/5/27/resizing-textareas-as-you-type-with-prototype','[3:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 19:54:01',1,NULL);
INSERT INTO `cached_pages` VALUES (26,'/tags/prototype','[3:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 05:23:41',1,NULL);
INSERT INTO `cached_pages` VALUES (27,'/tags/ux','[6:Article][1:Site][3:Article][4:Article][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 08:57:15',1,NULL);
INSERT INTO `cached_pages` VALUES (28,'/archives/2009/6','[8:Article][1:Site][6:Article][5:Article][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][3:Article][4:Article][2:Article]','2011-04-07 06:43:53',1,NULL);
INSERT INTO `cached_pages` VALUES (29,'/2009/6/10/how-to-load-a-yaml-config-object','[5:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 18:00:42',1,NULL);
INSERT INTO `cached_pages` VALUES (30,'/tags/filter','[6:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 00:03:57',1,NULL);
INSERT INTO `cached_pages` VALUES (31,'/tags/search','[36:Article][1:Site][20:Article][6:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][10:Article]','2011-04-07 00:35:18',1,NULL);
INSERT INTO `cached_pages` VALUES (32,'/2009/6/17/instant-search-in-pure-javascript-almost-instantly','[6:Article][1:Site][1:User][7:Comment][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 17:10:31',1,NULL);
INSERT INTO `cached_pages` VALUES (33,'/tags/convention','[5:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:30',1,NULL);
INSERT INTO `cached_pages` VALUES (34,'/tags/configuration','[5:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:29',1,NULL);
INSERT INTO `cached_pages` VALUES (35,'/tags/yaml','[5:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 17:49:25',1,NULL);
INSERT INTO `cached_pages` VALUES (36,'/javascripts/bash.js','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (37,'/2009/6/26/setting-up-an-interactive-javascript-console','[8:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][35:Article][36:Article][10:Article]','2011-04-06 17:46:40',1,NULL);
INSERT INTO `cached_pages` VALUES (38,'/tags/shell','[8:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][35:Article][36:Article][10:Article]','2011-04-06 20:19:27',1,NULL);
INSERT INTO `cached_pages` VALUES (39,'/tags/rhino','[8:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][35:Article][36:Article][10:Article]','2011-04-06 19:30:53',1,NULL);
INSERT INTO `cached_pages` VALUES (40,'/archives/2009/7','[10:Article][1:Site][9:Article][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-07 17:38:16',1,NULL);
INSERT INTO `cached_pages` VALUES (41,'/2009/7/10/make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','[9:Article][1:Site][1:User][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 17:05:11',1,NULL);
INSERT INTO `cached_pages` VALUES (42,'/tags/private','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 19:58:20',1,NULL);
INSERT INTO `cached_pages` VALUES (43,'/tags/fix','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:34',1,NULL);
INSERT INTO `cached_pages` VALUES (44,'/tags/bug','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 23:28:04',1,NULL);
INSERT INTO `cached_pages` VALUES (45,'/tags/patch','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 18:46:14',1,NULL);
INSERT INTO `cached_pages` VALUES (46,'/tags/collision','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 01:57:36',1,NULL);
INSERT INTO `cached_pages` VALUES (47,'/tags/activerecord','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 19:05:29',1,NULL);
INSERT INTO `cached_pages` VALUES (48,'/2009/7/19/timetrap-simple-command-line-time-tracking-with-ruby','[10:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article]','2011-04-07 11:25:34',1,NULL);
INSERT INTO `cached_pages` VALUES (49,'/feed','[1:Section][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2009-07-19 06:33:41',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (50,'/feed/rss.xml','[1:Section][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2009-07-19 06:34:11',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (51,'/tags','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-05-01 10:17:26',1,NULL);
INSERT INTO `cached_pages` VALUES (52,'/archives/2009','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-05-03 14:52:52',1,NULL);
INSERT INTO `cached_pages` VALUES (53,'/2009/8/1/my-favorite-bash-substitution-tricks','[11:Article][1:Site][1:User][12:Comment][14:Comment][20:Article][9:Article][42:Article][34:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 10:39:02',1,NULL);
INSERT INTO `cached_pages` VALUES (54,'/tags/bash','[42:Article][1:Site][34:Article][20:Article][11:Article][9:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 00:16:55',1,NULL);
INSERT INTO `cached_pages` VALUES (55,'/tags/command-line','[11:Article][1:Site][20:Article][9:Article][42:Article][34:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:27',1,NULL);
INSERT INTO `cached_pages` VALUES (56,'/tags/tips','[11:Article][1:Site][20:Article][9:Article][42:Article][34:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 17:32:48',1,NULL);
INSERT INTO `cached_pages` VALUES (57,'/2009/8/3/writing-domain-specific-languages-dsls-with-ruby','[13:Article][1:Site][1:User][15:Comment][16:Comment][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 01:22:54',1,NULL);
INSERT INTO `cached_pages` VALUES (58,'/tags/dsl','[13:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:32',1,NULL);
INSERT INTO `cached_pages` VALUES (59,'/archives/2009/8','[18:Article][1:Site][13:Article][11:Article][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 17:58:08',1,NULL);
INSERT INTO `cached_pages` VALUES (60,'/tags/search/project/downloading.php','[6:Article][1:Site][9:Article][11:Article][5:Article][13:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2009-08-17 21:18:18',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (61,'/tags/project/downloading.php','[1:Site][9:Article][11:Article][5:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2009-08-17 21:18:19',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (62,'/javascripts/vim.js','','2011-04-06 17:05:14',1,NULL);
INSERT INTO `cached_pages` VALUES (63,'/2009/8/27/how-to-run-rspec-specs-from-vim','[18:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 19:58:41',1,NULL);
INSERT INTO `cached_pages` VALUES (64,'/tags/bdd','[22:Article][1:Site][18:Article][20:Article][9:Article][42:Article][34:Article][11:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:25',1,NULL);
INSERT INTO `cached_pages` VALUES (65,'/tags/vim','[22:Article][1:Site][18:Article][20:Article][9:Article][42:Article][34:Article][11:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 07:24:35',1,NULL);
INSERT INTO `cached_pages` VALUES (66,'/tags/tdd','[22:Article][1:Site][18:Article][20:Article][9:Article][42:Article][34:Article][11:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 22:13:28',1,NULL);
INSERT INTO `cached_pages` VALUES (67,'/tags/rspec','[18:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 16:33:36',1,NULL);
INSERT INTO `cached_pages` VALUES (68,'/2009/9/9/ack-the-fast-code-search-tool','[20:Article][1:Site][1:User][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-08 12:17:05',1,NULL);
INSERT INTO `cached_pages` VALUES (69,'/tags/ack','[20:Article][1:Site][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:24',1,NULL);
INSERT INTO `cached_pages` VALUES (70,'/tags/grep','[20:Article][1:Site][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 18:15:45',1,NULL);
INSERT INTO `cached_pages` VALUES (71,'/tags/perl','[20:Article][1:Site][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 17:39:40',1,NULL);
INSERT INTO `cached_pages` VALUES (72,'/tags/tools','[20:Article][1:Site][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 19:58:21',1,NULL);
INSERT INTO `cached_pages` VALUES (73,'/archives/2009/9','[20:Article][1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 17:13:41',1,NULL);
INSERT INTO `cached_pages` VALUES (74,'/archives/2009/10','[21:Article][1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-07 17:39:46',1,NULL);
INSERT INTO `cached_pages` VALUES (75,'/tags/zefqxcpoonpczum.html','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-07-04 04:29:52',1,NULL);
INSERT INTO `cached_pages` VALUES (76,'/2009/10/11/roll-your-own-remember-me','[21:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 09:18:17',1,NULL);
INSERT INTO `cached_pages` VALUES (77,'/tags/cookies','[21:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 00:57:38',1,NULL);
INSERT INTO `cached_pages` VALUES (78,'/tags/fluid','[21:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 19:07:05',1,NULL);
INSERT INTO `cached_pages` VALUES (79,'/tags/emlfzjbeaqbtnerb.html','[1:Site][20:Article][9:Article][11:Article][18:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2009-10-20 22:04:09',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (80,'/tags/qpxdnujqt.html','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-06-20 14:09:44',1,NULL);
INSERT INTO `cached_pages` VALUES (81,'/tags/gleykqqhtvna.html','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-03-10 19:45:32',1,NULL);
INSERT INTO `cached_pages` VALUES (82,'/tags/jisflfgjju.html','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-03-10 21:41:36',1,NULL);
INSERT INTO `cached_pages` VALUES (83,'/tags/tsmsmkyolnbli.html','[1:Site][20:Article][9:Article][11:Article][18:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2009-10-26 08:33:27',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (84,'/archives/2009/11','[22:Article][1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 18:40:22',1,NULL);
INSERT INTO `cached_pages` VALUES (85,'/2009/11/28/how-to-run-one-test-unit-test-case-from-vim','[22:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 11:05:39',1,NULL);
INSERT INTO `cached_pages` VALUES (86,'/tags/testing','[22:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 16:59:29',1,NULL);
INSERT INTO `cached_pages` VALUES (87,'/archives/2009/12','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 18:51:26',1,NULL);
INSERT INTO `cached_pages` VALUES (88,'/archives','[1:Site][1:Section][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2009-12-06 20:17:25',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (89,'/tags/2009/5/26/resizing-textareas-as-you-type-with-jquery','[1:Site][20:Article][9:Article][11:Article][22:Article][18:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2010-03-01 15:29:46',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (90,'/tags/tags/patch','[9:Article][1:Site][20:Article][11:Article][22:Article][18:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2010-03-01 15:29:47',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (91,'/tags/tags/bash','[20:Article][1:Site][11:Article][9:Article][22:Article][18:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2010-03-01 15:29:47',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (92,'/tags/ack/%22','[20:Article][1:Site][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:43',1,NULL);
INSERT INTO `cached_pages` VALUES (93,'/tags/activerecord/%22','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:45',1,NULL);
INSERT INTO `cached_pages` VALUES (94,'/tags/bash/%22','[42:Article][1:Site][34:Article][20:Article][11:Article][9:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:47',1,NULL);
INSERT INTO `cached_pages` VALUES (95,'/tags/bdd/%22','[22:Article][1:Site][18:Article][20:Article][9:Article][42:Article][34:Article][11:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:51',1,NULL);
INSERT INTO `cached_pages` VALUES (96,'/tags/bug/%22','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:53',1,NULL);
INSERT INTO `cached_pages` VALUES (97,'/archives/2010/4','[23:Article][1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-07 00:57:31',1,NULL);
INSERT INTO `cached_pages` VALUES (98,'/archives/2010/1','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-07 17:38:36',1,NULL);
INSERT INTO `cached_pages` VALUES (99,'/archives/2010/3','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 23:57:24',1,NULL);
INSERT INTO `cached_pages` VALUES (100,'/archives/2010/2','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-07 15:36:16',1,NULL);
INSERT INTO `cached_pages` VALUES (101,'/tags/commandline','[23:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 20:05:41',1,NULL);
INSERT INTO `cached_pages` VALUES (102,'/tags/gnu%20screen','[23:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:39',1,NULL);
INSERT INTO `cached_pages` VALUES (103,'/tags/mail%20command','[23:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 22:45:49',1,NULL);
INSERT INTO `cached_pages` VALUES (104,'/2010/4/21/poor-man-s-notification-system','[23:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 05:41:05',1,NULL);
INSERT INTO `cached_pages` VALUES (105,'/tags/bdd%20%20','[22:Article][1:Site][18:Article][20:Article][9:Article][11:Article][23:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2010-04-24 17:35:50',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (106,'/archives/2010/5','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 17:46:55',1,NULL);
INSERT INTO `cached_pages` VALUES (107,'/tags/gnu','[1:Site][20:Article][9:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2010-05-23 16:08:02',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (108,'/tags/mail','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-08-21 15:54:31',1,NULL);
INSERT INTO `cached_pages` VALUES (109,'/archives/2010/6','[34:Article][1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 16:31:59',1,NULL);
INSERT INTO `cached_pages` VALUES (110,'/2010/6/26/wiff-me-a-website-differ','[34:Article][1:Site][1:User][20:Article][9:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][10:Article]','2010-06-26 06:21:04',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (111,'/tags/nopoconi','[34:Article][1:Site][20:Article][9:Article][42:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 04:50:18',1,NULL);
INSERT INTO `cached_pages` VALUES (112,'/2010/6/26/wiff-me-a-webpage-differ','[34:Article][1:Site][1:User][20:Article][9:Article][42:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 18:04:32',1,NULL);
INSERT INTO `cached_pages` VALUES (113,'/tags/diff','[41:Article][1:Site][40:Article][34:Article][20:Article][9:Article][42:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 16:21:16',1,NULL);
INSERT INTO `cached_pages` VALUES (114,'/tags/wiff','[34:Article][1:Site][20:Article][9:Article][42:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 16:50:11',1,NULL);
INSERT INTO `cached_pages` VALUES (115,'/archives/2010/7','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 17:35:18',1,NULL);
INSERT INTO `cached_pages` VALUES (116,'/2010/9/15/setting-up-a-macbook-to-dual-boot-into-ubuntu-and-os-x','[35:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][36:Article][10:Article]','2011-04-06 23:57:11',1,NULL);
INSERT INTO `cached_pages` VALUES (117,'/tags/dual%20boot','[35:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][36:Article][10:Article]','2011-04-06 16:50:30',1,NULL);
INSERT INTO `cached_pages` VALUES (118,'/tags/linux','[35:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][36:Article][10:Article]','2011-04-06 17:23:29',1,NULL);
INSERT INTO `cached_pages` VALUES (119,'/tags/ubuntu','[35:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][36:Article][10:Article]','2011-04-06 22:23:49',1,NULL);
INSERT INTO `cached_pages` VALUES (120,'/archives/2010/9','[35:Article][1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-08 12:37:05',1,NULL);
INSERT INTO `cached_pages` VALUES (121,'/archives/2010/8','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 16:57:03',1,NULL);
INSERT INTO `cached_pages` VALUES (122,'/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx','[36:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][10:Article]','2011-04-07 13:06:59',1,NULL);
INSERT INTO `cached_pages` VALUES (123,'/tags/scaling','[36:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][10:Article]','2011-04-07 01:53:37',1,NULL);
INSERT INTO `cached_pages` VALUES (124,'/tags/sphinx','[39:Article][1:Site][36:Article][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][35:Article][10:Article]','2011-04-06 22:41:25',1,NULL);
INSERT INTO `cached_pages` VALUES (125,'/archives/2010/10','[36:Article][1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 18:15:44',1,NULL);
INSERT INTO `cached_pages` VALUES (126,'/archives/2010/11','[40:Article][1:Site][39:Article][1:Section][42:Article][41:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 18:09:39',1,NULL);
INSERT INTO `cached_pages` VALUES (127,'/2010/11/10/adding-failover-and-load-balancing-to-thinking-sphinx','[39:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 23:35:21',1,NULL);
INSERT INTO `cached_pages` VALUES (128,'/tags/github','[39:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 23:06:00',1,NULL);
INSERT INTO `cached_pages` VALUES (129,'/2010/11/26/the-easiest-way-to-diff-two-strings-in-ruby','[40:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 20:15:18',1,NULL);
INSERT INTO `cached_pages` VALUES (130,'/tags/gem','[41:Article][1:Site][40:Article][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 02:15:37',1,NULL);
INSERT INTO `cached_pages` VALUES (131,'/archives/2010/12','[41:Article][1:Site][1:Section][42:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 18:05:40',1,NULL);
INSERT INTO `cached_pages` VALUES (132,'/2010/12/9/making-diffy-a-little-less-creative','[41:Article][1:Site][1:User][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-07 08:40:15',1,NULL);
INSERT INTO `cached_pages` VALUES (133,'/tags/diffy','[41:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 21:58:31',1,NULL);
INSERT INTO `cached_pages` VALUES (134,'/tags/collision/%22','[9:Article][1:Site][20:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:54',1,NULL);
INSERT INTO `cached_pages` VALUES (135,'/tags/command-line/%22','[11:Article][1:Site][20:Article][9:Article][42:Article][34:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:56',1,NULL);
INSERT INTO `cached_pages` VALUES (136,'/tags/commandline/%22','[23:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:58',1,NULL);
INSERT INTO `cached_pages` VALUES (137,'/tags/configuration/%22','[5:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:37:59',1,NULL);
INSERT INTO `cached_pages` VALUES (138,'/tags/convention/%22','[5:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:38:01',1,NULL);
INSERT INTO `cached_pages` VALUES (139,'/tags/cookies/%22','[21:Article][1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-15 19:38:02',1,NULL);
INSERT INTO `cached_pages` VALUES (140,'/tags/diff/%22','[41:Article][1:Site][40:Article][34:Article][20:Article][9:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-02-23 04:54:27',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (141,'/tags/diffy/%22','[41:Article][1:Site][20:Article][9:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-02-23 04:54:29',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (142,'/tags/dsl/%22','[13:Article][1:Site][20:Article][9:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-02-23 04:54:31',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (143,'/tags/dual%20boot/%22','[35:Article][1:Site][20:Article][9:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][36:Article][10:Article]','2011-02-23 04:54:33',1,'2011-04-06 16:16:35');
INSERT INTO `cached_pages` VALUES (144,'/tags/productivity','[42:Article][1:Site][20:Article][9:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 16:35:03',1,NULL);
INSERT INTO `cached_pages` VALUES (145,'/archives/2011/3','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 16:35:19',1,NULL);
INSERT INTO `cached_pages` VALUES (146,'/tags/ssh','[42:Article][1:Site][20:Article][9:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 16:35:20',1,NULL);
INSERT INTO `cached_pages` VALUES (147,'/archives/2011/4','[42:Article][1:Site][1:Section][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 16:35:21',1,NULL);
INSERT INTO `cached_pages` VALUES (148,'/2011/4/6/pwdeath-ssh-keys-for-everyone','[42:Article][1:Site][1:User][20:Article][9:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-04-06 16:35:22',1,NULL);
INSERT INTO `cached_pages` VALUES (149,'/archives/2011/2','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 16:35:26',1,NULL);
INSERT INTO `cached_pages` VALUES (150,'/archives/2011/1','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-04-06 16:35:49',1,NULL);
INSERT INTO `cached_pages` VALUES (151,'/archives/2011/5','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-05-21 11:16:12',1,NULL);
INSERT INTO `cached_pages` VALUES (152,'/tags/javascript%22%20target=%22_blank','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-07-13 16:11:34',1,NULL);
INSERT INTO `cached_pages` VALUES (153,'/tags/ux%22%20target=%22_blank','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-07-13 16:12:22',1,NULL);
INSERT INTO `cached_pages` VALUES (154,'/tags/rubyindex.php','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-07-20 15:43:30',1,NULL);
INSERT INTO `cached_pages` VALUES (155,'/tags/sshindex.php','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-09-08 23:14:21',1,NULL);
INSERT INTO `cached_pages` VALUES (156,'/tags/diffindex.php','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-09-14 02:33:54',1,NULL);
INSERT INTO `cached_pages` VALUES (157,'/tags/sphinxindex.php','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-09-18 23:09:10',1,NULL);
INSERT INTO `cached_pages` VALUES (158,'/archives/2011/7','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-10-18 20:48:09',1,NULL);
INSERT INTO `cached_pages` VALUES (159,'/archives/2011/8','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-10-18 21:45:08',1,NULL);
INSERT INTO `cached_pages` VALUES (160,'/archives/2011/6','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-10-18 21:49:02',1,NULL);
INSERT INTO `cached_pages` VALUES (161,'/archives/2011/9','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-10-18 21:52:52',1,NULL);
INSERT INTO `cached_pages` VALUES (162,'/archives/2011/10','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-10-18 22:00:34',1,NULL);
INSERT INTO `cached_pages` VALUES (163,'/archives/2011/11','[1:Site][1:Section][42:Article][41:Article][40:Article][39:Article][36:Article][35:Article][34:Article][23:Article][22:Article][21:Article][20:Article][18:Article][13:Article][11:Article][10:Article][9:Article][8:Article][6:Article][5:Article][3:Article][4:Article][2:Article]','2011-11-05 19:53:40',1,NULL);
INSERT INTO `cached_pages` VALUES (164,'/tags/light','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-12-29 23:23:52',1,NULL);
INSERT INTO `cached_pages` VALUES (165,'/tags/dark','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2011-12-29 23:23:53',1,NULL);
INSERT INTO `cached_pages` VALUES (166,'/tags/search371','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-04-27 20:18:35',1,NULL);
INSERT INTO `cached_pages` VALUES (167,'/tags/ux581','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-04-28 12:51:12',1,NULL);
INSERT INTO `cached_pages` VALUES (168,'/tags/cookies851','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-04-29 05:24:00',1,NULL);
INSERT INTO `cached_pages` VALUES (169,'/tags/tools561','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-04-29 13:40:47',1,NULL);
INSERT INTO `cached_pages` VALUES (170,'/tags/patch201','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-04-29 13:40:48',1,NULL);
INSERT INTO `cached_pages` VALUES (171,'/tags/configuration631','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-03 18:15:35',1,NULL);
INSERT INTO `cached_pages` VALUES (172,'/tags/perl841','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-04 00:50:14',1,NULL);
INSERT INTO `cached_pages` VALUES (173,'/tags/activerecord701','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-04 03:15:16',1,NULL);
INSERT INTO `cached_pages` VALUES (174,'/tags/ssh521','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-05 20:47:35',1,NULL);
INSERT INTO `cached_pages` VALUES (175,'/tags/pnkpussy/s:relevance/m:1-3min/d:month','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 02:59:19',1,NULL);
INSERT INTO `cached_pages` VALUES (176,'/tags/gradient','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 03:21:34',1,NULL);
INSERT INTO `cached_pages` VALUES (177,'/tags/traffic','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 03:21:35',1,NULL);
INSERT INTO `cached_pages` VALUES (178,'/tags/plant','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 03:21:37',1,NULL);
INSERT INTO `cached_pages` VALUES (179,'/tags/development/reporting','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 06:42:47',1,NULL);
INSERT INTO `cached_pages` VALUES (180,'/tags/esperanto/speech','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 06:42:52',1,NULL);
INSERT INTO `cached_pages` VALUES (181,'/tags/secret','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 21:01:48',1,NULL);
INSERT INTO `cached_pages` VALUES (182,'/tags/hopscotch','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 21:01:48',1,NULL);
INSERT INTO `cached_pages` VALUES (183,'/tags/sol/1','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 21:01:49',1,NULL);
INSERT INTO `cached_pages` VALUES (184,'/tags/yubnub','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 21:08:48',1,NULL);
INSERT INTO `cached_pages` VALUES (185,'/tags/scenarios','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 21:08:49',1,NULL);
INSERT INTO `cached_pages` VALUES (186,'/tags/integration','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 21:08:50',1,NULL);
INSERT INTO `cached_pages` VALUES (187,'/tags/deployment','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-05-10 21:08:51',1,NULL);
INSERT INTO `cached_pages` VALUES (188,'/tags/blog','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-08 16:28:43',1,NULL);
INSERT INTO `cached_pages` VALUES (189,'/tags/devfu','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-08 16:28:53',1,NULL);
INSERT INTO `cached_pages` VALUES (190,'/tags/metaprogramming','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-08 16:28:56',1,NULL);
INSERT INTO `cached_pages` VALUES (191,'/tags/web','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-08 16:28:58',1,NULL);
INSERT INTO `cached_pages` VALUES (192,'/tags/force/s:uploaddate/m:1-3min/d:all','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-08 20:41:44',1,NULL);
INSERT INTO `cached_pages` VALUES (193,'/tags/april','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-08 21:31:48',1,NULL);
INSERT INTO `cached_pages` VALUES (194,'/tags/produce','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-08 21:31:49',1,NULL);
INSERT INTO `cached_pages` VALUES (195,'/tags/lian/1','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-08 21:31:54',1,NULL);
INSERT INTO `cached_pages` VALUES (196,'/tags/rochambeau','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 01:07:47',1,NULL);
INSERT INTO `cached_pages` VALUES (197,'/tags/paul','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 01:07:48',1,NULL);
INSERT INTO `cached_pages` VALUES (198,'/tags/nup','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 01:07:49',1,NULL);
INSERT INTO `cached_pages` VALUES (199,'/tags/ecuador/s:relevance/m:10min_more/d:all','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 04:08:33',1,NULL);
INSERT INTO `cached_pages` VALUES (200,'/tags/strange','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 10:22:15',1,NULL);
INSERT INTO `cached_pages` VALUES (201,'/tags/table','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 10:22:16',1,NULL);
INSERT INTO `cached_pages` VALUES (202,'/tags/water','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 10:22:22',1,NULL);
INSERT INTO `cached_pages` VALUES (203,'/tags/poisson','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 10:22:23',1,NULL);
INSERT INTO `cached_pages` VALUES (204,'/tags/design','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 10:22:24',1,NULL);
INSERT INTO `cached_pages` VALUES (205,'/tags/outline','[1:Site][20:Article][9:Article][42:Article][34:Article][11:Article][22:Article][18:Article][23:Article][5:Article][21:Article][41:Article][40:Article][13:Article][6:Article][4:Article][3:Article][2:Article][39:Article][8:Article][35:Article][36:Article][10:Article]','2012-07-09 10:22:25',1,NULL);
/*!40000 ALTER TABLE `cached_pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `content_versions`
--

DROP TABLE IF EXISTS `content_versions`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `content_versions` (
  `id` int(11) NOT NULL auto_increment,
  `content_id` int(11) default NULL,
  `version` int(11) default NULL,
  `article_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `title` varchar(255) default NULL,
  `permalink` varchar(255) default NULL,
  `excerpt` text,
  `body` text,
  `excerpt_html` text,
  `body_html` text,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `published_at` datetime default NULL,
  `author` varchar(100) default NULL,
  `author_url` varchar(255) default NULL,
  `author_email` varchar(255) default NULL,
  `author_ip` varchar(100) default NULL,
  `comments_count` int(11) default '0',
  `updater_id` int(11) default NULL,
  `versioned_type` varchar(20) default NULL,
  `site_id` int(11) default NULL,
  `approved` tinyint(1) default '0',
  `comment_age` int(11) default '0',
  `filter` varchar(255) default NULL,
  `user_agent` varchar(255) default NULL,
  `referrer` varchar(255) default NULL,
  `assets_count` int(11) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=204 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `content_versions`
--

LOCK TABLES `content_versions` WRITE;
/*!40000 ALTER TABLE `content_versions` DISABLE KEYS */;
INSERT INTO `content_versions` VALUES (3,NULL,2,2,1,'A smart pluralizing helper for rails.','a-smart-pluralizing-helper-for-rails','','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Since Ruby lets you add methods to any class we just reopen <code>String</code> and add a <code>smart_pluralize</code> method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-05-20 06:59:24','2009-05-20 06:59:24','2009-05-20 05:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (4,NULL,3,2,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Since Ruby lets you add methods to any class we just reopen <code>String</code> and add a <code>smart_pluralize</code> method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-05-20 08:11:59','2009-05-20 08:11:59','2009-05-20 05:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (5,NULL,4,2,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Now here&#8217;s the fun part.  Having this method take <code>self</code> (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-05-20 08:16:54','2009-05-20 08:16:54','2009-05-20 05:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (24,NULL,17,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">function scaleTextareas() {\n  var textareaWidth = 65;\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/textareaWidth) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-05-26 21:34:05','2009-05-26 21:34:05',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (28,NULL,18,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">function scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-05-28 07:31:34','2009-05-28 07:31:34','2009-05-26 21:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (29,NULL,6,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(textareaWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">function scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(textareaWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-05-28 07:32:37','2009-05-28 07:32:37','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (30,NULL,7,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires Prototype\r\n*/\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(textareaWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n* Scale all textareas dynamically on the page\n* Requires Prototype\n*/\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(textareaWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-05-28 07:34:25','2009-05-28 07:34:25','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (31,NULL,8,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(t.offsetWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-05-28 07:39:03','2009-05-28 07:39:03','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (32,NULL,19,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-05-28 07:45:05','2009-05-28 07:45:05','2009-05-26 21:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (33,NULL,20,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires jQuery\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires jQuery\n */\nfunction scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-06-01 20:33:42','2009-06-01 20:33:42','2009-05-26 21:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (34,NULL,9,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nIts tested in Firefox, Safari, IE6 and IE7.\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(t.offsetWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Its tested in Firefox, Safari, <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span>.</p>\n\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-06-02 05:38:10','2009-06-02 05:38:10','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (35,NULL,1,5,1,'How to load a Yaml config object','how-to-load-a-yaml-config-object','','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"Yaml\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.\r\n\r\n<pre><code class=\"ruby\">\r\nclass MyClass\r\n  def self.config_file\r\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\r\n  end \r\n\r\n  def self.config\r\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\r\n  end \r\n\r\n  def config\r\n    self.class.config\r\n  end \r\nend\r\n</code></pre>\r\n\r\nNow you can do things like this in your instance and class methods:\r\n\r\n<pre><code class=\"ruby\">\r\ndef where_am_i\r\n  config[:host]\r\nend\r\n</code></pre>\r\n\r\nThe yaml file would look like this:\r\n\r\n<pre><code class=\"yaml\">\r\ndevelopment:\r\n  host: localhost\r\ntest:\r\n  host: test.host\r\nproduction:\r\n  host: your_production_host.com\r\n</code></pre>','','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\">Yaml</a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>\n\n\n<pre><code class=\"ruby\">\nclass MyClass\n  def self.config_file\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\n  end \n\n  def self.config\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\n  end \n\n  def config\n    self.class.config\n  end \nend\n</code></pre>\n\n	<p>Now you can do things like this in your instance and class methods:</p>\n\n\n<pre><code class=\"ruby\">\ndef where_am_i\n  config[:host]\nend\n</code></pre>\n\n	<p>The yaml file would look like this:</p>\n\n\n<pre><code class=\"yaml\">\ndevelopment:\n  host: localhost\ntest:\n  host: test.host\nproduction:\n  host: your_production_host.com\n</code></pre>','2009-06-10 17:13:51','2009-06-10 17:13:51',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (41,NULL,6,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like _a.*z_ will work just fine.\r\n','','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>Here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a></p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <em>a.*z</em> will work just fine.</p>','2009-06-17 23:01:23','2009-06-17 23:01:23',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (42,NULL,7,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.\r\n','','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>Here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a></p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.</p>','2009-06-17 23:02:44','2009-06-17 23:02:44',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (43,NULL,8,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>Here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a></p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.  It wouldn&#8217;t be hard to enhance this to split keywords in the query apart, so <code>Bachelor Mount</code> would match an item call <em>Mount Bachelor</em>.  If this appeals to you feel free to fork the <a href=\"http://gist.github.com/131085\">gist on github</a>.</p>','2009-06-17 23:05:28','2009-06-17 23:05:28',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (44,NULL,9,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.  It wouldn&#8217;t be hard to enhance this to split keywords in the query apart, so <code>Bachelor Mount</code> would match an item call <em>Mount Bachelor</em>.  If this appeals to you feel free to fork the <a href=\"http://gist.github.com/131085\">gist on github</a>.</p>','2009-06-17 23:08:43','2009-06-17 23:08:43',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (45,NULL,5,2,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Now here&#8217;s the fun part.  Having this method take <code>self</code> (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-06-19 16:20:40','2009-06-19 16:20:40','2009-05-19 20:58:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (52,NULL,7,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell there\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>Well there&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to get it up and running on <span class=\"caps\">OS X</span>, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put the following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 23:04:26','2009-06-26 23:04:26',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (53,NULL,8,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to get it up and running on <span class=\"caps\">OS X</span>, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put the following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 23:04:59','2009-06-26 23:04:59',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (54,NULL,9,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) as well with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put the following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 23:05:51','2009-06-26 23:05:51',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (60,NULL,6,9,1,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside of the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @#define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n    def method_missing(method_id, *args, &block)\r\n      method_name = method_id.to_s\r\n\r\n      if self.class.private_method_defined?(method_name)\r\n        raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n      end\r\n\r\n      # If we haven\'t generated any methods yet, generate them, then\r\n      # see if we\'ve created the method we\'re looking for.\r\n      if !self.class.generated_methods?\r\n        self.class.define_attribute_methods\r\n        if self.class.generated_methods.include?(method_name)\r\n          return self.send(method_id, *args, &block)\r\n        end\r\n      end\r\n\r\n      if self.class.primary_key.to_s == method_name\r\n        id\r\n      elsif md = self.class.match_attribute_method?(method_name)\r\n        attribute_name, method_type = md.pre_match, md.to_s\r\n        if @attributes.include?(attribute_name)\r\n          __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n        else\r\n          super\r\n        end\r\n      elsif @attributes.include?(method_name)\r\n        read_attribute(method_name)\r\n      else\r\n        super\r\n      end\r\n    end\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside of the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>#define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n    def method_missing(method_id, *args, &#38;block)\n      method_name = method_id.to_s\n\n      if self.class.private_method_defined?(method_name)\n        raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n      end\n\n      # If we haven\'t generated any methods yet, generate them, then\n      # see if we\'ve created the method we\'re looking for.\n      if !self.class.generated_methods?\n        self.class.define_attribute_methods\n        if self.class.generated_methods.include?(method_name)\n          return self.send(method_id, *args, &#38;block)\n        end\n      end\n\n      if self.class.primary_key.to_s == method_name\n        id\n      elsif md = self.class.match_attribute_method?(method_name)\n        attribute_name, method_type = md.pre_match, md.to_s\n        if @attributes.include?(attribute_name)\n          __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n        else\n          super\n        end\n      elsif @attributes.include?(method_name)\n        read_attribute(method_name)\n      else\n        super\n      end\n    end\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-10 00:32:15','2009-07-10 00:32:15',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (61,NULL,7,9,1,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them.  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @#define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them.  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>#define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-10 00:35:40','2009-07-10 00:35:40',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (63,NULL,8,9,1,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-18 23:45:27','2009-07-18 23:45:27','2009-07-10 00:38:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (64,NULL,10,8,1,'Setting up an Interactive Javascript Console','setting-up-an-interactive-javascript-console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put this following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put this following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-07-18 23:46:47','2009-07-18 23:46:47','2009-06-26 23:07:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (65,NULL,10,6,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.  It wouldn&#8217;t be hard to enhance this to split keywords in the query apart, so <code>Bachelor Mount</code> would match an item call <em>Mount Bachelor</em>.  If this appeals to you feel free to fork the <a href=\"http://gist.github.com/131085\">gist on github</a>.</p>','2009-07-18 23:47:22','2009-07-18 23:47:22','2009-06-17 23:09:00',NULL,NULL,NULL,NULL,1,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (66,NULL,2,5,1,'How to load a YAML config object','how-to-load-a-yaml-config-object','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.\r\n\r\n<pre><code class=\"ruby\">\r\nclass MyClass\r\n  def self.config_file\r\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\r\n  end \r\n\r\n  def self.config\r\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\r\n  end \r\n\r\n  def config\r\n    self.class.config\r\n  end \r\nend\r\n</code></pre>\r\n\r\nNow you can do things like this in your instance and class methods:\r\n\r\n<pre><code class=\"ruby\">\r\ndef where_am_i\r\n  config[:host]\r\nend\r\n</code></pre>\r\n\r\nThe YAML file would look like this:\r\n\r\n<pre><code class=\"yaml\">\r\ndevelopment:\r\n  host: localhost\r\ntest:\r\n  host: test.host\r\nproduction:\r\n  host: your_production_host.com\r\n</code></pre>','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\"><span class=\"caps\">YAML</span></a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\"><span class=\"caps\">YAML</span></a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>\n\n\n<pre><code class=\"ruby\">\nclass MyClass\n  def self.config_file\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\n  end \n\n  def self.config\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\n  end \n\n  def config\n    self.class.config\n  end \nend\n</code></pre>\n\n	<p>Now you can do things like this in your instance and class methods:</p>\n\n\n<pre><code class=\"ruby\">\ndef where_am_i\n  config[:host]\nend\n</code></pre>\n\n	<p>The <span class=\"caps\">YAML</span> file would look like this:</p>\n\n\n<pre><code class=\"yaml\">\ndevelopment:\n  host: localhost\ntest:\n  host: test.host\nproduction:\n  host: your_production_host.com\n</code></pre>','2009-07-18 23:48:11','2009-07-18 23:48:11','2009-06-10 17:13:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (67,NULL,21,4,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires jQuery\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires jQuery\n */\nfunction scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-07-18 23:48:53','2009-07-18 23:48:53','2009-05-26 21:34:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (68,NULL,6,2,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Now here&#8217;s the fun part.  Having this method take <code>self</code> (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-07-18 23:49:21','2009-07-18 23:49:21','2009-05-19 20:58:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (69,NULL,10,3,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nIts tested in Firefox, Safari, IE6 and IE7.\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(t.offsetWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Its tested in Firefox, Safari, <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span>.</p>\n\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-07-18 23:50:35','2009-07-18 23:50:35','2009-05-27 20:09:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (70,NULL,9,9,1,'Fix for \"random\" NoMethodError in Rails ActiveRecord ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-18 23:56:51','2009-07-18 23:56:51','2009-07-10 00:38:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (78,NULL,9,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of these commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of these commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months now, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:41:42','2009-07-19 05:41:42',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (79,NULL,10,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months now, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:41:59','2009-07-19 05:41:59',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (80,NULL,11,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:42:22','2009-07-19 05:42:22',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (81,NULL,12,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when _I find the time_ (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when <em>I find the time</em> (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:43:02','2009-07-19 05:43:02',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (82,NULL,13,10,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when _I find the time_ (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when <em>I find the time</em> (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-19 05:43:34','2009-07-19 05:43:34',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (83,NULL,10,9,1,'Fix for \"random\" NoMethodError in Rails\' ActiveRecord ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-19 05:46:44','2009-07-19 05:46:44','2009-07-10 00:38:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (84,NULL,1,11,1,'My Favorite Bash Substitution Tricks','my-favorite-bash-substitution-tricks','','Here\'s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the @bash@ shell uses to store various aspects of your history.\r\n\r\nh4. Repeating the last command with @!!@\r\n\r\nSometimes I run a command that requires @sudo@ access, but forget the @sudo@.  This is a great opportunity to use @!!@ which holds the last command you ran.\r\n\r\n<pre><code class=\"bash\">\r\n$ tail /var/log/mail.log\r\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\r\n$ sudo !!\r\nsudo tail /var/log/mail.log\r\n# output of command\r\n</code></pre>\r\n\r\nh4. The last argument of the last command using @!$@\r\n\r\nSometimes it\'s handy to be able to reference the last argument of your last command.  This can make certain operations safer, by preventing a fat fingered typo from deleting important files.\r\n\r\n<pre><code class=\"bash\">\r\n$ ls *.log\r\na.log  b.log\r\n$ rm -v !$\r\nremoved `a.log\'\r\nremoved `b.log\'\r\n</code></pre>\r\n\r\nSimilarly you can use @!*@ to reference all of the last commands\' arguments.\r\n\r\n<pre><code class=\"bash\">\r\n$ touch a.log b.log\r\n$ rm -v !*\r\nrm -v a.log b.log\r\nremoved `a.log\'\r\nremoved `b.log\'\r\n</code></pre>\r\n\r\nh4. Correcting mistakes with @^^@\r\n\r\nThis is a nifty trick that performs a substitution on your last command.  It\'s great for correcting typos, or running similar commands back to back. It looks for a match with whatever is after the first carrot, and replaces it with whatever is after the second.\r\n\r\n\r\n<pre><code class=\"bash\">\r\n$ cmhod a+x my_script.sh \r\n-bash: cmhod: command not found\r\n$ ^mh^hm\r\nchmod a+x my_script.sh \r\n</code></pre>\r\n\r\nI use this one all the time doing rails development if I make a mistake on a @script/generate@ command.\r\n\r\n<pre><code class=\"bash\">\r\n$ script/generate model Animal species:string sex:string birthday:date\r\n      exists  app/models/\r\n      exists  test/unit/\r\n      exists  test/fixtures/\r\n      create  app/models/animal.rb\r\n      create  test/unit/animal_test.rb\r\n      create  test/fixtures/animals.yml\r\n      create  db/migrate\r\n      create  db/migrate/20090801180754_create_animals.rb\r\n\r\n$ ^generate^destroy\r\nscript/destroy model Animal species:string sex:string birthday:date\r\n    notempty  db/migrate\r\n    notempty  db\r\n          rm  db/migrate/20090801180754_create_animals.rb\r\n          rm  test/fixtures/animals.yml\r\n          rm  test/unit/animal_test.rb\r\n          rm  app/models/animal.rb\r\n       rmdir  test/fixtures\r\n    notempty  test\r\n       rmdir  test/unit\r\n    notempty  test\r\n       rmdir  app/models\r\n    notempty  app\r\n\r\n$ ^destroy ^generate rspec_\r\nscript/generate rspec_model Animal species:string sex:string birthday:date\r\n      create  app/models/\r\n      create  spec/models/\r\n      create  spec/fixtures/\r\n      create  app/models/animal.rb\r\n      create  spec/models/animal_spec.rb\r\n      create  spec/fixtures/animals.yml\r\n      create  db/migrate\r\n      create  db/migrate/20090801180937_create_animals.rb\r\n</code></pre>\r\n\r\nHope someone else finds these as handy as I do.\r\n','','<p>Here&#8217;s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the <code>bash</code> shell uses to store various aspects of your history.</p>\n\n\n	<h4>Repeating the last command with <code>!!</code></h4>\n\n\n	<p>Sometimes I run a command that requires <code>sudo</code> access, but forget the <code>sudo</code>.  This is a great opportunity to use <code>!!</code> which holds the last command you ran.</p>\n\n\n<pre><code class=\"bash\">\n$ tail /var/log/mail.log\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\n$ sudo !!\nsudo tail /var/log/mail.log\n# output of command\n</code></pre>\n\n	<h4>The last argument of the last command using <code>!$</code></h4>\n\n\n	<p>Sometimes it&#8217;s handy to be able to reference the last argument of your last command.  This can make certain operations safer, by preventing a fat fingered typo from deleting important files.</p>\n\n\n<pre><code class=\"bash\">\n$ ls *.log\na.log  b.log\n$ rm -v !$\nremoved `a.log\'\nremoved `b.log\'\n</code></pre>\n\n	<p>Similarly you can use <code>!*</code> to reference all of the last commands&#8217; arguments.</p>\n\n\n<pre><code class=\"bash\">\n$ touch a.log b.log\n$ rm -v !*\nrm -v a.log b.log\nremoved `a.log\'\nremoved `b.log\'\n</code></pre>\n\n	<h4>Correcting mistakes with <code>^^</code></h4>\n\n\n	<p>This is a nifty trick that performs a substitution on your last command.  It&#8217;s great for correcting typos, or running similar commands back to back. It looks for a match with whatever is after the first carrot, and replaces it with whatever is after the second.</p>\n\n\n<pre><code class=\"bash\">\n$ cmhod a+x my_script.sh \n-bash: cmhod: command not found\n$ ^mh^hm\nchmod a+x my_script.sh \n</code></pre>\n\n	<p>I use this one all the time doing rails development if I make a mistake on a <code>script/generate</code> command.</p>\n\n\n<pre><code class=\"bash\">\n$ script/generate model Animal species:string sex:string birthday:date\n      exists  app/models/\n      exists  test/unit/\n      exists  test/fixtures/\n      create  app/models/animal.rb\n      create  test/unit/animal_test.rb\n      create  test/fixtures/animals.yml\n      create  db/migrate\n      create  db/migrate/20090801180754_create_animals.rb\n\n$ ^generate^destroy\nscript/destroy model Animal species:string sex:string birthday:date\n    notempty  db/migrate\n    notempty  db\n          rm  db/migrate/20090801180754_create_animals.rb\n          rm  test/fixtures/animals.yml\n          rm  test/unit/animal_test.rb\n          rm  app/models/animal.rb\n       rmdir  test/fixtures\n    notempty  test\n       rmdir  test/unit\n    notempty  test\n       rmdir  app/models\n    notempty  app\n\n$ ^destroy ^generate rspec_\nscript/generate rspec_model Animal species:string sex:string birthday:date\n      create  app/models/\n      create  spec/models/\n      create  spec/fixtures/\n      create  app/models/animal.rb\n      create  spec/models/animal_spec.rb\n      create  spec/fixtures/animals.yml\n      create  db/migrate\n      create  db/migrate/20090801180937_create_animals.rb\n</code></pre>\n\n	<p>Hope someone else finds these as handy as I do.</p>','2009-08-01 18:10:34','2009-08-01 18:10:34',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (85,NULL,2,11,1,'My Favorite Bash Substitution Tricks','my-favorite-bash-substitution-tricks','Here\'s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the @bash@ shell uses to store various aspects of your history.\r\n\r\nh4. Repeating the last command with @!!@\r\n\r\nSometimes I run a command that requires @sudo@ access, but forget the @sudo@.  This is a great opportunity to use @!!@ which holds the last command you ran.\r\n\r\n<pre><code class=\"bash\">\r\n$ tail /var/log/mail.log\r\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\r\n$ sudo !!\r\nsudo tail /var/log/mail.log\r\n# output of command\r\n</code></pre>','Here\'s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the @bash@ shell uses to store various aspects of your history.\r\n\r\nh4. Repeating the last command with @!!@\r\n\r\nSometimes I run a command that requires @sudo@ access, but forget the @sudo@.  This is a great opportunity to use @!!@ which holds the last command you ran.\r\n\r\n<pre><code class=\"bash\">\r\n$ tail /var/log/mail.log\r\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\r\n$ sudo !!\r\nsudo tail /var/log/mail.log\r\n# output of command\r\n</code></pre>\r\n\r\nh4. The last argument of the last command using @!$@\r\n\r\nSometimes it\'s handy to be able to reference the last argument of your last command.  This can make certain operations safer, by preventing a fat fingered typo from deleting important files.\r\n\r\n<pre><code class=\"bash\">\r\n$ ls *.log\r\na.log  b.log\r\n$ rm -v !$\r\nremoved `a.log\'\r\nremoved `b.log\'\r\n</code></pre>\r\n\r\nSimilarly you can use @!*@ to reference all of the last commands\' arguments.\r\n\r\n<pre><code class=\"bash\">\r\n$ touch a.log b.log\r\n$ rm -v !*\r\nrm -v a.log b.log\r\nremoved `a.log\'\r\nremoved `b.log\'\r\n</code></pre>\r\n\r\nh4. Correcting mistakes with @^^@\r\n\r\nThis is a nifty trick that performs a substitution on your last command.  It\'s great for correcting typos, or running similar commands back to back. It looks for a match with whatever is after the first carrot, and replaces it with whatever is after the second.\r\n\r\n\r\n<pre><code class=\"bash\">\r\n$ cmhod a+x my_script.sh \r\n-bash: cmhod: command not found\r\n$ ^mh^hm\r\nchmod a+x my_script.sh \r\n</code></pre>\r\n\r\nI use this one all the time doing rails development if I make a mistake on a @script/generate@ command.\r\n\r\n<pre><code class=\"bash\">\r\n$ script/generate model Animal species:string sex:string birthday:date\r\n      exists  app/models/\r\n      exists  test/unit/\r\n      exists  test/fixtures/\r\n      create  app/models/animal.rb\r\n      create  test/unit/animal_test.rb\r\n      create  test/fixtures/animals.yml\r\n      create  db/migrate\r\n      create  db/migrate/20090801180754_create_animals.rb\r\n\r\n$ ^generate^destroy\r\nscript/destroy model Animal species:string sex:string birthday:date\r\n    notempty  db/migrate\r\n    notempty  db\r\n          rm  db/migrate/20090801180754_create_animals.rb\r\n          rm  test/fixtures/animals.yml\r\n          rm  test/unit/animal_test.rb\r\n          rm  app/models/animal.rb\r\n       rmdir  test/fixtures\r\n    notempty  test\r\n       rmdir  test/unit\r\n    notempty  test\r\n       rmdir  app/models\r\n    notempty  app\r\n\r\n$ ^destroy ^generate rspec_\r\nscript/generate rspec_model Animal species:string sex:string birthday:date\r\n      create  app/models/\r\n      create  spec/models/\r\n      create  spec/fixtures/\r\n      create  app/models/animal.rb\r\n      create  spec/models/animal_spec.rb\r\n      create  spec/fixtures/animals.yml\r\n      create  db/migrate\r\n      create  db/migrate/20090801180937_create_animals.rb\r\n</code></pre>\r\n\r\nHope someone else finds these as handy as I do.\r\n','<p>Here&#8217;s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the <code>bash</code> shell uses to store various aspects of your history.</p>\n\n\n	<h4>Repeating the last command with <code>!!</code></h4>\n\n\n	<p>Sometimes I run a command that requires <code>sudo</code> access, but forget the <code>sudo</code>.  This is a great opportunity to use <code>!!</code> which holds the last command you ran.</p>\n\n\n<pre><code class=\"bash\">\n$ tail /var/log/mail.log\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\n$ sudo !!\nsudo tail /var/log/mail.log\n# output of command\n</code></pre>','<p>Here&#8217;s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the <code>bash</code> shell uses to store various aspects of your history.</p>\n\n\n	<h4>Repeating the last command with <code>!!</code></h4>\n\n\n	<p>Sometimes I run a command that requires <code>sudo</code> access, but forget the <code>sudo</code>.  This is a great opportunity to use <code>!!</code> which holds the last command you ran.</p>\n\n\n<pre><code class=\"bash\">\n$ tail /var/log/mail.log\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\n$ sudo !!\nsudo tail /var/log/mail.log\n# output of command\n</code></pre>\n\n	<h4>The last argument of the last command using <code>!$</code></h4>\n\n\n	<p>Sometimes it&#8217;s handy to be able to reference the last argument of your last command.  This can make certain operations safer, by preventing a fat fingered typo from deleting important files.</p>\n\n\n<pre><code class=\"bash\">\n$ ls *.log\na.log  b.log\n$ rm -v !$\nremoved `a.log\'\nremoved `b.log\'\n</code></pre>\n\n	<p>Similarly you can use <code>!*</code> to reference all of the last commands&#8217; arguments.</p>\n\n\n<pre><code class=\"bash\">\n$ touch a.log b.log\n$ rm -v !*\nrm -v a.log b.log\nremoved `a.log\'\nremoved `b.log\'\n</code></pre>\n\n	<h4>Correcting mistakes with <code>^^</code></h4>\n\n\n	<p>This is a nifty trick that performs a substitution on your last command.  It&#8217;s great for correcting typos, or running similar commands back to back. It looks for a match with whatever is after the first carrot, and replaces it with whatever is after the second.</p>\n\n\n<pre><code class=\"bash\">\n$ cmhod a+x my_script.sh \n-bash: cmhod: command not found\n$ ^mh^hm\nchmod a+x my_script.sh \n</code></pre>\n\n	<p>I use this one all the time doing rails development if I make a mistake on a <code>script/generate</code> command.</p>\n\n\n<pre><code class=\"bash\">\n$ script/generate model Animal species:string sex:string birthday:date\n      exists  app/models/\n      exists  test/unit/\n      exists  test/fixtures/\n      create  app/models/animal.rb\n      create  test/unit/animal_test.rb\n      create  test/fixtures/animals.yml\n      create  db/migrate\n      create  db/migrate/20090801180754_create_animals.rb\n\n$ ^generate^destroy\nscript/destroy model Animal species:string sex:string birthday:date\n    notempty  db/migrate\n    notempty  db\n          rm  db/migrate/20090801180754_create_animals.rb\n          rm  test/fixtures/animals.yml\n          rm  test/unit/animal_test.rb\n          rm  app/models/animal.rb\n       rmdir  test/fixtures\n    notempty  test\n       rmdir  test/unit\n    notempty  test\n       rmdir  app/models\n    notempty  app\n\n$ ^destroy ^generate rspec_\nscript/generate rspec_model Animal species:string sex:string birthday:date\n      create  app/models/\n      create  spec/models/\n      create  spec/fixtures/\n      create  app/models/animal.rb\n      create  spec/models/animal_spec.rb\n      create  spec/fixtures/animals.yml\n      create  db/migrate\n      create  db/migrate/20090801180937_create_animals.rb\n</code></pre>\n\n	<p>Hope someone else finds these as handy as I do.</p>','2009-08-01 18:17:29','2009-08-01 18:17:29','2009-08-01 18:10:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (86,NULL,11,8,1,'Installing an Interactive Javascript Shell','setting-up-an-interactive-javascript-console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put this following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put this following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-08-03 05:30:46','2009-08-03 05:30:46','2009-06-26 23:07:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (111,NULL,25,13,1,'Writing Domain Specific Languages (DSLs) with Ruby','writing-domain-specific-languages-dsls-with-ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian. ','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a>.</p>','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.  They need some software written that will help them create battle plans and coordinate the castles&#8217; defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle&#8217;s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a <span class=\"caps\">DSL</span>.</p>\n\n\n	<h3>The final product</h3>\n\n\n	<p>Let&#8217;s take a look at what kind of syntax we&#8217;d like our commander to write to define a new battle plan.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do\n  fire cannon if enemy_approaching?\n  unless enemy_neutralized?\n    sound_alarm\n    fire crossbow\n  end\n  if enemy_approaching?\n    prepare boiling_oil\n    raise_drawbridge\n    fire flaming_catapult\n  end\n  if enemy_approaching?\n    prepare evacuation\n    pour boiling_oil\n  end\n  if enemy_neutralized?\n    lower_drawbridge\n    prepare paperwork\n  end\nend\n</code></pre>\n\n	<p>You can see here that even though this is pure Ruby code, it&#8217;s pretty easy for a non-programming commander to see what&#8217;s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn&#8217;t be hard to make that change.</p>\n\n\n	<h3>How does it work?</h3>\n\n\n	<p>Let&#8217;s assume that the defense of castles is handled directly by castle guards.  In our application part of the <code>Guard</code> class we&#8217;ve implemented looks like this:</p>\n\n\n<pre><code class=\"ruby\">class Guard &lt; Warrior\n  def fire(weapon)\n    weapon.load unless weapon.loaded?\n    weapon.aim\n    weapon.fire\n  end\n\n  def sound_alarm\n    horn.sound\n  end\n\n  def raise_drawbridge\n    drawbridge.control(:up)\n  end\n\n  def lower_drawbridge\n    drawbridge.control(:down)\n  end\n\n  def prepare(recipe)\n    recipe.follow\n  end\n\n  def enemy_approaching?\n    telescope.enemy_visible? and not telescope.enemy_dead?\n  end\n\n  def enemy_neutralized?\n    not enemy_approaching?\n  end\n\n  def boiling_oil\n    define_recipe :boiling_oil do\n      fire.stoke\n      pots.each{|pot| pot.fill :oil}\n    end\n  end\n\n  def evacuation\n    define_recipe :evacuation do\n      gather_women_and_children\n      escape_through_tunnels\n    end\n  end\nend\n</code></pre>\n\n	<p>You can see that the methods on <code>Guard</code> are the same as the vocaulary that the commander is using in our <code>define_battle_plan</code> DSL block.</p>\n\n\n	<p>We create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.</p>\n\n\n	<h3>Defining the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">class Commander\n  attr_accessor :plan\n  def define_battle_plan(&#38;plan)\n    self.plan = plan\n  end\n\n  # ...\nend\n</code></pre>\n\n	<p>Here we have a method called <code>define_battle_plan</code> that takes a block argument called <code>plan</code>.  Notice that when we call <code>define_battle_plan</code> it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.</p>\n\n\n	<h3>Executing the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">\nclass Commander\n  def defend_castle!\n    guard_on_duty.instance_eval &#38;plan\n  end\nend\n</code></pre>\n\n	<p>There&#8217;s another method on our commander class that will cause our battle plan to be run.  When we call <code>defend_castle!</code> the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a <code>Guard</code> instance (the <code>guard_on_duty</code>).  Within the battle plan block, <code>self</code> will refer to the defending <code>Guard</code> giving us easy access to all of the instances methods.</p>\n\n\n	<h3>Another Approach</h3>\n\n\n	<p>There are a few other ways aside for <code>instance_eval</code> to get an nice <span class=\"caps\">DSL</span>-y syntax.  Within Rails it&#8217;s popular to pass the object into the block to get a syntax like this:</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\nend\n</code></pre>\n\n	<p>To get this syntax we would change our <code>defend_castle!</code> method to look like this:</p>\n\n\n<pre><code class=\"ruby\">class Commander\n  def defend_castle!\n    plan.call guard_on_duty\n  end\nend\n</code></pre>\n\n	<p>One advantage (or disadvantage) to this approach is that within the <code>plan</code> block <code>self</code> still refers to the context it was defined in, in this case the <code>Commander</code> instance.  This means we can call methods from the calling class as well.  Imagine the <code>Commander</code> had a <code>notify_king</code> method.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\n  notify_king unless guard.enemy_neutralized?\nend\n</code></pre>\n\n	<h3>More Complex Approaches</h3>\n\n\n	<p>There are a variety of more complicated ways to handle which object&#8217;s methods get called in your <span class=\"caps\">DSL</span>.  You can use <code>method_missing</code>, <a href=\"http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html\"><code>Forwardable</code></a>, or <a href=\"http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html\"><code>Delegate</code></a> to create a chain of responders.  We could have the <code>Guard</code> handle the action if he has a corresponding method, and the <code>Commander</code> handle it otherwise.  <a href=\"http://whytheluckystiff.net/\">_why</a> gets into some other possibilities <a href=\"http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html\">here</a>.</p>','2009-08-03 23:02:12','2009-08-03 23:02:12','2009-08-03 22:57:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (112,NULL,26,13,1,'Writing Domain Specific Languages (DSLs) with Ruby','writing-domain-specific-languages-dsls-with-ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian. ','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a>.</p>','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.  They need some software written that will help them create battle plans and coordinate the castles&#8217; defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle&#8217;s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a <span class=\"caps\">DSL</span>.</p>\n\n\n	<h3>The final product</h3>\n\n\n	<p>Let&#8217;s take a look at what kind of syntax we&#8217;d like our commander to write to define a new battle plan.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do\n  fire cannon if enemy_approaching?\n  unless enemy_neutralized?\n    sound_alarm\n    fire crossbow\n  end\n  if enemy_approaching?\n    prepare boiling_oil\n    raise_drawbridge\n    fire flaming_catapult\n  end\n  if enemy_approaching?\n    prepare evacuation\n    pour boiling_oil\n  end\n  if enemy_neutralized?\n    lower_drawbridge\n    prepare paperwork\n  end\nend\n</code></pre>\n\n	<p>You can see here that even though this is pure Ruby code, it&#8217;s pretty easy for a non-programming commander to see what&#8217;s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn&#8217;t be hard to make that change.</p>\n\n\n	<h3>How does it work?</h3>\n\n\n	<p>Let&#8217;s assume that the defense of castles is handled directly by castle guards.  In our application part of the <code>Guard</code> class we&#8217;ve implemented looks like this:</p>\n\n\n<pre><code class=\"ruby\">class Guard &lt; Warrior\n  def fire(weapon)\n    weapon.load unless weapon.loaded?\n    weapon.aim\n    weapon.fire\n  end\n\n  def sound_alarm\n    horn.sound\n  end\n\n  def raise_drawbridge\n    drawbridge.control(:up)\n  end\n\n  def lower_drawbridge\n    drawbridge.control(:down)\n  end\n\n  def prepare(recipe)\n    recipe.follow\n  end\n\n  def enemy_approaching?\n    telescope.enemy_visible? and not telescope.enemy_dead?\n  end\n\n  def enemy_neutralized?\n    not enemy_approaching?\n  end\n\n  def boiling_oil\n    define_recipe :boiling_oil do\n      fire.stoke\n      pots.each{|pot| pot.fill :oil}\n    end\n  end\n\n  def evacuation\n    define_recipe :evacuation do\n      gather_women_and_children\n      escape_through_tunnels\n    end\n  end\nend\n</code></pre>\n\n	<p>You can see that the methods on <code>Guard</code> are the same as the vocaulary that the commander is using in our <code>define_battle_plan</code> DSL block.</p>\n\n\n	<p>We create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.</p>\n\n\n	<h3>Defining the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">class Commander\n  attr_accessor :plan\n  def define_battle_plan(&#38;plan)\n    self.plan = plan\n  end\n\n  # ...\nend\n</code></pre>\n\n	<p>Here we have a method called <code>define_battle_plan</code> that takes a block argument called <code>plan</code>.  Notice that when we call <code>define_battle_plan</code> it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.</p>\n\n\n	<h3>Executing the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">\nclass Commander\n  def defend_castle!\n    guard_on_duty.instance_eval &#38;plan\n  end\nend\n</code></pre>\n\n	<p>There&#8217;s another method on our commander class that will cause our battle plan to be run.  When we call <code>defend_castle!</code> the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a <code>Guard</code> instance (the <code>guard_on_duty</code>).  Within the battle plan block, <code>self</code> will refer to the defending <code>Guard</code> giving us easy access to all of the instances methods.</p>\n\n\n	<h3>Another Approach</h3>\n\n\n	<p>There are a few other ways aside for <code>instance_eval</code> to get an nice <span class=\"caps\">DSL</span>-y syntax.  Within Rails it&#8217;s popular to pass the object into the block to get a syntax like this:</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\nend\n</code></pre>\n\n	<p>To get this syntax we would change our <code>defend_castle!</code> method to look like this:</p>\n\n\n<pre><code class=\"ruby\">class Commander\n  def defend_castle!\n    plan.call guard_on_duty\n  end\nend\n</code></pre>\n\n	<p>One advantage (or disadvantage) to this approach is that within the <code>plan</code> block <code>self</code> still refers to the context it was defined in, in this case the <code>Commander</code> instance.  This means we can call methods from the calling class as well.  Imagine the <code>Commander</code> had a <code>notify_king</code> method.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\n  notify_king unless guard.enemy_neutralized?\nend\n</code></pre>\n\n	<h3>More Complex Approaches</h3>\n\n\n	<p>There are a variety of more complicated ways to handle which object&#8217;s methods get called in your <span class=\"caps\">DSL</span>.  You can use <code>method_missing</code>, <a href=\"http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html\"><code>Forwardable</code></a>, or <a href=\"http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html\"><code>Delegate</code></a> to create a chain of responders.  We could have the <code>Guard</code> handle the action if he has a corresponding method, and the <code>Commander</code> handle it otherwise.  <a href=\"http://whytheluckystiff.net/\">_why</a> gets into some other possibilities <a href=\"http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html\">here</a>.</p>','2009-08-03 23:02:48','2009-08-03 23:02:48','2009-08-03 22:57:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (113,NULL,27,13,1,'Writing Domain Specific Languages (DSLs) with Ruby','writing-domain-specific-languages-dsls-with-ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers. ','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.</p>','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.  They need some software written that will help them create battle plans and coordinate the castles&#8217; defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle&#8217;s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a <span class=\"caps\">DSL</span>.</p>\n\n\n	<h3>The final product</h3>\n\n\n	<p>Let&#8217;s take a look at what kind of syntax we&#8217;d like our commander to write to define a new battle plan.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do\n  fire cannon if enemy_approaching?\n  unless enemy_neutralized?\n    sound_alarm\n    fire crossbow\n  end\n  if enemy_approaching?\n    prepare boiling_oil\n    raise_drawbridge\n    fire flaming_catapult\n  end\n  if enemy_approaching?\n    prepare evacuation\n    pour boiling_oil\n  end\n  if enemy_neutralized?\n    lower_drawbridge\n    prepare paperwork\n  end\nend\n</code></pre>\n\n	<p>You can see here that even though this is pure Ruby code, it&#8217;s pretty easy for a non-programming commander to see what&#8217;s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn&#8217;t be hard to make that change.</p>\n\n\n	<h3>How does it work?</h3>\n\n\n	<p>Let&#8217;s assume that the defense of castles is handled directly by castle guards.  In our application part of the <code>Guard</code> class we&#8217;ve implemented looks like this:</p>\n\n\n<pre><code class=\"ruby\">class Guard &lt; Warrior\n  def fire(weapon)\n    weapon.load unless weapon.loaded?\n    weapon.aim\n    weapon.fire\n  end\n\n  def sound_alarm\n    horn.sound\n  end\n\n  def raise_drawbridge\n    drawbridge.control(:up)\n  end\n\n  def lower_drawbridge\n    drawbridge.control(:down)\n  end\n\n  def prepare(recipe)\n    recipe.follow\n  end\n\n  def enemy_approaching?\n    telescope.enemy_visible? and not telescope.enemy_dead?\n  end\n\n  def enemy_neutralized?\n    not enemy_approaching?\n  end\n\n  def boiling_oil\n    define_recipe :boiling_oil do\n      fire.stoke\n      pots.each{|pot| pot.fill :oil}\n    end\n  end\n\n  def evacuation\n    define_recipe :evacuation do\n      gather_women_and_children\n      escape_through_tunnels\n    end\n  end\nend\n</code></pre>\n\n	<p>You can see that the methods on <code>Guard</code> are the same as the vocaulary that the commander is using in our <code>define_battle_plan</code> DSL block.</p>\n\n\n	<p>We create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.</p>\n\n\n	<h3>Defining the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">class Commander\n  attr_accessor :plan\n  def define_battle_plan(&#38;plan)\n    self.plan = plan\n  end\n\n  # ...\nend\n</code></pre>\n\n	<p>Here we have a method called <code>define_battle_plan</code> that takes a block argument called <code>plan</code>.  Notice that when we call <code>define_battle_plan</code> it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.</p>\n\n\n	<h3>Executing the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">\nclass Commander\n  def defend_castle!\n    guard_on_duty.instance_eval &#38;plan\n  end\nend\n</code></pre>\n\n	<p>There&#8217;s another method on our commander class that will cause our battle plan to be run.  When we call <code>defend_castle!</code> the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a <code>Guard</code> instance (the <code>guard_on_duty</code>).  Within the battle plan block, <code>self</code> will refer to the defending <code>Guard</code> giving us easy access to all of the instances methods.</p>\n\n\n	<h3>Another Approach</h3>\n\n\n	<p>There are a few other ways aside for <code>instance_eval</code> to get an nice <span class=\"caps\">DSL</span>-y syntax.  Within Rails it&#8217;s popular to pass the object into the block to get a syntax like this:</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\nend\n</code></pre>\n\n	<p>To get this syntax we would change our <code>defend_castle!</code> method to look like this:</p>\n\n\n<pre><code class=\"ruby\">class Commander\n  def defend_castle!\n    plan.call guard_on_duty\n  end\nend\n</code></pre>\n\n	<p>One advantage (or disadvantage) to this approach is that within the <code>plan</code> block <code>self</code> still refers to the context it was defined in, in this case the <code>Commander</code> instance.  This means we can call methods from the calling class as well.  Imagine the <code>Commander</code> had a <code>notify_king</code> method.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\n  notify_king unless guard.enemy_neutralized?\nend\n</code></pre>\n\n	<h3>More Complex Approaches</h3>\n\n\n	<p>There are a variety of more complicated ways to handle which object&#8217;s methods get called in your <span class=\"caps\">DSL</span>.  You can use <code>method_missing</code>, <a href=\"http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html\"><code>Forwardable</code></a>, or <a href=\"http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html\"><code>Delegate</code></a> to create a chain of responders.  We could have the <code>Guard</code> handle the action if he has a corresponding method, and the <code>Commander</code> handle it otherwise.  <a href=\"http://whytheluckystiff.net/\">_why</a> gets into some other possibilities <a href=\"http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html\">here</a>.</p>','2009-08-03 23:03:22','2009-08-03 23:03:22','2009-08-03 22:57:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (114,NULL,28,13,1,'Writing Domain Specific Languages (DSLs) with Ruby','writing-domain-specific-languages-dsls-with-ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers. ','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The Final Product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How Does It Work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.</p>','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.  They need some software written that will help them create battle plans and coordinate the castles&#8217; defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle&#8217;s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a <span class=\"caps\">DSL</span>.</p>\n\n\n	<h3>The Final Product</h3>\n\n\n	<p>Let&#8217;s take a look at what kind of syntax we&#8217;d like our commander to write to define a new battle plan.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do\n  fire cannon if enemy_approaching?\n  unless enemy_neutralized?\n    sound_alarm\n    fire crossbow\n  end\n  if enemy_approaching?\n    prepare boiling_oil\n    raise_drawbridge\n    fire flaming_catapult\n  end\n  if enemy_approaching?\n    prepare evacuation\n    pour boiling_oil\n  end\n  if enemy_neutralized?\n    lower_drawbridge\n    prepare paperwork\n  end\nend\n</code></pre>\n\n	<p>You can see here that even though this is pure Ruby code, it&#8217;s pretty easy for a non-programming commander to see what&#8217;s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn&#8217;t be hard to make that change.</p>\n\n\n	<h3>How Does It Work?</h3>\n\n\n	<p>Let&#8217;s assume that the defense of castles is handled directly by castle guards.  In our application part of the <code>Guard</code> class we&#8217;ve implemented looks like this:</p>\n\n\n<pre><code class=\"ruby\">class Guard &lt; Warrior\n  def fire(weapon)\n    weapon.load unless weapon.loaded?\n    weapon.aim\n    weapon.fire\n  end\n\n  def sound_alarm\n    horn.sound\n  end\n\n  def raise_drawbridge\n    drawbridge.control(:up)\n  end\n\n  def lower_drawbridge\n    drawbridge.control(:down)\n  end\n\n  def prepare(recipe)\n    recipe.follow\n  end\n\n  def enemy_approaching?\n    telescope.enemy_visible? and not telescope.enemy_dead?\n  end\n\n  def enemy_neutralized?\n    not enemy_approaching?\n  end\n\n  def boiling_oil\n    define_recipe :boiling_oil do\n      fire.stoke\n      pots.each{|pot| pot.fill :oil}\n    end\n  end\n\n  def evacuation\n    define_recipe :evacuation do\n      gather_women_and_children\n      escape_through_tunnels\n    end\n  end\nend\n</code></pre>\n\n	<p>You can see that the methods on <code>Guard</code> are the same as the vocaulary that the commander is using in our <code>define_battle_plan</code> DSL block.</p>\n\n\n	<p>We create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.</p>\n\n\n	<h3>Defining the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">class Commander\n  attr_accessor :plan\n  def define_battle_plan(&#38;plan)\n    self.plan = plan\n  end\n\n  # ...\nend\n</code></pre>\n\n	<p>Here we have a method called <code>define_battle_plan</code> that takes a block argument called <code>plan</code>.  Notice that when we call <code>define_battle_plan</code> it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.</p>\n\n\n	<h3>Executing the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">\nclass Commander\n  def defend_castle!\n    guard_on_duty.instance_eval &#38;plan\n  end\nend\n</code></pre>\n\n	<p>There&#8217;s another method on our commander class that will cause our battle plan to be run.  When we call <code>defend_castle!</code> the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a <code>Guard</code> instance (the <code>guard_on_duty</code>).  Within the battle plan block, <code>self</code> will refer to the defending <code>Guard</code> giving us easy access to all of the instances methods.</p>\n\n\n	<h3>Another Approach</h3>\n\n\n	<p>There are a few other ways aside for <code>instance_eval</code> to get an nice <span class=\"caps\">DSL</span>-y syntax.  Within Rails it&#8217;s popular to pass the object into the block to get a syntax like this:</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\nend\n</code></pre>\n\n	<p>To get this syntax we would change our <code>defend_castle!</code> method to look like this:</p>\n\n\n<pre><code class=\"ruby\">class Commander\n  def defend_castle!\n    plan.call guard_on_duty\n  end\nend\n</code></pre>\n\n	<p>One advantage (or disadvantage) to this approach is that within the <code>plan</code> block <code>self</code> still refers to the context it was defined in, in this case the <code>Commander</code> instance.  This means we can call methods from the calling class as well.  Imagine the <code>Commander</code> had a <code>notify_king</code> method.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\n  notify_king unless guard.enemy_neutralized?\nend\n</code></pre>\n\n	<h3>More Complex Approaches</h3>\n\n\n	<p>There are a variety of more complicated ways to handle which object&#8217;s methods get called in your <span class=\"caps\">DSL</span>.  You can use <code>method_missing</code>, <a href=\"http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html\"><code>Forwardable</code></a>, or <a href=\"http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html\"><code>Delegate</code></a> to create a chain of responders.  We could have the <code>Guard</code> handle the action if he has a corresponding method, and the <code>Commander</code> handle it otherwise.  <a href=\"http://whytheluckystiff.net/\">_why</a> gets into some other possibilities <a href=\"http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html\">here</a>.</p>','2009-08-03 23:04:22','2009-08-03 23:04:22','2009-08-03 22:57:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (115,NULL,29,13,1,'Writing Domain Specific Languages (DSLs) with Ruby','writing-domain-specific-languages-dsls-with-ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers. ','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The Final Product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How Does It Work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few ways besides @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.</p>','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.  They need some software written that will help them create battle plans and coordinate the castles&#8217; defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle&#8217;s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a <span class=\"caps\">DSL</span>.</p>\n\n\n	<h3>The Final Product</h3>\n\n\n	<p>Let&#8217;s take a look at what kind of syntax we&#8217;d like our commander to write to define a new battle plan.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do\n  fire cannon if enemy_approaching?\n  unless enemy_neutralized?\n    sound_alarm\n    fire crossbow\n  end\n  if enemy_approaching?\n    prepare boiling_oil\n    raise_drawbridge\n    fire flaming_catapult\n  end\n  if enemy_approaching?\n    prepare evacuation\n    pour boiling_oil\n  end\n  if enemy_neutralized?\n    lower_drawbridge\n    prepare paperwork\n  end\nend\n</code></pre>\n\n	<p>You can see here that even though this is pure Ruby code, it&#8217;s pretty easy for a non-programming commander to see what&#8217;s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn&#8217;t be hard to make that change.</p>\n\n\n	<h3>How Does It Work?</h3>\n\n\n	<p>Let&#8217;s assume that the defense of castles is handled directly by castle guards.  In our application part of the <code>Guard</code> class we&#8217;ve implemented looks like this:</p>\n\n\n<pre><code class=\"ruby\">class Guard &lt; Warrior\n  def fire(weapon)\n    weapon.load unless weapon.loaded?\n    weapon.aim\n    weapon.fire\n  end\n\n  def sound_alarm\n    horn.sound\n  end\n\n  def raise_drawbridge\n    drawbridge.control(:up)\n  end\n\n  def lower_drawbridge\n    drawbridge.control(:down)\n  end\n\n  def prepare(recipe)\n    recipe.follow\n  end\n\n  def enemy_approaching?\n    telescope.enemy_visible? and not telescope.enemy_dead?\n  end\n\n  def enemy_neutralized?\n    not enemy_approaching?\n  end\n\n  def boiling_oil\n    define_recipe :boiling_oil do\n      fire.stoke\n      pots.each{|pot| pot.fill :oil}\n    end\n  end\n\n  def evacuation\n    define_recipe :evacuation do\n      gather_women_and_children\n      escape_through_tunnels\n    end\n  end\nend\n</code></pre>\n\n	<p>You can see that the methods on <code>Guard</code> are the same as the vocaulary that the commander is using in our <code>define_battle_plan</code> DSL block.</p>\n\n\n	<p>We create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.</p>\n\n\n	<h3>Defining the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">class Commander\n  attr_accessor :plan\n  def define_battle_plan(&#38;plan)\n    self.plan = plan\n  end\n\n  # ...\nend\n</code></pre>\n\n	<p>Here we have a method called <code>define_battle_plan</code> that takes a block argument called <code>plan</code>.  Notice that when we call <code>define_battle_plan</code> it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.</p>\n\n\n	<h3>Executing the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">\nclass Commander\n  def defend_castle!\n    guard_on_duty.instance_eval &#38;plan\n  end\nend\n</code></pre>\n\n	<p>There&#8217;s another method on our commander class that will cause our battle plan to be run.  When we call <code>defend_castle!</code> the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a <code>Guard</code> instance (the <code>guard_on_duty</code>).  Within the battle plan block, <code>self</code> will refer to the defending <code>Guard</code> giving us easy access to all of the instances methods.</p>\n\n\n	<h3>Another Approach</h3>\n\n\n	<p>There are a few ways besides <code>instance_eval</code> to get an nice <span class=\"caps\">DSL</span>-y syntax.  Within Rails it&#8217;s popular to pass the object into the block to get a syntax like this:</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\nend\n</code></pre>\n\n	<p>To get this syntax we would change our <code>defend_castle!</code> method to look like this:</p>\n\n\n<pre><code class=\"ruby\">class Commander\n  def defend_castle!\n    plan.call guard_on_duty\n  end\nend\n</code></pre>\n\n	<p>One advantage (or disadvantage) to this approach is that within the <code>plan</code> block <code>self</code> still refers to the context it was defined in, in this case the <code>Commander</code> instance.  This means we can call methods from the calling class as well.  Imagine the <code>Commander</code> had a <code>notify_king</code> method.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\n  notify_king unless guard.enemy_neutralized?\nend\n</code></pre>\n\n	<h3>More Complex Approaches</h3>\n\n\n	<p>There are a variety of more complicated ways to handle which object&#8217;s methods get called in your <span class=\"caps\">DSL</span>.  You can use <code>method_missing</code>, <a href=\"http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html\"><code>Forwardable</code></a>, or <a href=\"http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html\"><code>Delegate</code></a> to create a chain of responders.  We could have the <code>Guard</code> handle the action if he has a corresponding method, and the <code>Commander</code> handle it otherwise.  <a href=\"http://whytheluckystiff.net/\">_why</a> gets into some other possibilities <a href=\"http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html\">here</a>.</p>','2009-08-04 07:50:47','2009-08-04 07:50:47','2009-08-03 22:57:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (129,NULL,13,18,1,'How To Run Rspec Specs From Vim','how-to-run-rspec-specs-from-vim','','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n</div>\r\n\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>\n\n\n	<p>I have this incredibly handy function and key mapping in my <code>.vimrc</code>.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a>.</p>\n\n\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre>&lt;div class=\"line\" id=\"LC1\"&gt;&lt;span class=\"c\"&gt;&amp;quot; Execute open rspec buffer&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC2\"&gt;&lt;span class=\"c\"&gt;&amp;quot; Thanks to Ian Smith-Heisters&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC3\"&gt;&lt;span class=\"k\"&gt;function&lt;/span&gt;&lt;span class=\"p\"&gt;!&lt;/span&gt; RunSpec&lt;span class=\"p\"&gt;(&lt;/span&gt;args&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC4\"&gt;&amp;nbsp;&lt;span class=\"k\"&gt;if&lt;/span&gt; exists&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"s2\"&gt;&amp;quot;b:rails_root&amp;quot;&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &amp;amp;&amp;amp; filereadable&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"k\"&gt;b&lt;/span&gt;:rails_root . &lt;span class=\"c\"&gt;&amp;quot;/script/spec&amp;quot;)&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC5\"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=\"k\"&gt;let&lt;/span&gt; spec &lt;span class=\"p\"&gt;=&lt;/span&gt; &lt;span class=\"k\"&gt;b&lt;/span&gt;:rails_root . &lt;span class=\"c\"&gt;&amp;quot;/script/spec&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC6\"&gt;&amp;nbsp;&lt;span class=\"k\"&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC7\"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=\"k\"&gt;let&lt;/span&gt; spec &lt;span class=\"p\"&gt;=&lt;/span&gt; &lt;span class=\"c\"&gt;&amp;quot;spec&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC8\"&gt;&amp;nbsp;&lt;span class=\"k\"&gt;end&lt;/span&gt; &lt;/div&gt;&lt;div class=\"line\" id=\"LC9\"&gt;&amp;nbsp;&lt;span class=\"k\"&gt;let&lt;/span&gt; cmd &lt;span class=\"p\"&gt;=&lt;/span&gt; &lt;span class=\"s2\"&gt;&amp;quot;:! &amp;quot;&lt;/span&gt; . spec . &lt;span class=\"c\"&gt;&amp;quot; % -cfn &amp;quot; . a:args&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC10\"&gt;&amp;nbsp;execute cmd &lt;/div&gt;&lt;div class=\"line\" id=\"LC11\"&gt;&lt;span class=\"k\"&gt;endfunction&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC12\"&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=\"line\" id=\"LC13\"&gt;&lt;span class=\"c\"&gt;&amp;quot; Mappings&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC14\"&gt;&lt;span class=\"c\"&gt;&amp;quot; run one rspec example or describe block based on cursor position&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC15\"&gt;map &lt;span class=\"p\"&gt;!&lt;/span&gt;s :&lt;span class=\"k\"&gt;call&lt;/span&gt; RunSpec&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"s2\"&gt;&amp;quot;-l &amp;quot;&lt;/span&gt; . &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;C&lt;span class=\"p\"&gt;-&lt;/span&gt;&lt;span class=\"k\"&gt;r&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;=&lt;/span&gt;line&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"s1\"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=\"p\"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class=\"p\"&gt;&amp;gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC16\"&gt;&lt;span class=\"c\"&gt;&amp;quot; run full rspec file&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC17\"&gt;map &lt;span class=\"p\"&gt;!&lt;/span&gt;S :&lt;span class=\"k\"&gt;call&lt;/span&gt; RunSpec&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"s2\"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC18\"&gt;&amp;nbsp;&lt;/div&gt;</pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n      </div>\n\n</div>\n\n	<p>When I&#8217;m in the spec file I can hit <code>!s return</code> to execute the example or describe block that the cursor is in.</p>\n\n\n	<p><a href=\"/images/user/vim-lg2.png\"><img src=\"/images/user/vim2.png\" alt=\"\" /></a></p>\n\n\n	<p>Hitting <code>!S return</code> executes all the examples in that file.</p>\n\n\n	<p><a href=\"/images/user/vim-lg3.png\"><img src=\"/images/user/vim3.png\" alt=\"\" /></a></p>\n\n\n	<p>The fancy descriptive output is just one of the nested formatter which comes included with <a href=\"http://rspec.info/\">Rspec</a>.  They can be specified with the <code>-f</code> flag.  <code>spec --help</code> has more details on this.</p>','2009-08-27 19:39:11','2009-08-27 19:39:11',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,1);
INSERT INTO `content_versions` VALUES (130,NULL,14,18,1,'How To Run Rspec Specs From Vim','how-to-run-rspec-specs-from-vim','','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">  \r\n<div class=\"gist-file\">\r\n   <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n</div>\r\n\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>\n\n\n	<p>I have this incredibly handy function and key mapping in my <code>.vimrc</code>.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a>.</p>\n\n\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">  \n<div class=\"gist-file\">\n   <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre>&lt;div class=\"line\" id=\"LC1\"&gt;&lt;span class=\"c\"&gt;&amp;quot; Execute open rspec buffer&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC2\"&gt;&lt;span class=\"c\"&gt;&amp;quot; Thanks to Ian Smith-Heisters&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC3\"&gt;&lt;span class=\"k\"&gt;function&lt;/span&gt;&lt;span class=\"p\"&gt;!&lt;/span&gt; RunSpec&lt;span class=\"p\"&gt;(&lt;/span&gt;args&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC4\"&gt;&amp;nbsp;&lt;span class=\"k\"&gt;if&lt;/span&gt; exists&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"s2\"&gt;&amp;quot;b:rails_root&amp;quot;&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt; &amp;amp;&amp;amp; filereadable&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"k\"&gt;b&lt;/span&gt;:rails_root . &lt;span class=\"c\"&gt;&amp;quot;/script/spec&amp;quot;)&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC5\"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=\"k\"&gt;let&lt;/span&gt; spec &lt;span class=\"p\"&gt;=&lt;/span&gt; &lt;span class=\"k\"&gt;b&lt;/span&gt;:rails_root . &lt;span class=\"c\"&gt;&amp;quot;/script/spec&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC6\"&gt;&amp;nbsp;&lt;span class=\"k\"&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC7\"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=\"k\"&gt;let&lt;/span&gt; spec &lt;span class=\"p\"&gt;=&lt;/span&gt; &lt;span class=\"c\"&gt;&amp;quot;spec&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC8\"&gt;&amp;nbsp;&lt;span class=\"k\"&gt;end&lt;/span&gt; &lt;/div&gt;&lt;div class=\"line\" id=\"LC9\"&gt;&amp;nbsp;&lt;span class=\"k\"&gt;let&lt;/span&gt; cmd &lt;span class=\"p\"&gt;=&lt;/span&gt; &lt;span class=\"s2\"&gt;&amp;quot;:! &amp;quot;&lt;/span&gt; . spec . &lt;span class=\"c\"&gt;&amp;quot; % -cfn &amp;quot; . a:args&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC10\"&gt;&amp;nbsp;execute cmd &lt;/div&gt;&lt;div class=\"line\" id=\"LC11\"&gt;&lt;span class=\"k\"&gt;endfunction&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC12\"&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=\"line\" id=\"LC13\"&gt;&lt;span class=\"c\"&gt;&amp;quot; Mappings&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC14\"&gt;&lt;span class=\"c\"&gt;&amp;quot; run one rspec example or describe block based on cursor position&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC15\"&gt;map &lt;span class=\"p\"&gt;!&lt;/span&gt;s :&lt;span class=\"k\"&gt;call&lt;/span&gt; RunSpec&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"s2\"&gt;&amp;quot;-l &amp;quot;&lt;/span&gt; . &lt;span class=\"p\"&gt;&amp;lt;&lt;/span&gt;C&lt;span class=\"p\"&gt;-&lt;/span&gt;&lt;span class=\"k\"&gt;r&lt;/span&gt;&lt;span class=\"p\"&gt;&amp;gt;=&lt;/span&gt;line&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"s1\"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=\"p\"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class=\"p\"&gt;&amp;gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC16\"&gt;&lt;span class=\"c\"&gt;&amp;quot; run full rspec file&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC17\"&gt;map &lt;span class=\"p\"&gt;!&lt;/span&gt;S :&lt;span class=\"k\"&gt;call&lt;/span&gt; RunSpec&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"s2\"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=\"p\"&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=\"line\" id=\"LC18\"&gt;&amp;nbsp;&lt;/div&gt;</pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n      </div>\n\n</div>\n\n	<p>When I&#8217;m in the spec file I can hit <code>!s return</code> to execute the example or describe block that the cursor is in.</p>\n\n\n	<p><a href=\"/images/user/vim-lg2.png\"><img src=\"/images/user/vim2.png\" alt=\"\" /></a></p>\n\n\n	<p>Hitting <code>!S return</code> executes all the examples in that file.</p>\n\n\n	<p><a href=\"/images/user/vim-lg3.png\"><img src=\"/images/user/vim3.png\" alt=\"\" /></a></p>\n\n\n	<p>The fancy descriptive output is just one of the nested formatter which comes included with <a href=\"http://rspec.info/\">Rspec</a>.  They can be specified with the <code>-f</code> flag.  <code>spec --help</code> has more details on this.</p>','2009-08-27 19:41:36','2009-08-27 19:41:36',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,1);
INSERT INTO `content_versions` VALUES (131,NULL,15,18,1,'How To Run Rspec Specs From Vim','how-to-run-rspec-specs-from-vim','','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>\n\n\n	<p>I have this incredibly handy function and key mapping in my <code>.vimrc</code>.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a>.</p>\n\n\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\n\n	<p>When I&#8217;m in the spec file I can hit <code>!s return</code> to execute the example or describe block that the cursor is in.</p>\n\n\n	<p><a href=\"/images/user/vim-lg2.png\"><img src=\"/images/user/vim2.png\" alt=\"\" /></a></p>\n\n\n	<p>Hitting <code>!S return</code> executes all the examples in that file.</p>\n\n\n	<p><a href=\"/images/user/vim-lg3.png\"><img src=\"/images/user/vim3.png\" alt=\"\" /></a></p>\n\n\n	<p>The fancy descriptive output is just one of the nested formatter which comes included with <a href=\"http://rspec.info/\">Rspec</a>.  They can be specified with the <code>-f</code> flag.  <code>spec --help</code> has more details on this.</p>','2009-08-27 19:43:06','2009-08-27 19:43:06',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,1);
INSERT INTO `content_versions` VALUES (132,NULL,16,18,1,'How To Run Rspec Specs From Vim','how-to-run-rspec-specs-from-vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>\n\n\n	<p>I have this incredibly handy function and key mapping in my <code>.vimrc</code>.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a>.</p>\n\n\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\n\n	<p>When I&#8217;m in the spec file I can hit <code>!s return</code> to execute the example or describe block that the cursor is in.</p>\n\n\n	<p><a href=\"/images/user/vim-lg2.png\"><img src=\"/images/user/vim2.png\" alt=\"\" /></a></p>\n\n\n	<p>Hitting <code>!S return</code> executes all the examples in that file.</p>\n\n\n	<p><a href=\"/images/user/vim-lg3.png\"><img src=\"/images/user/vim3.png\" alt=\"\" /></a></p>\n\n\n	<p>The fancy descriptive output is just one of the nested formatter which comes included with <a href=\"http://rspec.info/\">Rspec</a>.  They can be specified with the <code>-f</code> flag.  <code>spec --help</code> has more details on this.</p>','2009-08-27 19:44:29','2009-08-27 19:44:29','2009-08-27 19:43:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,1);
INSERT INTO `content_versions` VALUES (133,NULL,1,19,1,'test','test','','<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n</div>\r\n</notextile>','','<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n      </div>\n\n</div>','2009-08-27 19:53:44','2009-08-27 19:53:44',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (134,NULL,2,19,1,'test','test','','<div style=\"font-size:12px;\"/>\r\n<notextile>\r\n<div style=\"font-size:12px;\">\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n\r\n</div>\r\n</div>\r\n</notextile>','','<div style=\"font-size:12px;\"/>\n\n<div style=\"font-size:12px;\">\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n      </div>\n\n</div>\n</div>','2009-08-27 19:54:35','2009-08-27 19:54:35',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (135,NULL,3,19,1,'test','test','','\r\n<notextile>\r\n<div style=\"font-size:12px;\">\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n\r\n</div>\r\n</div>\r\n</notextile>','','<div style=\"font-size:12px;\">\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n      </div>\n\n</div>\n</div>','2009-08-27 19:54:59','2009-08-27 19:54:59',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (136,NULL,17,18,1,'How To Run Rspec Specs From Vim','how-to-run-rspec-specs-from-vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<notextile>\r\n<div style=\"font-size:12px;\">\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n\r\n</div>\r\n</div>\r\n</notextile>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>\n\n\n	<p>I have this incredibly handy function and key mapping in my <code>.vimrc</code>.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a>.</p>\n\n\n\n<div style=\"font-size:12px;\">\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n      </div>\n\n</div>\n</div>\n\n\n	<p>When I&#8217;m in the spec file I can hit <code>!s return</code> to execute the example or describe block that the cursor is in.</p>\n\n\n	<p><a href=\"/images/user/vim-lg2.png\"><img src=\"/images/user/vim2.png\" alt=\"\" /></a></p>\n\n\n	<p>Hitting <code>!S return</code> executes all the examples in that file.</p>\n\n\n	<p><a href=\"/images/user/vim-lg3.png\"><img src=\"/images/user/vim3.png\" alt=\"\" /></a></p>\n\n\n	<p>The fancy descriptive output is just one of the nested formatter which comes included with <a href=\"http://rspec.info/\">Rspec</a>.  They can be specified with the <code>-f</code> flag.  <code>spec --help</code> has more details on this.</p>','2009-08-27 19:55:23','2009-08-27 19:55:23','2009-08-27 19:43:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,1);
INSERT INTO `content_versions` VALUES (159,NULL,23,20,1,'ack: the fast code search tool','ack-the-fast-code-search-tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n','<strong style=\"color:#900\">Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://drasticcode.com/demo/download/ack.txt online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nEnd update....\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>','<p><strong style=\"color:#900\">Update</strong></p>\n\n\nIt looks like the stand-alone version of <code>ack</code> is no longer available.  I&#8217;ve put <a href=\"http://drasticcode.com/demo/download/ack.txt\">a copy of the version of ack I&#8217;m using</a> online.  You should be able to install it on your local system with this command:\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p>End update&#8230;.</p>\n\n\n	<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt &gt; ~/bin/ack &#38;&#38; chmod 0755 &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>\n\n	<p>This spits out highlighted matches from every file in the present directory.</p>\n\n\n	<p><code>ack --help</code> lists a lot of additional options to control how it matches, and what it outputs.</p>\n\n\n	<p>(My favorite is <code>ack --thpppt</code>)</p>\n\n\n<pre><code class=\"bash\">$ ack --thpppt \n_   /|\n\\\'o.O\'\n=(___)=\n   U    Bill the Cat!\n</code></pre>\n\n	<p>So back to how <code>ack</code> is useful when you want to do a find and replace on a lot of files.</p>\n\n\nFirst I&#8217;d do a quick search for the method I want to rename:\n<pre><code class=\"bash\">$ ack destroy_other\napp/models/wd/core/proxy_to.rb\n23:    def destroy_other!\n\nscript/pull_wds\n58:      wd.destroy_other!\n\nspec/models/wd/core/proxy_to_spec.rb\n216:      @wd.destroy_other!\n\nspec/script/pull_wds_spec.rb\n26:    wd.should_receive :destroy_other!\n36:    wd.should_not_receive :destroy_other!\n</code></pre>\n\n	<p>This next command will open all the files in <code>vi</code> that matched in the previous command.  (The <code>!!</code> is one of <a href=\"http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\">My Favorite Bash Substitution Tricks</a>.)</p>\n\n\n<pre><code class=\"bash\">$ vi `!! -l`\n</code></pre>\n\n	<p><code>ack</code>&#8217;s <code>-l</code> option causes it to output only the filenames containing the matches.</p>','2009-09-26 02:02:34','2009-09-26 02:02:34','2009-09-09 06:16:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (160,NULL,24,20,1,'ack: the fast code search tool','ack-the-fast-code-search-tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n','<strong style=\"color:#900\">Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://drasticcode.com/demo/download/ack.txt online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\n<strong style=\"color:#900\">End Update....</strong>\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>','<p><strong style=\"color:#900\">Update</strong></p>\n\n\nIt looks like the stand-alone version of <code>ack</code> is no longer available.  I&#8217;ve put <a href=\"http://drasticcode.com/demo/download/ack.txt\">a copy of the version of ack I&#8217;m using</a> online.  You should be able to install it on your local system with this command:\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p><strong style=\"color:#900\">End Update&#8230;.</strong></p>\n\n\n	<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt &gt; ~/bin/ack &#38;&#38; chmod 0755 &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>\n\n	<p>This spits out highlighted matches from every file in the present directory.</p>\n\n\n	<p><code>ack --help</code> lists a lot of additional options to control how it matches, and what it outputs.</p>\n\n\n	<p>(My favorite is <code>ack --thpppt</code>)</p>\n\n\n<pre><code class=\"bash\">$ ack --thpppt \n_   /|\n\\\'o.O\'\n=(___)=\n   U    Bill the Cat!\n</code></pre>\n\n	<p>So back to how <code>ack</code> is useful when you want to do a find and replace on a lot of files.</p>\n\n\nFirst I&#8217;d do a quick search for the method I want to rename:\n<pre><code class=\"bash\">$ ack destroy_other\napp/models/wd/core/proxy_to.rb\n23:    def destroy_other!\n\nscript/pull_wds\n58:      wd.destroy_other!\n\nspec/models/wd/core/proxy_to_spec.rb\n216:      @wd.destroy_other!\n\nspec/script/pull_wds_spec.rb\n26:    wd.should_receive :destroy_other!\n36:    wd.should_not_receive :destroy_other!\n</code></pre>\n\n	<p>This next command will open all the files in <code>vi</code> that matched in the previous command.  (The <code>!!</code> is one of <a href=\"http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\">My Favorite Bash Substitution Tricks</a>.)</p>\n\n\n<pre><code class=\"bash\">$ vi `!! -l`\n</code></pre>\n\n	<p><code>ack</code>&#8217;s <code>-l</code> option causes it to output only the filenames containing the matches.</p>','2009-09-26 02:05:10','2009-09-26 02:05:10','2009-09-09 06:16:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (161,NULL,25,20,1,'ack: the fast code search tool','ack-the-fast-code-search-tool','<strong style=\"color:#900\">Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://drasticcode.com/demo/download/ack.txt online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\n<strong style=\"color:#900\">End Update....</strong>\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.','<strong style=\"color:#900\">Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://drasticcode.com/demo/download/ack.txt online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\n<strong style=\"color:#900\">End Update....</strong>\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','<p><strong style=\"color:#900\">Update</strong></p>\n\n\nIt looks like the stand-alone version of <code>ack</code> is no longer available.  I&#8217;ve put <a href=\"http://drasticcode.com/demo/download/ack.txt\">a copy of the version of ack I&#8217;m using</a> online.  You should be able to install it on your local system with this command:\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p><strong style=\"color:#900\">End Update&#8230;.</strong></p>\n\n\n	<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>','<p><strong style=\"color:#900\">Update</strong></p>\n\n\nIt looks like the stand-alone version of <code>ack</code> is no longer available.  I&#8217;ve put <a href=\"http://drasticcode.com/demo/download/ack.txt\">a copy of the version of ack I&#8217;m using</a> online.  You should be able to install it on your local system with this command:\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p><strong style=\"color:#900\">End Update&#8230;.</strong></p>\n\n\n	<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt &gt; ~/bin/ack &#38;&#38; chmod 0755 &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack  \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>\n\n	<p>This spits out highlighted matches from every file in the present directory.</p>\n\n\n	<p><code>ack --help</code> lists a lot of additional options to control how it matches, and what it outputs.</p>\n\n\n	<p>(My favorite is <code>ack --thpppt</code>)</p>\n\n\n<pre><code class=\"bash\">$ ack --thpppt \n_   /|\n\\\'o.O\'\n=(___)=\n   U    Bill the Cat!\n</code></pre>\n\n	<p>So back to how <code>ack</code> is useful when you want to do a find and replace on a lot of files.</p>\n\n\nFirst I&#8217;d do a quick search for the method I want to rename:\n<pre><code class=\"bash\">$ ack destroy_other\napp/models/wd/core/proxy_to.rb\n23:    def destroy_other!\n\nscript/pull_wds\n58:      wd.destroy_other!\n\nspec/models/wd/core/proxy_to_spec.rb\n216:      @wd.destroy_other!\n\nspec/script/pull_wds_spec.rb\n26:    wd.should_receive :destroy_other!\n36:    wd.should_not_receive :destroy_other!\n</code></pre>\n\n	<p>This next command will open all the files in <code>vi</code> that matched in the previous command.  (The <code>!!</code> is one of <a href=\"http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\">My Favorite Bash Substitution Tricks</a>.)</p>\n\n\n<pre><code class=\"bash\">$ vi `!! -l`\n</code></pre>\n\n	<p><code>ack</code>&#8217;s <code>-l</code> option causes it to output only the filenames containing the matches.</p>','2009-09-26 02:06:17','2009-09-26 02:06:17','2009-09-09 06:16:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (162,NULL,1,21,1,'Roll Your Own Remember Me','roll-your-own-remember-me','','<pre><code class=\"javascript\">\r\n// ==UserScript==\r\n// @name        login\r\n// @namespace   http://fluidapp.com\r\n// @description This keeps you logged in to new relic across browser sessions\r\n// @include     *\r\n// @author      Sam Goldstein\r\n// ==/UserScript==\r\n\r\n(function () {\r\n    if (window.fluid) {\r\n        // Session cookie identifier\r\n        var CookieName = \'_newrelic_session_id\'\r\n\r\n        // http://www.quirksmode.org/js/cookies.html#script\r\n        function createCookie(name,value,days) {\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime()+(days*24*60*60*1000));\r\n                var expires = \"; expires=\"+date.toGMTString();\r\n            }\r\n            else var expires = \"\";\r\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n        }\r\n\r\n        function readCookie(name) {\r\n            var nameEQ = name + \"=\";\r\n            var ca = document.cookie.split(\';\');\r\n            for(var i=0;i < ca.length;i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\r\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function eraseCookie(name) {\r\n            createCookie(name,\"\",-1);\r\n        }\r\n\r\n        // Set the cookie to expire in 3000 days\r\n        createCookie(CookieName, readCookie(CookieName), 3000);\r\n\r\n    }\r\n})();\r\n</code></pre>','','<pre><code class=\"javascript\">\n// ==UserScript==\n// @name        login\n// @namespace   http://fluidapp.com\n// @description This keeps you logged in to new relic across browser sessions\n// @include     *\n// @author      Sam Goldstein\n// ==/UserScript==\n\n(function () {\n    if (window.fluid) {\n        // Session cookie identifier\n        var CookieName = \'_newrelic_session_id\'\n\n        // http://www.quirksmode.org/js/cookies.html#script\n        function createCookie(name,value,days) {\n            if (days) {\n                var date = new Date();\n                date.setTime(date.getTime()+(days*24*60*60*1000));\n                var expires = \"; expires=\"+date.toGMTString();\n            }\n            else var expires = \"\";\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\n        }\n\n        function readCookie(name) {\n            var nameEQ = name + \"=\";\n            var ca = document.cookie.split(\';\');\n            for(var i=0;i &lt; ca.length;i++) {\n                var c = ca[i];\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n            }\n            return null;\n        }\n\n        function eraseCookie(name) {\n            createCookie(name,\"\",-1);\n        }\n\n        // Set the cookie to expire in 3000 days\n        createCookie(CookieName, readCookie(CookieName), 3000);\n\n    }\n})();\n</code></pre>','2009-10-05 00:07:23','2009-10-05 00:07:23',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (163,NULL,2,21,1,'Roll Your Own Remember Me','roll-your-own-remember-me','','I\'ve been setting up \"Fluid Applications\":http://fluidapp.com/ for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it\'s a native OS X application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.\r\n\r\nThis has been working really well for me, until I hit one annoyance with \"New Relic\":http://www.newrelic.com/.  This web app doesn\'t have a *remember me* feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.\r\n\r\nLuckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you\'re viewing.  Just create one in the \"Scripts\" menu, or add a javascript file at @~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/@. Here\'s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven\'t had to enter my user credentials since.\r\n\r\n<pre><code class=\"javascript\">\r\n// ==UserScript==\r\n// @name        login\r\n// @namespace   http://fluidapp.com\r\n// @description This keeps you logged in to new relic across browser sessions\r\n// @include     *\r\n// @author      Sam Goldstein\r\n// ==/UserScript==\r\n\r\n(function () {\r\n    if (window.fluid) {\r\n      // Session cookie identifier\r\n      var CookieName = \'_newrelic_session_id\'\r\n\r\n      function LongTermCookie(cookieName) {\r\n\r\n        // http://www.quirksmode.org/js/cookies.html#script\r\n        function createCookie(name,value,days) {\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime()+(days*24*60*60*1000));\r\n                var expires = \"; expires=\"+date.toGMTString();\r\n            }\r\n            else var expires = \"\";\r\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n        }\r\n\r\n        function readCookie(name) {\r\n            var nameEQ = name + \"=\";\r\n            var ca = document.cookie.split(\';\');\r\n            for(var i=0;i < ca.length;i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\r\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function eraseCookie(name) {\r\n            createCookie(name,\"\",-1);\r\n        }\r\n\r\n        // Set the cookie to expire in 3000 days\r\n        createCookie(cookieName, readCookie(CookieName), 3000);\r\n      }\r\n    }\r\n    new LongTermCookie(CookieName)\r\n})();\r\n</code></pre>','','<p>I&#8217;ve been setting up <a href=\"http://fluidapp.com/\">Fluid Applications</a> for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it&#8217;s a native <span class=\"caps\">OS X</span> application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.</p>\n\n\n	<p>This has been working really well for me, until I hit one annoyance with <a href=\"http://www.newrelic.com/\">New Relic</a>.  This web app doesn&#8217;t have a <strong>remember me</strong> feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.</p>\n\n\n	<p>Luckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you&#8217;re viewing.  Just create one in the &#8220;Scripts&#8221; menu, or add a javascript file at <code>~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/</code>. Here&#8217;s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven&#8217;t had to enter my user credentials since.</p>\n\n\n<pre><code class=\"javascript\">\n// ==UserScript==\n// @name        login\n// @namespace   http://fluidapp.com\n// @description This keeps you logged in to new relic across browser sessions\n// @include     *\n// @author      Sam Goldstein\n// ==/UserScript==\n\n(function () {\n    if (window.fluid) {\n      // Session cookie identifier\n      var CookieName = \'_newrelic_session_id\'\n\n      function LongTermCookie(cookieName) {\n\n        // http://www.quirksmode.org/js/cookies.html#script\n        function createCookie(name,value,days) {\n            if (days) {\n                var date = new Date();\n                date.setTime(date.getTime()+(days*24*60*60*1000));\n                var expires = \"; expires=\"+date.toGMTString();\n            }\n            else var expires = \"\";\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\n        }\n\n        function readCookie(name) {\n            var nameEQ = name + \"=\";\n            var ca = document.cookie.split(\';\');\n            for(var i=0;i &lt; ca.length;i++) {\n                var c = ca[i];\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n            }\n            return null;\n        }\n\n        function eraseCookie(name) {\n            createCookie(name,\"\",-1);\n        }\n\n        // Set the cookie to expire in 3000 days\n        createCookie(cookieName, readCookie(CookieName), 3000);\n      }\n    }\n    new LongTermCookie(CookieName)\n})();\n</code></pre>','2009-10-11 17:33:41','2009-10-11 17:33:41',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (164,NULL,3,21,1,'Roll Your Own Remember Me','roll-your-own-remember-me','','I\'ve been setting up \"Fluid Applications\":http://fluidapp.com/ for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it\'s a native OS X application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.\r\n\r\nThis has been working really well for me, until I hit one annoyance with \"New Relic\":http://www.newrelic.com/.  This web app doesn\'t have a *remember me* feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.\r\n\r\nLuckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you\'re viewing.  Just create one in the \"Scripts\" menu, or add a javascript file at @~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/@. Here\'s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven\'t had to enter my user credentials since.\r\n\r\n<pre><code class=\"javascript\">\r\n// ==UserScript==\r\n// @name        login\r\n// @namespace   http://fluidapp.com\r\n// @description This keeps you logged in to new relic across browser sessions\r\n// @include     *\r\n// @author      Sam Goldstein\r\n// ==/UserScript==\r\n\r\n(function () {\r\n    if (window.fluid) {\r\n      // Session cookie identifier\r\n      var CookieName = \'_newrelic_session_id\'\r\n\r\n      function LongTermCookie(cookieName) {\r\n\r\n        // http://www.quirksmode.org/js/cookies.html#script\r\n        function createCookie(name,value,days) {\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime()+(days*24*60*60*1000));\r\n                var expires = \"; expires=\"+date.toGMTString();\r\n            }\r\n            else var expires = \"\";\r\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n        }\r\n\r\n        function readCookie(name) {\r\n            var nameEQ = name + \"=\";\r\n            var ca = document.cookie.split(\';\');\r\n            for(var i=0;i < ca.length;i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\r\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function eraseCookie(name) {\r\n            createCookie(name,\"\",-1);\r\n        }\r\n\r\n        // Set the cookie to expire in 3000 days\r\n        createCookie(cookieName, readCookie(CookieName), 3000);\r\n      }\r\n    }\r\n    new LongTermCookie(CookieName)\r\n})();\r\n</code></pre>\r\n\r\nI\'ve pasted it into \"gist\":http://gist.github.com/207763 on github.','','<p>I&#8217;ve been setting up <a href=\"http://fluidapp.com/\">Fluid Applications</a> for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it&#8217;s a native <span class=\"caps\">OS X</span> application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.</p>\n\n\n	<p>This has been working really well for me, until I hit one annoyance with <a href=\"http://www.newrelic.com/\">New Relic</a>.  This web app doesn&#8217;t have a <strong>remember me</strong> feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.</p>\n\n\n	<p>Luckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you&#8217;re viewing.  Just create one in the &#8220;Scripts&#8221; menu, or add a javascript file at <code>~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/</code>. Here&#8217;s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven&#8217;t had to enter my user credentials since.</p>\n\n\n<pre><code class=\"javascript\">\n// ==UserScript==\n// @name        login\n// @namespace   http://fluidapp.com\n// @description This keeps you logged in to new relic across browser sessions\n// @include     *\n// @author      Sam Goldstein\n// ==/UserScript==\n\n(function () {\n    if (window.fluid) {\n      // Session cookie identifier\n      var CookieName = \'_newrelic_session_id\'\n\n      function LongTermCookie(cookieName) {\n\n        // http://www.quirksmode.org/js/cookies.html#script\n        function createCookie(name,value,days) {\n            if (days) {\n                var date = new Date();\n                date.setTime(date.getTime()+(days*24*60*60*1000));\n                var expires = \"; expires=\"+date.toGMTString();\n            }\n            else var expires = \"\";\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\n        }\n\n        function readCookie(name) {\n            var nameEQ = name + \"=\";\n            var ca = document.cookie.split(\';\');\n            for(var i=0;i &lt; ca.length;i++) {\n                var c = ca[i];\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n            }\n            return null;\n        }\n\n        function eraseCookie(name) {\n            createCookie(name,\"\",-1);\n        }\n\n        // Set the cookie to expire in 3000 days\n        createCookie(cookieName, readCookie(CookieName), 3000);\n      }\n    }\n    new LongTermCookie(CookieName)\n})();\n</code></pre>\n\n	<p>I&#8217;ve pasted it into <a href=\"http://gist.github.com/207763\">gist</a> on github.</p>','2009-10-11 17:35:36','2009-10-11 17:35:36',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (165,NULL,4,21,1,'Roll Your Own Remember Me','roll-your-own-remember-me','I\'ve been setting up \"Fluid Applications\":http://fluidapp.com/ for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it\'s a native OS X application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.\r\n\r\nThis has been working really well for me, until I hit one annoyance with \"New Relic\":http://www.newrelic.com/.  This web app doesn\'t have a *remember me* feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.\r\n','I\'ve been setting up \"Fluid Applications\":http://fluidapp.com/ for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it\'s a native OS X application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.\r\n\r\nThis has been working really well for me, until I hit one annoyance with \"New Relic\":http://www.newrelic.com/.  This web app doesn\'t have a *remember me* feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.\r\n\r\nLuckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you\'re viewing.  Just create one in the \"Scripts\" menu, or add a javascript file at @~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/@. Here\'s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven\'t had to enter my user credentials since.\r\n\r\n<pre><code class=\"javascript\">\r\n// ==UserScript==\r\n// @name        login\r\n// @namespace   http://fluidapp.com\r\n// @description This keeps you logged in to new relic across browser sessions\r\n// @include     *\r\n// @author      Sam Goldstein\r\n// ==/UserScript==\r\n\r\n(function () {\r\n    if (window.fluid) {\r\n      // Session cookie identifier\r\n      var CookieName = \'_newrelic_session_id\'\r\n\r\n      function LongTermCookie(cookieName) {\r\n\r\n        // http://www.quirksmode.org/js/cookies.html#script\r\n        function createCookie(name,value,days) {\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime()+(days*24*60*60*1000));\r\n                var expires = \"; expires=\"+date.toGMTString();\r\n            }\r\n            else var expires = \"\";\r\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n        }\r\n\r\n        function readCookie(name) {\r\n            var nameEQ = name + \"=\";\r\n            var ca = document.cookie.split(\';\');\r\n            for(var i=0;i < ca.length;i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\r\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function eraseCookie(name) {\r\n            createCookie(name,\"\",-1);\r\n        }\r\n\r\n        // Set the cookie to expire in 3000 days\r\n        createCookie(cookieName, readCookie(cookieName), 3000);\r\n      }\r\n    }\r\n    new LongTermCookie(CookieName)\r\n})();\r\n</code></pre>\r\n\r\nI\'ve pasted it into \"gist\":http://gist.github.com/207763 on github.','<p>I&#8217;ve been setting up <a href=\"http://fluidapp.com/\">Fluid Applications</a> for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it&#8217;s a native <span class=\"caps\">OS X</span> application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.</p>\n\n\n	<p>This has been working really well for me, until I hit one annoyance with <a href=\"http://www.newrelic.com/\">New Relic</a>.  This web app doesn&#8217;t have a <strong>remember me</strong> feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.</p>','<p>I&#8217;ve been setting up <a href=\"http://fluidapp.com/\">Fluid Applications</a> for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it&#8217;s a native <span class=\"caps\">OS X</span> application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.</p>\n\n\n	<p>This has been working really well for me, until I hit one annoyance with <a href=\"http://www.newrelic.com/\">New Relic</a>.  This web app doesn&#8217;t have a <strong>remember me</strong> feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.</p>\n\n\n	<p>Luckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you&#8217;re viewing.  Just create one in the &#8220;Scripts&#8221; menu, or add a javascript file at <code>~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/</code>. Here&#8217;s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven&#8217;t had to enter my user credentials since.</p>\n\n\n<pre><code class=\"javascript\">\n// ==UserScript==\n// @name        login\n// @namespace   http://fluidapp.com\n// @description This keeps you logged in to new relic across browser sessions\n// @include     *\n// @author      Sam Goldstein\n// ==/UserScript==\n\n(function () {\n    if (window.fluid) {\n      // Session cookie identifier\n      var CookieName = \'_newrelic_session_id\'\n\n      function LongTermCookie(cookieName) {\n\n        // http://www.quirksmode.org/js/cookies.html#script\n        function createCookie(name,value,days) {\n            if (days) {\n                var date = new Date();\n                date.setTime(date.getTime()+(days*24*60*60*1000));\n                var expires = \"; expires=\"+date.toGMTString();\n            }\n            else var expires = \"\";\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\n        }\n\n        function readCookie(name) {\n            var nameEQ = name + \"=\";\n            var ca = document.cookie.split(\';\');\n            for(var i=0;i &lt; ca.length;i++) {\n                var c = ca[i];\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n            }\n            return null;\n        }\n\n        function eraseCookie(name) {\n            createCookie(name,\"\",-1);\n        }\n\n        // Set the cookie to expire in 3000 days\n        createCookie(cookieName, readCookie(cookieName), 3000);\n      }\n    }\n    new LongTermCookie(CookieName)\n})();\n</code></pre>\n\n	<p>I&#8217;ve pasted it into <a href=\"http://gist.github.com/207763\">gist</a> on github.</p>','2009-10-11 22:51:15','2009-10-11 22:51:15','2009-10-11 17:37:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (166,NULL,26,20,1,'ack: the fast code search tool','ack-the-fast-code-search-tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 ~/bin/ack \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 ~/bin/ack \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>','<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>\n\n	<p>This spits out highlighted matches from every file in the present directory.</p>\n\n\n	<p><code>ack --help</code> lists a lot of additional options to control how it matches, and what it outputs.</p>\n\n\n	<p>(My favorite is <code>ack --thpppt</code>)</p>\n\n\n<pre><code class=\"bash\">$ ack --thpppt \n_   /|\n\\\'o.O\'\n=(___)=\n   U    Bill the Cat!\n</code></pre>\n\n	<p>So back to how <code>ack</code> is useful when you want to do a find and replace on a lot of files.</p>\n\n\nFirst I&#8217;d do a quick search for the method I want to rename:\n<pre><code class=\"bash\">$ ack destroy_other\napp/models/wd/core/proxy_to.rb\n23:    def destroy_other!\n\nscript/pull_wds\n58:      wd.destroy_other!\n\nspec/models/wd/core/proxy_to_spec.rb\n216:      @wd.destroy_other!\n\nspec/script/pull_wds_spec.rb\n26:    wd.should_receive :destroy_other!\n36:    wd.should_not_receive :destroy_other!\n</code></pre>\n\n	<p>This next command will open all the files in <code>vi</code> that matched in the previous command.  (The <code>!!</code> is one of <a href=\"http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\">My Favorite Bash Substitution Tricks</a>.)</p>\n\n\n<pre><code class=\"bash\">$ vi `!! -l`\n</code></pre>\n\n	<p><code>ack</code>&#8217;s <code>-l</code> option causes it to output only the filenames containing the matches.</p>','2009-11-14 19:01:20','2009-11-14 19:01:20','2009-09-09 06:16:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (167,NULL,27,20,1,'ack: the fast code search tool','ack-the-fast-code-search-tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 ~/bin/ack \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 ~/bin/ack \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>','<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$ curl http://betterthangrep.com/ack-standalone &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>\n\n	<p>This spits out highlighted matches from every file in the present directory.</p>\n\n\n	<p><code>ack --help</code> lists a lot of additional options to control how it matches, and what it outputs.</p>\n\n\n	<p>(My favorite is <code>ack --thpppt</code>)</p>\n\n\n<pre><code class=\"bash\">$ ack --thpppt \n_   /|\n\\\'o.O\'\n=(___)=\n   U    Bill the Cat!\n</code></pre>\n\n	<p>So back to how <code>ack</code> is useful when you want to do a find and replace on a lot of files.</p>\n\n\nFirst I&#8217;d do a quick search for the method I want to rename:\n<pre><code class=\"bash\">$ ack destroy_other\napp/models/wd/core/proxy_to.rb\n23:    def destroy_other!\n\nscript/pull_wds\n58:      wd.destroy_other!\n\nspec/models/wd/core/proxy_to_spec.rb\n216:      @wd.destroy_other!\n\nspec/script/pull_wds_spec.rb\n26:    wd.should_receive :destroy_other!\n36:    wd.should_not_receive :destroy_other!\n</code></pre>\n\n	<p>This next command will open all the files in <code>vi</code> that matched in the previous command.  (The <code>!!</code> is one of <a href=\"http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\">My Favorite Bash Substitution Tricks</a>.)</p>\n\n\n<pre><code class=\"bash\">$ vi `!! -l`\n</code></pre>\n\n	<p><code>ack</code>&#8217;s <code>-l</code> option causes it to output only the filenames containing the matches.</p>','2009-11-14 19:01:40','2009-11-14 19:01:40','2009-09-09 06:16:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (169,NULL,2,22,1,'How to run one Test::Unit test case from vim','how-to-run-one-test-unit-test-case-from-vim','','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large Test::Unit suite and I missed being able to execute one testcase from within vim.  I finally got around to coding it.  HItting `!s` will execute the current testcase based on the cursor\'s position.  Hitting `!S` will run all the cases in the file.  It\'s intelligent about whether you\'re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you\'re in an `sbt` project.)\r\n\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n','','<p>I recently updated my vim script for <a href=\"http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim\">running rspec specs from vim</a>.</p>\n\n\n	<p>I&#8217;ve been working on a project that has a large Test::Unit suite and I missed being able to execute one testcase from within vim.  I finally got around to coding it.  HItting `!s` will execute the current testcase based on the cursor&#8217;s position.  Hitting `!S` will run all the cases in the file.  It&#8217;s intelligent about whether you&#8217;re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you&#8217;re in an `sbt` project.)</p>\n\n\n\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n\n      </div>\n\n</div>','2009-11-28 23:53:28','2009-11-28 23:53:28',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (170,NULL,3,22,1,'How to run one Test::Unit test case from vim','how-to-run-one-test-unit-test-case-from-vim','','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large Test::Unit suite and I missed being able to execute one testcase from within vim.  I finally got around to coding it.  HItting `!s` will execute the current testcase based on the cursor\'s position.  Hitting `!S` will run all the cases in the file.  It\'s intelligent about whether you\'re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you\'re in an `sbt` project.)\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','','<p>I recently updated my vim script for <a href=\"http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim\">running rspec specs from vim</a>.</p>\n\n\n	<p>I&#8217;ve been working on a project that has a large Test::Unit suite and I missed being able to execute one testcase from within vim.  I finally got around to coding it.  HItting `!s` will execute the current testcase based on the cursor&#8217;s position.  Hitting `!S` will run all the cases in the file.  It&#8217;s intelligent about whether you&#8217;re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you&#8217;re in an `sbt` project.)</p>\n\n\n<div style=\"font-size:10px;\">\n\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n\n      </div>\n\n</div>\n\n</div>','2009-11-28 23:54:03','2009-11-28 23:54:03',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (171,NULL,4,22,1,'How to run one Test::Unit test case from vim','how-to-run-one-test-unit-test-case-from-vim','','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large `Test::Unit` test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting `!s` will execute the current testcase based on the cursor\'s position.  Hitting `!S` will run all the cases in the file.  It\'s intelligent about whether you\'re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you\'re in an `sbt` project.)\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','','<p>I recently updated my vim script for <a href=\"http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim\">running rspec specs from vim</a>.</p>\n\n\n	<p>I&#8217;ve been working on a project that has a large `Test::Unit` test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting `!s` will execute the current testcase based on the cursor&#8217;s position.  Hitting `!S` will run all the cases in the file.  It&#8217;s intelligent about whether you&#8217;re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you&#8217;re in an `sbt` project.)</p>\n\n\n<div style=\"font-size:10px;\">\n\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n\n      </div>\n\n</div>\n\n</div>','2009-11-28 23:55:46','2009-11-28 23:55:46',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (172,NULL,5,22,1,'How to run one Test::Unit test case from vim','how-to-run-one-test-unit-test-case-from-vim','','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large @Test::Unit@ test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting @!s@ will execute the current testcase based on the cursor\'s position.  Hitting @!S@ will run all the cases in the file.  It\'s intelligent about whether you\'re in a @Test::Unit@ file or an @rspec@ file.  (It will also run your scala specs if you\'re in an @sbt@ project.)\r\n\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','','<p>I recently updated my vim script for <a href=\"http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim\">running rspec specs from vim</a>.</p>\n\n\n	<p>I&#8217;ve been working on a project that has a large <code>Test::Unit</code> test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting <code>!s</code> will execute the current testcase based on the cursor&#8217;s position.  Hitting <code>!S</code> will run all the cases in the file.  It&#8217;s intelligent about whether you&#8217;re in a <code>Test::Unit</code> file or an <code>rspec</code> file.  (It will also run your scala specs if you&#8217;re in an <code>sbt</code> project.)</p>\n\n\n<div style=\"font-size:10px;\">\n\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n\n      </div>\n\n</div>\n\n</div>','2009-11-28 23:56:39','2009-11-28 23:56:39',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (173,NULL,6,22,1,'How to run one Test::Unit test case from vim','how-to-run-one-test-unit-test-case-from-vim','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large @Test::Unit@ test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting @!s@ will execute the current testcase based on the cursor\'s position.  Hitting @!S@ will run all the cases in the file.  It\'s intelligent about whether you\'re in a @Test::Unit@ file or an @rspec@ file.  (It will also run your scala specs if you\'re in an \"@sbt@\":http://code.google.com/p/simple-build-tool/ project.)\r\n\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','<p>I recently updated my vim script for <a href=\"http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim\">running rspec specs from vim</a>.</p>','<p>I recently updated my vim script for <a href=\"http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim\">running rspec specs from vim</a>.</p>\n\n\n	<p>I&#8217;ve been working on a project that has a large <code>Test::Unit</code> test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting <code>!s</code> will execute the current testcase based on the cursor&#8217;s position.  Hitting <code>!S</code> will run all the cases in the file.  It&#8217;s intelligent about whether you&#8217;re in a <code>Test::Unit</code> file or an <code>rspec</code> file.  (It will also run your scala specs if you&#8217;re in an <a href=\"http://code.google.com/p/simple-build-tool/\"><code>sbt</code></a> project.)</p>\n\n\n<div style=\"font-size:10px;\">\n\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n\n      </div>\n\n</div>\n\n</div>','2009-11-29 02:41:47','2009-11-29 02:41:47','2009-11-28 23:56:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (174,NULL,1,23,1,'Poor Man\'s Notification System','poor-man-s-notification-system','','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb ; echo \"Oh crap! Your long running script isn\'t running\" | mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>','','<p>This is the easiest way to have a long running script, running in a <a href=\"http://en.wikipedia.org/wiki/GNU_Screen\">screen</a> session notify you when it finishes (or when it totally craps out.)</p>\n\n\n<pre><code class=\"bash\">\n$ ./long-running-script.rb ; echo \"Oh crap! Your long running script isn\'t running\" | mail -s \"Your thing died\" sam@drasticcode.com\n</code></pre>','2010-04-22 04:28:04','2010-04-22 04:28:04',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (175,NULL,2,23,1,'Poor Man\'s Notification System','poor-man-s-notification-system','','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n> echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n> mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.','','<p>This is the easiest way to have a long running script, running in a <a href=\"http://en.wikipedia.org/wiki/GNU_Screen\">screen</a> session notify you when it finishes (or when it totally craps out.)</p>\n\n\n<pre><code class=\"bash\">\n$ ./long-running-script.rb; \\\n&gt; echo \"Oh crap! Your long running script isn\'t running\" | \\\n&gt; mail -s \"Your thing died\" sam@drasticcode.com\n</code></pre>\n\n	<p>Run it as a one-liner and stop compulsively checking on it.</p>','2010-04-22 04:31:43','2010-04-22 04:31:43',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (176,NULL,3,23,1,'Poor Man\'s Notification System','poor-man-s-notification-system','','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n  mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.\r\n\r\nIf you don\'t have a \"mail\":http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1 command you can install mailutils on Ubuntu.\r\n\r\n<pre><code class=\"bash\">\r\n$ sudo apt-get install mailutils\r\n</code></pre>','','<p>This is the easiest way to have a long running script, running in a <a href=\"http://en.wikipedia.org/wiki/GNU_Screen\">screen</a> session notify you when it finishes (or when it totally craps out.)</p>\n\n\n<pre><code class=\"bash\">\n$ ./long-running-script.rb; \\\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\n  mail -s \"Your thing died\" sam@drasticcode.com\n</code></pre>\n\n	<p>Run it as a one-liner and stop compulsively checking on it.</p>\n\n\n	<p>If you don&#8217;t have a <a href=\"http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1\">mail</a> command you can install mailutils on Ubuntu.</p>\n\n\n<pre><code class=\"bash\">\n$ sudo apt-get install mailutils\n</code></pre>','2010-04-22 04:44:51','2010-04-22 04:44:51',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (177,NULL,4,23,1,'Poor Man\'s Notification System','poor-man-s-notification-system','','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n  mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.\r\n\r\nIf you don\'t have a \"mail\":http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1 command you can install `mailutils` on Ubuntu.\r\n\r\n<pre><code class=\"bash\">\r\n$ sudo apt-get install mailutils\r\n</code></pre>','','<p>This is the easiest way to have a long running script, running in a <a href=\"http://en.wikipedia.org/wiki/GNU_Screen\">screen</a> session notify you when it finishes (or when it totally craps out.)</p>\n\n\n<pre><code class=\"bash\">\n$ ./long-running-script.rb; \\\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\n  mail -s \"Your thing died\" sam@drasticcode.com\n</code></pre>\n\n	<p>Run it as a one-liner and stop compulsively checking on it.</p>\n\n\n	<p>If you don&#8217;t have a <a href=\"http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1\">mail</a> command you can install `mailutils` on Ubuntu.</p>\n\n\n<pre><code class=\"bash\">\n$ sudo apt-get install mailutils\n</code></pre>','2010-04-22 04:52:08','2010-04-22 04:52:08',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (178,NULL,5,23,1,'Poor Man\'s Notification System','poor-man-s-notification-system','','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n  mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.\r\n\r\nIf you don\'t have a \"mail\":http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1 command you can install @mailutils@ on Ubuntu.\r\n\r\n<pre><code class=\"bash\">\r\n$ sudo apt-get install mailutils\r\n</code></pre>','','<p>This is the easiest way to have a long running script, running in a <a href=\"http://en.wikipedia.org/wiki/GNU_Screen\">screen</a> session notify you when it finishes (or when it totally craps out.)</p>\n\n\n<pre><code class=\"bash\">\n$ ./long-running-script.rb; \\\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\n  mail -s \"Your thing died\" sam@drasticcode.com\n</code></pre>\n\n	<p>Run it as a one-liner and stop compulsively checking on it.</p>\n\n\n	<p>If you don&#8217;t have a <a href=\"http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1\">mail</a> command you can install <code>mailutils</code> on Ubuntu.</p>\n\n\n<pre><code class=\"bash\">\n$ sudo apt-get install mailutils\n</code></pre>','2010-04-22 04:55:54','2010-04-22 04:55:54',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (179,NULL,1,33,1,'Android Developers, Don\'t Show Me Buttons That Ask For Money','android-developers-don-t-show-me-buttons-that-ask-for-money','','','','','2010-06-26 05:34:24','2010-06-26 05:34:24',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (180,NULL,1,34,1,'Wiff.me - A website differ','wiff-me-a-website-differ','','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I hacked together a tiny web application that will run the content of any two web pages through a diffing tool and drank a couple Super Dog IPAs.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say, *\"wiff.me\":http://wiff.me* I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Replace any single quotes in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','','<p>The other night at <a href=\"http://twitter.com/NoPoCoNi\">nopoconi</a> I hacked together a tiny web application that will run the content of any two web pages through a diffing tool and drank a couple Super Dog IPAs.  It&#8217;s up on <strong><a href=\"http://wiff.me\">wiff.me</a></strong>.</p>\n\n\n	<p>In the process I also discovered this crazy bash command that will pipe two web requests as inputs through <code>diff</code> using subshells.  It&#8217;s kind of an insane one-liner.</p>\n\n\n<pre class=\"bash\">\n<code>\ndiff &lt;(curl \'drasticcode.com\') &lt;(curl \'www.drasticcode.com\')\n</code>\n</pre>\n\n	<p>Needless to say, <strong><a href=\"http://wiff.me\">wiff.me</a></strong> I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  <a href=\"http://twitter.com/donpdonp\">@donpdonp</a> taught me how to sanitize the user provided data in the bash command.  Replace any single quotes in the user provided urls with two single quotes.  I still ended up using <a href=\"http://www.sinatrarb.com/\">Sinatra</a> and <a href=\"http://curb.rubyforge.org/\">Curb</a>.</p>','2010-06-26 06:06:55','2010-06-26 06:06:55',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (181,NULL,2,34,1,'Wiff.me - A website differ','wiff-me-a-website-differ','','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Just replace any single quotes in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','','<p>The other night at <a href=\"http://twitter.com/NoPoCoNi\">nopoconi</a> I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It&#8217;s up on <strong><a href=\"http://wiff.me\">wiff.me</a></strong>.</p>\n\n\n	<p>In the process I also discovered this crazy bash command that will pipe two web requests as inputs through <code>diff</code> using subshells.  It&#8217;s kind of an insane one-liner.</p>\n\n\n<pre class=\"bash\">\n<code>\ndiff &lt;(curl \'drasticcode.com\') &lt;(curl \'www.drasticcode.com\')\n</code>\n</pre>\n\n	<p>Needless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  <a href=\"http://twitter.com/donpdonp\">@donpdonp</a> taught me how to sanitize the user provided data in the bash command.  Just replace any single quotes in the user provided urls with two single quotes.  I still ended up using <a href=\"http://www.sinatrarb.com/\">Sinatra</a> and <a href=\"http://curb.rubyforge.org/\">Curb</a>.</p>','2010-06-26 06:08:55','2010-06-26 06:08:55',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (182,NULL,3,34,1,'Wiff.me - A website differ','wiff-me-a-website-differ','','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Just \"replace any single quotes\":http://unixsupremacy.tribe.net/thread/0d8d161d-60b1-480b-bf29-0acd5835a392 in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','','<p>The other night at <a href=\"http://twitter.com/NoPoCoNi\">nopoconi</a> I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It&#8217;s up on <strong><a href=\"http://wiff.me\">wiff.me</a></strong>.</p>\n\n\n	<p>In the process I also discovered this crazy bash command that will pipe two web requests as inputs through <code>diff</code> using subshells.  It&#8217;s kind of an insane one-liner.</p>\n\n\n<pre class=\"bash\">\n<code>\ndiff &lt;(curl \'drasticcode.com\') &lt;(curl \'www.drasticcode.com\')\n</code>\n</pre>\n\n	<p>Needless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  <a href=\"http://twitter.com/donpdonp\">@donpdonp</a> taught me how to sanitize the user provided data in the bash command.  Just <a href=\"http://unixsupremacy.tribe.net/thread/0d8d161d-60b1-480b-bf29-0acd5835a392\">replace any single quotes</a> in the user provided urls with two single quotes.  I still ended up using <a href=\"http://www.sinatrarb.com/\">Sinatra</a> and <a href=\"http://curb.rubyforge.org/\">Curb</a>.</p>','2010-06-26 06:18:41','2010-06-26 06:18:41','2010-06-26 06:08:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (183,NULL,4,34,1,'Wiff.me - A website differ','wiff-me-a-website-differ','','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Just \"replace any single quotes\":http://unixsupremacy.tribe.net/thread/0d8d161d-60b1-480b-bf29-0acd5835a392#1b9a92ca-c284-4bb2-b131-7d725de05a86 in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','','<p>The other night at <a href=\"http://twitter.com/NoPoCoNi\">nopoconi</a> I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It&#8217;s up on <strong><a href=\"http://wiff.me\">wiff.me</a></strong>.</p>\n\n\n	<p>In the process I also discovered this crazy bash command that will pipe two web requests as inputs through <code>diff</code> using subshells.  It&#8217;s kind of an insane one-liner.</p>\n\n\n<pre class=\"bash\">\n<code>\ndiff &lt;(curl \'drasticcode.com\') &lt;(curl \'www.drasticcode.com\')\n</code>\n</pre>\n\n	<p>Needless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  <a href=\"http://twitter.com/donpdonp\">@donpdonp</a> taught me how to sanitize the user provided data in the bash command.  Just <a href=\"http://unixsupremacy.tribe.net/thread/0d8d161d-60b1-480b-bf29-0acd5835a392#1b9a92ca-c284-4bb2-b131-7d725de05a86\">replace any single quotes</a> in the user provided urls with two single quotes.  I still ended up using <a href=\"http://www.sinatrarb.com/\">Sinatra</a> and <a href=\"http://curb.rubyforge.org/\">Curb</a>.</p>','2010-06-26 06:20:08','2010-06-26 06:20:08','2010-06-26 06:08:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (184,NULL,1,35,1,'Setting up a Macbook to dual boot into Ubuntu and OS X','setting-up-a-macbook-to-dual-boot-into-ubuntu-and-os-x','Recently I switched from using OS X on my development laptop (a macbook pro) to Ubuntu.  There were a few reasons I was interested in making the switch, such as access to a decent package manager, and better versions of Unix utilities like top and strace.\r\n\r\nI set up my laptop to dual boot into Ubuntu or OS X.  So far I\'ve been using Ubuntu full time for a few weeks and am happy with the results.\r\n\r\nHere\'s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind YMMV.','Recently I switched from using OS X on my development laptop (a macbook pro) to Ubuntu.  There were a few reasons I was interested in making the switch, such as access to a decent package manager, and better versions of Unix utilities like top and strace.\r\n\r\nI set up my laptop to dual boot into Ubuntu or OS X.  So far I\'ve been using Ubuntu full time for a few weeks and am happy with the results.\r\n\r\nHere\'s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind YMMV.\r\n\r\nh3. Backup\r\n\r\nMake a backup of your system.  This wasn\'t necessary in my case (in hindsight), but the experts will tell you that having a backup is a great way to CYA.  Super Duper is a handy OS X utility that will make a bootable backup of your entire hard drive.  Definitely do this before moving forward.\r\n\r\nh3. Partition your hard disk\r\n\r\nI opened Disk Utility (in the Applications > Utilities folder) and partitioned my main hard disk partion into two equal parts.  In my case I have a 500Gb HD and was using less than half of it, so it wasn\'t necessary to clear up any space.  I was able to do this successfully without data loss.\r\n\r\nh3. Download Ubuntu\r\n\r\nI downloaded the 64 bit version of Ubuntu 10.04 from ubuntu.com, and burned this to a CD using Disk Utility.  It may save you some headaches down the line to install the 32 bit version, but I wanted 64 bit.\r\n\r\nh3. Install Ubuntu\r\n\r\nRestart your macbook with the Ubuntu install disk in the CD drive.  Hold the ALT key as you restart, and choose to boot from the \"Windows\" CD.  Follow the prompts to intall Ubuntu.\r\n\r\nWhen asked about disk partitions choose to *specify partions manually*.  I choose to install the boot partition on @/dev/sda3@ (the partition I just created.), and chose to use @/dev/sda4@ for swap.  *Be careful here not to install over your OS X partition* (possibly @/dev/sda2@), and hose your OS X system.\r\n\r\nEnter a username and password, and complete the installation process.\r\n\r\nh3. Booting into Ubuntu\r\n\r\nOnce Ubuntu is installed you can boot into it by restarting, holding the ALT key, and choosing to boot into \"Windows\".\r\n\r\nh3. Getting things set up nicely\r\n\r\nOnce you\'re in Ubuntu you\'ll want to set up wireless networking and several other things.  You can figure out which specific macbook you have by running @sudo dmidecode -s system-product-name@.  In my case I own a MacBookPro5,3.  Each macbook/Ubuntu version combo has its own wiki, which is very valuable at this stage.  For example \"https://help.ubuntu.com/community/MacBookPro5-3/Karmic\":https://help.ubuntu.com/community/MacBookPro5-3/Karmic\r\n\r\nh3. Getting wireless networking to work\r\n\r\nConnect to the internet using an ethernet cable and run @sudo apt-get bcmwl-kernel-source@.  Restart, and bam, you\'re wireless.\r\n\r\nh3. Touchpad\r\n\r\nIn the gnome main menu @System > Preferences > Mouse > Touchpad@.\r\n\r\nh3. Sound\r\n\r\nJust turn up the volume.  This took a minute to figure out.\r\n\r\nh3. Accessing your OS X partition and data\r\n\r\nYou can mount your OS X partion and access the data on it from Ubuntu.\r\n\r\nFirst edit @/etc/fstab@ and add a line similar to this:\r\n\r\n    /dev/sda2   /mnt/macHD      auto    defaults        0       1\r\n\r\nMake sure that you select the right device (@/dev/sdaxxx@) that contains your OS X installation, and the the mount point (@/mnt/macHD@) is an existing directory.\r\n\r\nThen run @sudo mount -t auto /dev/sda2 /mnt/macHD@\r\n\r\nYou should be able to access your OS X data from the @/mnt/macHD@ directory.\r\n','<p>Recently I switched from using <span class=\"caps\">OS X</span> on my development laptop (a macbook pro) to Ubuntu.  There were a few reasons I was interested in making the switch, such as access to a decent package manager, and better versions of Unix utilities like top and strace.</p>\n\n\n	<p>I set up my laptop to dual boot into Ubuntu or <span class=\"caps\">OS X</span>.  So far I&#8217;ve been using Ubuntu full time for a few weeks and am happy with the results.</p>\n\n\n	<p>Here&#8217;s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind <span class=\"caps\">YMMV</span>.</p>','<p>Recently I switched from using <span class=\"caps\">OS X</span> on my development laptop (a macbook pro) to Ubuntu.  There were a few reasons I was interested in making the switch, such as access to a decent package manager, and better versions of Unix utilities like top and strace.</p>\n\n\n	<p>I set up my laptop to dual boot into Ubuntu or <span class=\"caps\">OS X</span>.  So far I&#8217;ve been using Ubuntu full time for a few weeks and am happy with the results.</p>\n\n\n	<p>Here&#8217;s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind <span class=\"caps\">YMMV</span>.</p>\n\n\n	<h3>Backup</h3>\n\n\n	<p>Make a backup of your system.  This wasn&#8217;t necessary in my case (in hindsight), but the experts will tell you that having a backup is a great way to <span class=\"caps\">CYA</span>.  Super Duper is a handy <span class=\"caps\">OS X</span> utility that will make a bootable backup of your entire hard drive.  Definitely do this before moving forward.</p>\n\n\n	<h3>Partition your hard disk</h3>\n\n\n	<p>I opened Disk Utility (in the Applications &gt; Utilities folder) and partitioned my main hard disk partion into two equal parts.  In my case I have a 500Gb HD and was using less than half of it, so it wasn&#8217;t necessary to clear up any space.  I was able to do this successfully without data loss.</p>\n\n\n	<h3>Download Ubuntu</h3>\n\n\n	<p>I downloaded the 64 bit version of Ubuntu 10.04 from ubuntu.com, and burned this to a CD using Disk Utility.  It may save you some headaches down the line to install the 32 bit version, but I wanted 64 bit.</p>\n\n\n	<h3>Install Ubuntu</h3>\n\n\n	<p>Restart your macbook with the Ubuntu install disk in the CD drive.  Hold the <span class=\"caps\">ALT</span> key as you restart, and choose to boot from the &#8220;Windows&#8221; CD.  Follow the prompts to intall Ubuntu.</p>\n\n\n	<p>When asked about disk partitions choose to <strong>specify partions manually</strong>.  I choose to install the boot partition on <code>/dev/sda3</code> (the partition I just created.), and chose to use <code>/dev/sda4</code> for swap.  <strong>Be careful here not to install over your <span class=\"caps\">OS X</span> partition</strong> (possibly <code>/dev/sda2</code>), and hose your <span class=\"caps\">OS X</span> system.</p>\n\n\n	<p>Enter a username and password, and complete the installation process.</p>\n\n\n	<h3>Booting into Ubuntu</h3>\n\n\n	<p>Once Ubuntu is installed you can boot into it by restarting, holding the <span class=\"caps\">ALT</span> key, and choosing to boot into &#8220;Windows&#8221;.</p>\n\n\n	<h3>Getting things set up nicely</h3>\n\n\n	<p>Once you&#8217;re in Ubuntu you&#8217;ll want to set up wireless networking and several other things.  You can figure out which specific macbook you have by running <code>sudo dmidecode -s system-product-name</code>.  In my case I own a MacBookPro5,3.  Each macbook/Ubuntu version combo has its own wiki, which is very valuable at this stage.  For example <a href=\"https://help.ubuntu.com/community/MacBookPro5-3/Karmic\">https://help.ubuntu.com/community/MacBookPro5-3/Karmic</a></p>\n\n\n	<h3>Getting wireless networking to work</h3>\n\n\n	<p>Connect to the internet using an ethernet cable and run <code>sudo apt-get bcmwl-kernel-source</code>.  Restart, and bam, you&#8217;re wireless.</p>\n\n\n	<h3>Touchpad</h3>\n\n\n	<p>In the gnome main menu <code>System &gt; Preferences &gt; Mouse &gt; Touchpad</code>.</p>\n\n\n	<h3>Sound</h3>\n\n\n	<p>Just turn up the volume.  This took a minute to figure out.</p>\n\n\n	<h3>Accessing your <span class=\"caps\">OS X</span> partition and data</h3>\n\n\n	<p>You can mount your <span class=\"caps\">OS X</span> partion and access the data on it from Ubuntu.</p>\n\n\n	<p>First edit <code>/etc/fstab</code> and add a line similar to this:</p>\n\n\n	<pre><code>/dev/sda2   /mnt/macHD      auto    defaults        0       1</code></pre>\n\n\n	<p>Make sure that you select the right device (<code>/dev/sdaxxx</code>) that contains your <span class=\"caps\">OS X</span> installation, and the the mount point (<code>/mnt/macHD</code>) is an existing directory.</p>\n\n\n	<p>Then run <code>sudo mount -t auto /dev/sda2 /mnt/macHD</code></p>\n\n\n	<p>You should be able to access your <span class=\"caps\">OS X</span> data from the <code>/mnt/macHD</code> directory.</p>','2010-09-15 05:29:31','2010-09-15 05:29:31',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (186,NULL,2,36,1,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx','','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the text\r\n_:follow_external_links: true_, and if found stores whether it was found as a\r\ntrue/false attribute in the search index.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>\n\n\n	<p>There is a major disadvantage to this approach though.  Since Sphinx is\ntalking directly to the database, you can&#8217;t index the results of method calls\non your ruby objects.  I&#8217;ve discovered though that this is not nearly as\nlimiting as it may sound, since you <strong>can</strong> index the results of <span class=\"caps\">SQL</span> functions.\nEven better, manipulating and transforming your data with <span class=\"caps\">SQL</span> functions as you\nindex it, is <strong>virtually free</strong>.  I haven&#8217;t noticed any impact on our index\ntimes, after adding many functions to our indexing process.</p>\n\n\n	<p>Here are a couple real examples.</p>\n\n\n	<p>In our app, we deal a lot with domain names, and websites.  One feature of our\nsearch displays domain names that match your query.  Our stakeholders wanted\nthese to be sorted by the importance of the tld, with <code>.com</code> at the top,\nfollowed by <code>.org</code>, <code>.gov</code>, etc. Since this sort order is basically arbitrary\nI replace each tld with an integer, using mySQL&#8217;s <code>REPLACE</code> function, store\nthis attribute in Sphinx, and sort on it when querying.</p>\n\n\nThis is what it looks like in Thinking Sphinx&#8217;s <code>define_index</code> block:\n<pre><code class=\"ruby\">\n  define_index do\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\n    # Useful in \"exact domain match\" search\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\" \n    has replace_str, :as =&gt; :page_title_sortable_by_tld, :type =&gt; :string\n</code></pre>\n\n	<p>It&#8217;s not pretty, but it&#8217;s far prettier than trying to do this in ruby, at\nquery time.  Now we just add an <code>:order =&gt; \"page_title_sortable_by_tld ASC\"</code> to\nour calls to <code>Page.search</code>.</p>\n\n\nAnother place we use this is to convert a flag stored in a serialized <span class=\"caps\">YAML</span> structure\ninto a boolean attribute that Sphinx can sort on and filter by.\n<pre><code class=\"ruby\">\n    # Allow favoring in search results based on whether a page is\n    # \"pro_followed\" (i.e. it has its external links followed).\n    #\n    # Since this data is stored in a serialized YAML structure we need some SQL\n    # function fanciness to access this data as a boolean value.  If the below\n    # YAML key value appear in the text field LOCATE will return an integer\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\n    # \"&gt; 0\") allows sphinx to interpret this as a boolean value.\n    join page_data_latest.page_datum\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) &gt; 0\',\n      :as =&gt; :pro_followed, :type =&gt; :boolean\n</code></pre>\n\n	<p>This code searches a field in the database for the text\n<em cite=\"f\">ollow_external_links: true</em>, and if found stores whether it was found as a\ntrue/false attribute in the search index.</p>\n\n\n	<p>This has proved to be a very useful technique for us, and is far easier and\nmore efficient than denormalizing some of our data to a &#8220;search text&#8221; column,\nor doing a bunch of post-querying processing within Ruby on Rails.</p>','2010-10-13 14:40:33','2010-10-13 14:40:33',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (187,NULL,3,36,1,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx','','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the some literal YAML text,\r\n and if found stores whether it was found as a\r\ntrue/false attribute in the search index.  This is way easier than deserializing \r\nthe YAML and storing this value in a boolean field in mySQL.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>\n\n\n	<p>There is a major disadvantage to this approach though.  Since Sphinx is\ntalking directly to the database, you can&#8217;t index the results of method calls\non your ruby objects.  I&#8217;ve discovered though that this is not nearly as\nlimiting as it may sound, since you <strong>can</strong> index the results of <span class=\"caps\">SQL</span> functions.\nEven better, manipulating and transforming your data with <span class=\"caps\">SQL</span> functions as you\nindex it, is <strong>virtually free</strong>.  I haven&#8217;t noticed any impact on our index\ntimes, after adding many functions to our indexing process.</p>\n\n\n	<p>Here are a couple real examples.</p>\n\n\n	<p>In our app, we deal a lot with domain names, and websites.  One feature of our\nsearch displays domain names that match your query.  Our stakeholders wanted\nthese to be sorted by the importance of the tld, with <code>.com</code> at the top,\nfollowed by <code>.org</code>, <code>.gov</code>, etc. Since this sort order is basically arbitrary\nI replace each tld with an integer, using mySQL&#8217;s <code>REPLACE</code> function, store\nthis attribute in Sphinx, and sort on it when querying.</p>\n\n\nThis is what it looks like in Thinking Sphinx&#8217;s <code>define_index</code> block:\n<pre><code class=\"ruby\">\n  define_index do\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\n    # Useful in \"exact domain match\" search\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\" \n    has replace_str, :as =&gt; :page_title_sortable_by_tld, :type =&gt; :string\n</code></pre>\n\n	<p>It&#8217;s not pretty, but it&#8217;s far prettier than trying to do this in ruby, at\nquery time.  Now we just add an <code>:order =&gt; \"page_title_sortable_by_tld ASC\"</code> to\nour calls to <code>Page.search</code>.</p>\n\n\nAnother place we use this is to convert a flag stored in a serialized <span class=\"caps\">YAML</span> structure\ninto a boolean attribute that Sphinx can sort on and filter by.\n<pre><code class=\"ruby\">\n    # Allow favoring in search results based on whether a page is\n    # \"pro_followed\" (i.e. it has its external links followed).\n    #\n    # Since this data is stored in a serialized YAML structure we need some SQL\n    # function fanciness to access this data as a boolean value.  If the below\n    # YAML key value appear in the text field LOCATE will return an integer\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\n    # \"&gt; 0\") allows sphinx to interpret this as a boolean value.\n    join page_data_latest.page_datum\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) &gt; 0\',\n      :as =&gt; :pro_followed, :type =&gt; :boolean\n</code></pre>\n\n	<p>This code searches a field in the database for the some literal <span class=\"caps\">YAML</span> text,\n and if found stores whether it was found as a\ntrue/false attribute in the search index.  This is way easier than deserializing \nthe <span class=\"caps\">YAML</span> and storing this value in a boolean field in mySQL.</p>\n\n\n	<p>This has proved to be a very useful technique for us, and is far easier and\nmore efficient than denormalizing some of our data to a &#8220;search text&#8221; column,\nor doing a bunch of post-querying processing within Ruby on Rails.</p>','2010-10-13 14:42:20','2010-10-13 14:42:20',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (188,NULL,4,36,1,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx','','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the some literal YAML text,\r\n and stores whether it was found as a\r\ntrue/false attribute in the search index.  This is way easier than deserializing \r\nthe YAML and storing this value in a boolean field in mySQL.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>\n\n\n	<p>There is a major disadvantage to this approach though.  Since Sphinx is\ntalking directly to the database, you can&#8217;t index the results of method calls\non your ruby objects.  I&#8217;ve discovered though that this is not nearly as\nlimiting as it may sound, since you <strong>can</strong> index the results of <span class=\"caps\">SQL</span> functions.\nEven better, manipulating and transforming your data with <span class=\"caps\">SQL</span> functions as you\nindex it, is <strong>virtually free</strong>.  I haven&#8217;t noticed any impact on our index\ntimes, after adding many functions to our indexing process.</p>\n\n\n	<p>Here are a couple real examples.</p>\n\n\n	<p>In our app, we deal a lot with domain names, and websites.  One feature of our\nsearch displays domain names that match your query.  Our stakeholders wanted\nthese to be sorted by the importance of the tld, with <code>.com</code> at the top,\nfollowed by <code>.org</code>, <code>.gov</code>, etc. Since this sort order is basically arbitrary\nI replace each tld with an integer, using mySQL&#8217;s <code>REPLACE</code> function, store\nthis attribute in Sphinx, and sort on it when querying.</p>\n\n\nThis is what it looks like in Thinking Sphinx&#8217;s <code>define_index</code> block:\n<pre><code class=\"ruby\">\n  define_index do\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\n    # Useful in \"exact domain match\" search\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\" \n    has replace_str, :as =&gt; :page_title_sortable_by_tld, :type =&gt; :string\n</code></pre>\n\n	<p>It&#8217;s not pretty, but it&#8217;s far prettier than trying to do this in ruby, at\nquery time.  Now we just add an <code>:order =&gt; \"page_title_sortable_by_tld ASC\"</code> to\nour calls to <code>Page.search</code>.</p>\n\n\nAnother place we use this is to convert a flag stored in a serialized <span class=\"caps\">YAML</span> structure\ninto a boolean attribute that Sphinx can sort on and filter by.\n<pre><code class=\"ruby\">\n    # Allow favoring in search results based on whether a page is\n    # \"pro_followed\" (i.e. it has its external links followed).\n    #\n    # Since this data is stored in a serialized YAML structure we need some SQL\n    # function fanciness to access this data as a boolean value.  If the below\n    # YAML key value appear in the text field LOCATE will return an integer\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\n    # \"&gt; 0\") allows sphinx to interpret this as a boolean value.\n    join page_data_latest.page_datum\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) &gt; 0\',\n      :as =&gt; :pro_followed, :type =&gt; :boolean\n</code></pre>\n\n	<p>This code searches a field in the database for the some literal <span class=\"caps\">YAML</span> text,\n and stores whether it was found as a\ntrue/false attribute in the search index.  This is way easier than deserializing \nthe <span class=\"caps\">YAML</span> and storing this value in a boolean field in mySQL.</p>\n\n\n	<p>This has proved to be a very useful technique for us, and is far easier and\nmore efficient than denormalizing some of our data to a &#8220;search text&#8221; column,\nor doing a bunch of post-querying processing within Ruby on Rails.</p>','2010-10-13 14:45:04','2010-10-13 14:45:04','2010-10-13 14:42:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (189,NULL,5,36,1,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the some literal YAML text,\r\n and stores whether it was found as a\r\ntrue/false attribute in the search index.  This is way easier than deserializing \r\nthe YAML and storing this value in a boolean field in mySQL.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>\n\n\n	<p>There is a major disadvantage to this approach though.  Since Sphinx is\ntalking directly to the database, you can&#8217;t index the results of method calls\non your ruby objects.  I&#8217;ve discovered though that this is not nearly as\nlimiting as it may sound, since you <strong>can</strong> index the results of <span class=\"caps\">SQL</span> functions.\nEven better, manipulating and transforming your data with <span class=\"caps\">SQL</span> functions as you\nindex it, is <strong>virtually free</strong>.  I haven&#8217;t noticed any impact on our index\ntimes, after adding many functions to our indexing process.</p>\n\n\n	<p>Here are a couple real examples.</p>\n\n\n	<p>In our app, we deal a lot with domain names, and websites.  One feature of our\nsearch displays domain names that match your query.  Our stakeholders wanted\nthese to be sorted by the importance of the tld, with <code>.com</code> at the top,\nfollowed by <code>.org</code>, <code>.gov</code>, etc. Since this sort order is basically arbitrary\nI replace each tld with an integer, using mySQL&#8217;s <code>REPLACE</code> function, store\nthis attribute in Sphinx, and sort on it when querying.</p>\n\n\nThis is what it looks like in Thinking Sphinx&#8217;s <code>define_index</code> block:\n<pre><code class=\"ruby\">\n  define_index do\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\n    # Useful in \"exact domain match\" search\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\" \n    has replace_str, :as =&gt; :page_title_sortable_by_tld, :type =&gt; :string\n</code></pre>\n\n	<p>It&#8217;s not pretty, but it&#8217;s far prettier than trying to do this in ruby, at\nquery time.  Now we just add an <code>:order =&gt; \"page_title_sortable_by_tld ASC\"</code> to\nour calls to <code>Page.search</code>.</p>\n\n\nAnother place we use this is to convert a flag stored in a serialized <span class=\"caps\">YAML</span> structure\ninto a boolean attribute that Sphinx can sort on and filter by.\n<pre><code class=\"ruby\">\n    # Allow favoring in search results based on whether a page is\n    # \"pro_followed\" (i.e. it has its external links followed).\n    #\n    # Since this data is stored in a serialized YAML structure we need some SQL\n    # function fanciness to access this data as a boolean value.  If the below\n    # YAML key value appear in the text field LOCATE will return an integer\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\n    # \"&gt; 0\") allows sphinx to interpret this as a boolean value.\n    join page_data_latest.page_datum\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) &gt; 0\',\n      :as =&gt; :pro_followed, :type =&gt; :boolean\n</code></pre>\n\n	<p>This code searches a field in the database for the some literal <span class=\"caps\">YAML</span> text,\n and stores whether it was found as a\ntrue/false attribute in the search index.  This is way easier than deserializing \nthe <span class=\"caps\">YAML</span> and storing this value in a boolean field in mySQL.</p>\n\n\n	<p>This has proved to be a very useful technique for us, and is far easier and\nmore efficient than denormalizing some of our data to a &#8220;search text&#8221; column,\nor doing a bunch of post-querying processing within Ruby on Rails.</p>','2010-10-13 14:46:13','2010-10-13 14:46:13','2010-10-13 14:42:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (190,NULL,6,36,1,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n  end\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n  end\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the some literal YAML text,\r\n and stores whether it was found as a\r\ntrue/false attribute in the search index.  This is way easier than deserializing \r\nthe YAML and storing this value in a boolean field in mySQL.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>\n\n\n	<p>There is a major disadvantage to this approach though.  Since Sphinx is\ntalking directly to the database, you can&#8217;t index the results of method calls\non your ruby objects.  I&#8217;ve discovered though that this is not nearly as\nlimiting as it may sound, since you <strong>can</strong> index the results of <span class=\"caps\">SQL</span> functions.\nEven better, manipulating and transforming your data with <span class=\"caps\">SQL</span> functions as you\nindex it, is <strong>virtually free</strong>.  I haven&#8217;t noticed any impact on our index\ntimes, after adding many functions to our indexing process.</p>\n\n\n	<p>Here are a couple real examples.</p>\n\n\n	<p>In our app, we deal a lot with domain names, and websites.  One feature of our\nsearch displays domain names that match your query.  Our stakeholders wanted\nthese to be sorted by the importance of the tld, with <code>.com</code> at the top,\nfollowed by <code>.org</code>, <code>.gov</code>, etc. Since this sort order is basically arbitrary\nI replace each tld with an integer, using mySQL&#8217;s <code>REPLACE</code> function, store\nthis attribute in Sphinx, and sort on it when querying.</p>\n\n\nThis is what it looks like in Thinking Sphinx&#8217;s <code>define_index</code> block:\n<pre><code class=\"ruby\">\n  define_index do\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\n    # Useful in \"exact domain match\" search\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\" \n    has replace_str, :as =&gt; :page_title_sortable_by_tld, :type =&gt; :string\n  end\n</code></pre>\n\n	<p>It&#8217;s not pretty, but it&#8217;s far prettier than trying to do this in ruby, at\nquery time.  Now we just add an <code>:order =&gt; \"page_title_sortable_by_tld ASC\"</code> to\nour calls to <code>Page.search</code>.</p>\n\n\nAnother place we use this is to convert a flag stored in a serialized <span class=\"caps\">YAML</span> structure\ninto a boolean attribute that Sphinx can sort on and filter by.\n<pre><code class=\"ruby\">\n  define_index do\n    # Allow favoring in search results based on whether a page is\n    # \"pro_followed\" (i.e. it has its external links followed).\n    #\n    # Since this data is stored in a serialized YAML structure we need some SQL\n    # function fanciness to access this data as a boolean value.  If the below\n    # YAML key value appear in the text field LOCATE will return an integer\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\n    # \"&gt; 0\") allows sphinx to interpret this as a boolean value.\n    join page_data_latest.page_datum\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) &gt; 0\',\n      :as =&gt; :pro_followed, :type =&gt; :boolean\n  end\n</code></pre>\n\n	<p>This code searches a field in the database for the some literal <span class=\"caps\">YAML</span> text,\n and stores whether it was found as a\ntrue/false attribute in the search index.  This is way easier than deserializing \nthe <span class=\"caps\">YAML</span> and storing this value in a boolean field in mySQL.</p>\n\n\n	<p>This has proved to be a very useful technique for us, and is far easier and\nmore efficient than denormalizing some of our data to a &#8220;search text&#8221; column,\nor doing a bunch of post-querying processing within Ruby on Rails.</p>','2010-10-19 00:43:03','2010-10-19 00:43:03','2010-10-13 14:42:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (191,NULL,1,39,1,'Adding Failover and Load Balancing to Thinking Sphinx','adding-failover-and-load-balancing-to-thinking-sphinx','','\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  timeout: 0.5\r\n  mem_limit: 1600M\r\n  address:\r\n  - 10.1.0.42\r\n  - 10.1.0.43\r\n  listen: 0.0.0.0\r\n</code></pre>','','<pre><code class=\"yaml\">production:\n  morphology: stem_en\n  timeout: 0.5\n  mem_limit: 1600M\n  address:\n  - 10.1.0.42\n  - 10.1.0.43\n  listen: 0.0.0.0\n</code></pre>','2010-11-10 04:26:06','2010-11-10 04:26:06',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (192,NULL,2,39,1,'Adding Failover and Load Balancing to Thinking Sphinx','adding-failover-and-load-balancing-to-thinking-sphinx','','I\'ve been working with Thinking Sphinx and Riddle a lot lately.  These are really great for connecting to a Sphinx search server from a rails app; I\'d definitely recommend reading through the source code if you get a chance.  \r\n\r\nAfter we set up \"AboutUs\'s search feature\":http://aboutus.org/search our awesome sysadmin wanted a redundant setup.  He doesn\'t like having to cancel his weekend if a box goes down.  We talked about running and installation of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.\r\n\r\nIt turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to sphinx).\r\n\r\nBasically instead of a @sphinx.yml@ like this:\r\n\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  address: 10.1.0.42\r\n  listen: 0.0.0.0\r\n</code></pre>\r\n\r\nIt looks this:\r\n\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  timeout: 0.5\r\n  address:\r\n  - 10.1.0.42\r\n  - 10.1.0.43\r\n  listen: 0.0.0.0\r\n</code></pre>\r\n\r\nQueries will load balance between multiple servers specified in `address` (it\'s still ok to have just one), and in the event of a failure they\'ll failover to the other servers.  You can also specify a timeout option, and the clients will failover after they\'ve hit it.  (This is good for cases where the server is totally down, to avoid waiting on a TCP timeout of around 30 seconds.)\r\n\r\nThese changes were pulled back into \"ThinkingSphinx\":https://github.com/freelancing-god/thinking-sphinx/commit/5eea57e6329c9bd25b29ebeab535e9c5d291708c  and \"Riddle\":https://github.com/freelancing-god/riddle/pull/12, so they should be available when the next versions of these gems are released.','','<p>I&#8217;ve been working with Thinking Sphinx and Riddle a lot lately.  These are really great for connecting to a Sphinx search server from a rails app; I&#8217;d definitely recommend reading through the source code if you get a chance.</p>\n\n\n	<p>After we set up <a href=\"http://aboutus.org/search\">AboutUs&#8217;s search feature</a> our awesome sysadmin wanted a redundant setup.  He doesn&#8217;t like having to cancel his weekend if a box goes down.  We talked about running and installation of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.</p>\n\n\n	<p>It turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to sphinx).</p>\n\n\n	<p>Basically instead of a <code>sphinx.yml</code> like this:</p>\n\n\n<pre><code class=\"yaml\">production:\n  morphology: stem_en\n  mem_limit: 1600M\n  address: 10.1.0.42\n  listen: 0.0.0.0\n</code></pre>\n\n	<p>It looks this:</p>\n\n\n<pre><code class=\"yaml\">production:\n  morphology: stem_en\n  mem_limit: 1600M\n  timeout: 0.5\n  address:\n  - 10.1.0.42\n  - 10.1.0.43\n  listen: 0.0.0.0\n</code></pre>\n\n	<p>Queries will load balance between multiple servers specified in `address` (it&#8217;s still ok to have just one), and in the event of a failure they&#8217;ll failover to the other servers.  You can also specify a timeout option, and the clients will failover after they&#8217;ve hit it.  (This is good for cases where the server is totally down, to avoid waiting on a <span class=\"caps\">TCP</span> timeout of around 30 seconds.)</p>\n\n\n	<p>These changes were pulled back into <a href=\"https://github.com/freelancing-god/thinking-sphinx/commit/5eea57e6329c9bd25b29ebeab535e9c5d291708c\">ThinkingSphinx</a>  and <a href=\"https://github.com/freelancing-god/riddle/pull/12\">Riddle</a>, so they should be available when the next versions of these gems are released.</p>','2010-11-10 04:44:35','2010-11-10 04:44:35',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (193,NULL,3,39,1,'Adding Failover and Load Balancing to Thinking Sphinx','adding-failover-and-load-balancing-to-thinking-sphinx','After we set up \"AboutUs\'s search feature\":http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx our (awesome) sysadmin wanted a redundant setup.  He doesn\'t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.\r\n\r\nIt turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).\r\n','After we set up \"AboutUs\'s search feature\":http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx our (awesome) sysadmin wanted a redundant setup.  He doesn\'t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.\r\n\r\nIt turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).\r\n\r\nBasically instead of a @sphinx.yml@ like this:\r\n\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  address: 10.1.0.42\r\n  listen: 0.0.0.0\r\n</code></pre>\r\n\r\nIt looks this:\r\n\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  timeout: 0.5\r\n  address:\r\n  - 10.1.0.42\r\n  - 10.1.0.43\r\n  listen: 0.0.0.0\r\n</code></pre>\r\n\r\nQueries will load balance between the multiple servers specified in @address@ (it\'s still ok to have just one), and in the event of a failure they\'ll failover to the other servers.  You can also specify a timeout option, and the clients will failover after they\'ve hit it.  (This is good for cases where the server is totally down, to avoid waiting on a TCP timeout of around 30 seconds.)\r\n\r\nThese changes were pulled back into \"ThinkingSphinx\":https://github.com/freelancing-god/thinking-sphinx/commit/5eea57e6329c9bd25b29ebeab535e9c5d291708c  and \"Riddle\":https://github.com/freelancing-god/riddle/pull/12, so they should be available when the next versions of these gems are released.','<p>After we set up <a href=\"http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx\">AboutUs&#8217;s search feature</a> our (awesome) sysadmin wanted a redundant setup.  He doesn&#8217;t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.</p>\n\n\n	<p>It turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).</p>','<p>After we set up <a href=\"http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx\">AboutUs&#8217;s search feature</a> our (awesome) sysadmin wanted a redundant setup.  He doesn&#8217;t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.</p>\n\n\n	<p>It turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).</p>\n\n\n	<p>Basically instead of a <code>sphinx.yml</code> like this:</p>\n\n\n<pre><code class=\"yaml\">production:\n  morphology: stem_en\n  mem_limit: 1600M\n  address: 10.1.0.42\n  listen: 0.0.0.0\n</code></pre>\n\n	<p>It looks this:</p>\n\n\n<pre><code class=\"yaml\">production:\n  morphology: stem_en\n  mem_limit: 1600M\n  timeout: 0.5\n  address:\n  - 10.1.0.42\n  - 10.1.0.43\n  listen: 0.0.0.0\n</code></pre>\n\n	<p>Queries will load balance between the multiple servers specified in <code>address</code> (it&#8217;s still ok to have just one), and in the event of a failure they&#8217;ll failover to the other servers.  You can also specify a timeout option, and the clients will failover after they&#8217;ve hit it.  (This is good for cases where the server is totally down, to avoid waiting on a <span class=\"caps\">TCP</span> timeout of around 30 seconds.)</p>\n\n\n	<p>These changes were pulled back into <a href=\"https://github.com/freelancing-god/thinking-sphinx/commit/5eea57e6329c9bd25b29ebeab535e9c5d291708c\">ThinkingSphinx</a>  and <a href=\"https://github.com/freelancing-god/riddle/pull/12\">Riddle</a>, so they should be available when the next versions of these gems are released.</p>','2010-11-10 04:49:54','2010-11-10 04:49:54','2010-11-10 04:49:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (194,NULL,1,40,1,'The easiest way to diff two strings in ruby','the-easiest-way-to-diff-two-strings-in-ruby','','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nThe motivation behind this gem is to make it dirt simple to generate attractive diff output from within a ruby script.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Swallowed html in nowiki tags==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The break tag in here is not rendered as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>\"To create a line break put this &lt;<strong>code&gt;&lt;</strong>nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;<strong>&lt;/code&gt;</strong> in your markup.\"</del></li>\r\n                  <li class=\"ins\"><ins>\"To create a line break put this &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt; in your markup.\"</ins></li>\r\n                </ul>\r\n              </div>','','<p>I just released version 2.0 of <a href=\"https://github.com/samg/diffy\">Diffy</a>.</p>\n\n\n	<p>The motivation behind this gem is to make it dirt simple to generate attractive diff output from within a ruby script.</p>\n\n\n	<p>Here&#8217;s how you use it:</p>\n\n\n	<pre><code>$ sudo gem install diffy\n$ irb\n&gt;&gt; string1 = &lt;&lt;-TXT\n&gt;\" Hello how are you\n&gt;\" I\'m fine\n&gt;\" That\'s great\n&gt;\" TXT\n=&gt; \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\" \n&gt;&gt; string2 = &lt;&lt;-TXT\n&gt;\" Hello how are you?\n&gt;\" I\'m fine\n&gt;\" That\'s swell\n&gt;\" TXT\n=&gt; \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\" \n&gt;&gt; puts Diffy::Diff.new(string1, string2)\n-Hello how are you\n+Hello how are you?\n I\'m fine\n-That\'s great\n+That\'s swell</code></pre>\n\n\n	<p>It also will generate nice html for you:</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Swallowed html in nowiki tags==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The break tag in here is not rendered as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>&#8220;To create a line break put this &lt;<strong>code&gt;&lt;</strong>nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;<strong>&lt;/code&gt;</strong> in your markup.&#8221;</del></li>\n                  <li class=\"ins\"><ins>&#8220;To create a line break put this &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt; in your markup.&#8221;</ins></li>\n                </ul>\n              </div>','2010-11-26 18:08:54','2010-11-26 18:08:54',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (195,NULL,2,40,1,'The easiest way to diff two strings in ruby','the-easiest-way-to-diff-two-strings-in-ruby','','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nThe motivation behind this gem is to make it dirt simple to generate attractive diff output from within a ruby script.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n<style type=\"text/css\">\r\n    .diff{overflow:auto;border:solid 1px green;}\r\n    .diff ul{overflow:auto;font-size:13px;list-style:none;margin:0;padding:0;display:table;width:100%;}\r\n    .diff del, .diff ins{display:block;text-decoration:none;}\r\n    .diff li{padding:0; display:table-row;margin: 0;height:1em;}\r\n    .diff li.ins{background:#dfd; color:#080}\r\n    .diff li.del{background:#fee; color:#b00}\r\n    .diff del, .diff ins, .diff span{white-space:pre-wrap;font-family:courier;}\r\n    .diff del strong{font-weight:normal;background:#fcc;}\r\n    .diff ins strong{font-weight:normal;background:#9f9;}\r\n</style>\r\n\r\n\r\n<pre><code>>> Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\r\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\r\n                  <li class=\"del\"><del>\"<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>\" said<strong> I</strong>.</del></li>\r\n                  <li class=\"ins\"><ins>\"<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a\" <strong>I </strong>said.</ins></li>\r\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\r\n                </ul>\r\n              </div>\r\n\r\nYou can find out more in the README:https://github.com/samg/diffy/blob/master/README.md','','<p>I just released version 2.0 of <a href=\"https://github.com/samg/diffy\">Diffy</a>.</p>\n\n\n	<p>The motivation behind this gem is to make it dirt simple to generate attractive diff output from within a ruby script.</p>\n\n\n	<p>Here&#8217;s how you use it:</p>\n\n\n	<pre><code>$ sudo gem install diffy\n$ irb\n&gt;&gt; string1 = &lt;&lt;-TXT\n&gt;\" Hello how are you\n&gt;\" I\'m fine\n&gt;\" That\'s great\n&gt;\" TXT\n=&gt; \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\" \n&gt;&gt; string2 = &lt;&lt;-TXT\n&gt;\" Hello how are you?\n&gt;\" I\'m fine\n&gt;\" That\'s swell\n&gt;\" TXT\n=&gt; \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\" \n&gt;&gt; puts Diffy::Diff.new(string1, string2)\n-Hello how are you\n+Hello how are you?\n I\'m fine\n-That\'s great\n+That\'s swell</code></pre>\n\n\nIt also will generate nice html for you:\n<style type=\"text/css\">\n    .diff{overflow:auto;border:solid 1px green;}\n    .diff ul{overflow:auto;font-size:13px;list-style:none;margin:0;padding:0;display:table;width:100%;}\n    .diff del, .diff ins{display:block;text-decoration:none;}\n    .diff li{padding:0; display:table-row;margin: 0;height:1em;}\n    .diff li.ins{background:#dfd; color:#080}\n    .diff li.del{background:#fee; color:#b00}\n    .diff del, .diff ins, .diff span{white-space:pre-wrap;font-family:courier;}\n    .diff del strong{font-weight:normal;background:#fcc;}\n    .diff ins strong{font-weight:normal;background:#9f9;}\n</style>\n\n<pre><code>&gt;&gt; Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\n                  <li class=\"del\"><del>&#8220;<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>&#8221; said<strong> I</strong>.</del></li>\n                  <li class=\"ins\"><ins>&#8220;<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a&#8221; <strong>I </strong>said.</ins></li>\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\n                </ul>\n              </div>\n\n	<p>You can find out more in the <span class=\"caps\">README</span>:https://github.com/samg/diffy/blob/master/README.md</p>','2010-11-26 18:19:46','2010-11-26 18:19:46',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (196,NULL,3,40,1,'The easiest way to diff two strings in ruby','the-easiest-way-to-diff-two-strings-in-ruby','','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nI wanted to make it dead simple to generate attractive diff output from within a ruby application.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n<style type=\"text/css\">\r\n    .diff{overflow:auto;border:solid 1px green;padding:1em;}\r\n    .diff ul{overflow:auto;font-size:13px;list-style:none;margin:0;padding:0;display:table;width:100%;}\r\n    .diff del, .diff ins{display:block;text-decoration:none;}\r\n    .diff li{padding:0; display:table-row;margin: 0;height:1em;}\r\n    .diff li.ins{background:#dfd; color:#080}\r\n    .diff li.del{background:#fee; color:#b00}\r\n    .diff del, .diff ins, .diff span{white-space:pre-wrap;font-family:courier;}\r\n    .diff del strong{font-weight:normal;background:#fcc;}\r\n    .diff ins strong{font-weight:normal;background:#9f9;}\r\n</style>\r\n\r\n\r\n<pre><code>>> Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\r\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\r\n                  <li class=\"del\"><del>\"<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>\" said<strong> I</strong>.</del></li>\r\n                  <li class=\"ins\"><ins>\"<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a\" <strong>I </strong>said.</ins></li>\r\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\r\n                </ul>\r\n              </div>\r\n\r\nYou can find out more in the \"README\":https://github.com/samg/diffy/blob/master/README.md','','<p>I just released version 2.0 of <a href=\"https://github.com/samg/diffy\">Diffy</a>.</p>\n\n\n	<p>I wanted to make it dead simple to generate attractive diff output from within a ruby application.</p>\n\n\n	<p>Here&#8217;s how you use it:</p>\n\n\n	<pre><code>$ sudo gem install diffy\n$ irb\n&gt;&gt; string1 = &lt;&lt;-TXT\n&gt;\" Hello how are you\n&gt;\" I\'m fine\n&gt;\" That\'s great\n&gt;\" TXT\n=&gt; \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\" \n&gt;&gt; string2 = &lt;&lt;-TXT\n&gt;\" Hello how are you?\n&gt;\" I\'m fine\n&gt;\" That\'s swell\n&gt;\" TXT\n=&gt; \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\" \n&gt;&gt; puts Diffy::Diff.new(string1, string2)\n-Hello how are you\n+Hello how are you?\n I\'m fine\n-That\'s great\n+That\'s swell</code></pre>\n\n\nIt also will generate nice html for you:\n<style type=\"text/css\">\n    .diff{overflow:auto;border:solid 1px green;padding:1em;}\n    .diff ul{overflow:auto;font-size:13px;list-style:none;margin:0;padding:0;display:table;width:100%;}\n    .diff del, .diff ins{display:block;text-decoration:none;}\n    .diff li{padding:0; display:table-row;margin: 0;height:1em;}\n    .diff li.ins{background:#dfd; color:#080}\n    .diff li.del{background:#fee; color:#b00}\n    .diff del, .diff ins, .diff span{white-space:pre-wrap;font-family:courier;}\n    .diff del strong{font-weight:normal;background:#fcc;}\n    .diff ins strong{font-weight:normal;background:#9f9;}\n</style>\n\n<pre><code>&gt;&gt; Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\n                  <li class=\"del\"><del>&#8220;<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>&#8221; said<strong> I</strong>.</del></li>\n                  <li class=\"ins\"><ins>&#8220;<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a&#8221; <strong>I </strong>said.</ins></li>\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\n                </ul>\n              </div>\n\n	<p>You can find out more in the <a href=\"https://github.com/samg/diffy/blob/master/README.md\"><span class=\"caps\">README</span></a></p>','2010-11-26 18:21:10','2010-11-26 18:21:10',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (197,NULL,1,41,1,'Making Diffy a little less creative','making-diffy-a-little-less-creative','','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html output.  Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this <code><nowiki><br></nowiki></code> in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','','<p>I just pushed a new version of my <a href=\"https://github.com/samg/diffy\">Diffy</a> ruby gem.</p>\n\n\n	<p>This version does a better job when highlighting parts of lines in the html output.  Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between &#8220;Unescaped&#8221; and &#8220;Swallowed&#8221;.</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this <code>&lt;nowiki&gt;&lt;br&gt;&lt;/nowiki&gt;</code> in your markup.&#8221;</span></li>\n                </ul>\n              </div>\n\n	<p>Version 2.0.1 suppresses this creativity a little bit for clearer output:</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>','2010-12-09 04:38:59','2010-12-09 04:38:59','2010-12-09 04:30:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (198,NULL,2,41,1,'Making Diffy a little less creative','making-diffy-a-little-less-creative','','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html output.  Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','','<p>I just pushed a new version of my <a href=\"https://github.com/samg/diffy\">Diffy</a> ruby gem.</p>\n\n\n	<p>This version does a better job when highlighting parts of lines in the html output.  Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between &#8220;Unescaped&#8221; and &#8220;Swallowed&#8221;.</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>\n\n	<p>Version 2.0.1 suppresses this creativity a little bit for clearer output:</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>','2010-12-09 04:42:17','2010-12-09 04:42:17','2010-12-09 04:30:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (199,NULL,4,40,1,'The easiest way to diff two strings in ruby','the-easiest-way-to-diff-two-strings-in-ruby','','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nI wanted to make it dead simple to generate attractive diff output from within a ruby application.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n\r\n\r\n<pre><code>>> Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\r\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\r\n                  <li class=\"del\"><del>\"<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>\" said<strong> I</strong>.</del></li>\r\n                  <li class=\"ins\"><ins>\"<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a\" <strong>I </strong>said.</ins></li>\r\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\r\n                </ul>\r\n              </div>\r\n\r\nYou can find out more in the \"README\":https://github.com/samg/diffy/blob/master/README.md','','<p>I just released version 2.0 of <a href=\"https://github.com/samg/diffy\">Diffy</a>.</p>\n\n\n	<p>I wanted to make it dead simple to generate attractive diff output from within a ruby application.</p>\n\n\n	<p>Here&#8217;s how you use it:</p>\n\n\n	<pre><code>$ sudo gem install diffy\n$ irb\n&gt;&gt; string1 = &lt;&lt;-TXT\n&gt;\" Hello how are you\n&gt;\" I\'m fine\n&gt;\" That\'s great\n&gt;\" TXT\n=&gt; \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\" \n&gt;&gt; string2 = &lt;&lt;-TXT\n&gt;\" Hello how are you?\n&gt;\" I\'m fine\n&gt;\" That\'s swell\n&gt;\" TXT\n=&gt; \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\" \n&gt;&gt; puts Diffy::Diff.new(string1, string2)\n-Hello how are you\n+Hello how are you?\n I\'m fine\n-That\'s great\n+That\'s swell</code></pre>\n\n\n	<p>It also will generate nice html for you:</p>\n\n\n<pre><code>&gt;&gt; Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\n                  <li class=\"del\"><del>&#8220;<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>&#8221; said<strong> I</strong>.</del></li>\n                  <li class=\"ins\"><ins>&#8220;<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a&#8221; <strong>I </strong>said.</ins></li>\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\n                </ul>\n              </div>\n\n	<p>You can find out more in the <a href=\"https://github.com/samg/diffy/blob/master/README.md\"><span class=\"caps\">README</span></a></p>','2010-12-09 04:42:50','2010-12-09 04:42:50','2010-11-26 18:21:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (200,NULL,3,41,1,'Making Diffy a little less creative','making-diffy-a-little-less-creative','','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html output.  \r\n\r\nWard Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','','<p>I just pushed a new version of my <a href=\"https://github.com/samg/diffy\">Diffy</a> ruby gem.</p>\n\n\n	<p>This version does a better job when highlighting parts of lines in the html output.</p>\n\n\n	<p>Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between &#8220;Unescaped&#8221; and &#8220;Swallowed&#8221;.</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>\n\n	<p>Version 2.0.1 suppresses this creativity a little bit for clearer output:</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>','2010-12-09 05:05:19','2010-12-09 05:05:19','2010-12-09 04:30:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (201,NULL,4,41,1,'Making Diffy a little less creative','making-diffy-a-little-less-creative','','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html output.  \r\n\r\nWard Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off as a bit of a know-it-all when it found one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','','<p>I just pushed a new version of my <a href=\"https://github.com/samg/diffy\">Diffy</a> ruby gem.</p>\n\n\n	<p>This version does a better job when highlighting parts of lines in the html output.</p>\n\n\n	<p>Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off as a bit of a know-it-all when it found one letter similarities between &#8220;Unescaped&#8221; and &#8220;Swallowed&#8221;.</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>\n\n	<p>Version 2.0.1 suppresses this creativity a little bit for clearer output:</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>','2010-12-09 05:05:52','2010-12-09 05:05:52','2010-12-09 04:30:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (202,NULL,5,41,1,'Making Diffy a little less creative','making-diffy-a-little-less-creative','','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html diff output.  \r\n\r\nWard Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off as a bit of a know-it-all when it found one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','','<p>I just pushed a new version of my <a href=\"https://github.com/samg/diffy\">Diffy</a> ruby gem.</p>\n\n\n	<p>This version does a better job when highlighting parts of lines in the html diff output.</p>\n\n\n	<p>Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off as a bit of a know-it-all when it found one letter similarities between &#8220;Unescaped&#8221; and &#8220;Swallowed&#8221;.</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>\n\n	<p>Version 2.0.1 suppresses this creativity a little bit for clearer output:</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>','2010-12-09 05:06:45','2010-12-09 05:06:45','2010-12-09 04:30:00',NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `content_versions` VALUES (203,NULL,1,42,1,'pwdeath - ssh keys for everyone','pwdeath-ssh-keys-for-everyone','','How many times a day do you see something like this?\r\n\r\n<pre><code>\r\n$ ssh sam@drasticcode.com\r\nsam@drasticcode.com\'s password:\r\n</code></pre>\r\n\r\nWell f**k that.  Typing in ssh passwords is for suckers.  Personally I try to never do it, and to make it easier I have a @pwdeath@ script to make setting up ssh keys painlessly easy.  Once you\'ve generated ssh keys (you can do this with @ssh-keygen@) put this script in your @PATH@.\r\n\r\n<pre><code class=\"bash\">\r\n#!/bin/bash\r\n\r\nkey=`cat ~/.ssh/id_rsa.pub`\r\nfor host in $*; do\r\n  ssh $host \"mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod 700 ~/.ssh && chmod -R 600 ~/.ssh/* && echo \'$key\' >> ~/.ssh/authorized_keys\"\r\ndone\r\n</code></pre>\r\n\r\nThen you invoke it like this:\r\n\r\n\r\n<pre><code class=\"bash\">\r\n$ pwdeath sam@server1.com sam@server2.com\r\n</code></pre>\r\n\r\nType your password once for each server, then never type it again.  Your fingers will thank you.','','<p>How many times a day do you see something like this?</p>\n\n\n<pre><code>\n$ ssh sam@drasticcode.com\nsam@drasticcode.com\'s password:\n</code></pre>\n\n	<p>Well f**k that.  Typing in ssh passwords is for suckers.  Personally I try to never do it, and to make it easier I have a <code>pwdeath</code> script to make setting up ssh keys painlessly easy.  Once you&#8217;ve generated ssh keys (you can do this with <code>ssh-keygen</code>) put this script in your <code>PATH</code>.</p>\n\n\n<pre><code class=\"bash\">\n#!/bin/bash\n\nkey=`cat ~/.ssh/id_rsa.pub`\nfor host in $*; do\n  ssh $host \"mkdir -p ~/.ssh &#38;&#38; touch ~/.ssh/authorized_keys &#38;&#38; chmod 700 ~/.ssh &#38;&#38; chmod -R 600 ~/.ssh/* &#38;&#38; echo \'$key\' &gt;&gt; ~/.ssh/authorized_keys\" \ndone\n</code></pre>\n\n	<p>Then you invoke it like this:</p>\n\n\n<pre><code class=\"bash\">\n$ pwdeath sam@server1.com sam@server2.com\n</code></pre>\n\n	<p>Type your password once for each server, then never type it again.  Your fingers will thank you.</p>','2011-04-06 16:15:12','2011-04-06 16:15:12',NULL,NULL,NULL,NULL,NULL,0,1,'Article',1,0,-1,'textile_filter',NULL,NULL,0);
/*!40000 ALTER TABLE `content_versions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contents`
--

DROP TABLE IF EXISTS `contents`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `contents` (
  `id` int(11) NOT NULL auto_increment,
  `article_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `title` varchar(255) default NULL,
  `permalink` varchar(255) default NULL,
  `excerpt` text,
  `body` text,
  `excerpt_html` text,
  `body_html` text,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `published_at` datetime default NULL,
  `type` varchar(20) default NULL,
  `author` varchar(100) default NULL,
  `author_url` varchar(255) default NULL,
  `author_email` varchar(255) default NULL,
  `author_ip` varchar(100) default NULL,
  `comments_count` int(11) default '0',
  `updater_id` int(11) default NULL,
  `version` int(11) default NULL,
  `site_id` int(11) default NULL,
  `approved` tinyint(1) default '0',
  `comment_age` int(11) default '0',
  `filter` varchar(255) default NULL,
  `user_agent` varchar(255) default NULL,
  `referrer` varchar(255) default NULL,
  `assets_count` int(11) default '0',
  PRIMARY KEY  (`id`),
  KEY `idx_comments` (`article_id`,`approved`,`type`),
  KEY `idx_articles_published` (`published_at`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `contents`
--

LOCK TABLES `contents` WRITE;
/*!40000 ALTER TABLE `contents` DISABLE KEYS */;
INSERT INTO `contents` VALUES (2,NULL,1,'Smart Pluralize for Rails','a-smart-pluralizing-helper-for-rails','Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>','<p>You may know that the <a href=\"http://as.rubyonrails.org/\">ActiveSupport</a> library included with <a href=\"http://rubyonrails.org\">Rails</a> contains a <code>pluralize</code> method that lets you pluralize a string.</p>\n\n\n	<p>For example:</p>\n\n\n<pre><code class=\"ruby\">$ irb\n&gt;&gt; require \"rubygems\" \n=&gt; true\n&gt;&gt; require \"activesupport\" \n=&gt; true\n&gt;&gt; \"monkey\".pluralize\n=&gt; \"monkeys\" \n&gt;&gt; \"ox\".pluralize\n=&gt; \"oxen\" \n</code></pre>\n\n	<p>Sometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say <strong>1 comment</strong> or <strong>2 comments</strong>?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a> and I whipped up this simple helper which makes it easy.</p>\n\n\n<pre><code class=\"ruby\">class String\n  def smart_pluralize(num=self)\n    num.to_i.abs == 1 ? self : pluralize\n  end\nend\n</code></pre>\n\n	<p>Now here&#8217;s the fun part.  Having this method take <code>self</code> (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.</p>\n\n\n<pre><code class=\"ruby\">&gt;&gt; \"1 monkey\".smart_pluralize\n=&gt; \"1 monkey\" \n&gt;&gt; \"2 monkey\".smart_pluralize\n=&gt; \"2 monkeys\" \n&gt;&gt; (-2..2).each do |number|\n?&gt;   puts \"#{number} monkey\".smart_pluralize(number).inspect\n&gt;&gt; end\n\"-2 monkeys\" \n\"-1 monkey\" \n\"0 monkeys\" \n\"1 monkey\" \n\"2 monkeys\" \n</code></pre>\n\n	<p>Here&#8217;s a link to <a href=\"http://gist.github.com/103323\">the gist</a>.</p>','2009-05-20 05:35:17','2009-07-18 23:49:21','2009-05-19 20:58:00','Article',NULL,NULL,NULL,NULL,0,1,6,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (3,NULL,1,'Resizing Textareas as You Type with Prototype','resizing-textareas-as-you-type-with-prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nIts tested in Firefox, Safari, IE6 and IE7.\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>','<p>In my <a href=\"http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery\">last post</a> I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here&#8217;s one for everyone using Rail&#8217;s standard javascript framework <a href=\"http://www.prototypejs.org/\">Prototype</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires Prototype\n */\nfunction scaleTextareas(){\n  $$(\'textarea\').each(function(t){\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\n        return m += (s.length/(t.offsetWidth/10)) + 1;\n      })) + 8 + \'em\';\n    });\n  setTimeout(scaleTextareas, 1000);\n};\nEvent.observe(window, \'load\', function() {\n  scaleTextareas();\n});</code></pre>\n\n	<p>Its tested in Firefox, Safari, <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span>.</p>\n\n\n	<p>Here&#8217;s <a href=\"http://drasticcode.com/demo/resizetextarea/prototype.html\">a demo</a> and here&#8217;s <a href=\"http://gist.github.com/99346\">the gist</a>.</p>','2009-05-26 01:38:17','2009-07-18 23:50:35','2009-05-27 20:09:00','Article',NULL,NULL,NULL,NULL,0,1,10,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (4,NULL,1,'Resizing Textareas as You Type with jQuery','resizing-textareas-as-you-type-with-jquery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires jQuery\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>','<p>Here&#8217;s some code I&#8217;m going to use on every project from now on.  It makes all the <code>textarea</code> fields in your forms resize dynamically as the user types. Drop it <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusively</a> into any page (running <a href=\"http://jquery.com\">jQuery</a>) and all your textareas expand to fit the text the user has entered.</p>\n\n\n<form action=\"\" method=\"get\">\n<label for=\"stream\">Try it out:</label>\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\n</form>\n<br/><br/>\n\n	<p>Here&#8217;s <a href=\"http://gist.github.com/117849\">the code</a>:</p>\n\n\n<pre><code class=\"javascript\">/*\n * Scale all textareas dynamically on the page\n * Requires jQuery\n */\nfunction scaleTextareas() {\n  $(\'textarea\').each(function(i, t){\n    var m = 0;\n    $($(t).val().split(\"\\n\")).each(function(i, s){\n      m += (s.length/(t.offsetWidth/10)) + 1;\n    });\n    t.style.height = Math.floor(m + 8) + \'em\';\n  });\n  setTimeout(scaleTextareas, 1000);\n};\n$(document).ready(function(){\n  scaleTextareas();\n});</code></pre>\n\n	<p>I&#8217;ve tested it in <span class=\"caps\">FF3</span>, Safari, and it even works in <span class=\"caps\">IE6</span> and <span class=\"caps\">IE7</span> (after some refactoring).</p>','2009-05-26 01:39:03','2009-07-18 23:48:53','2009-05-26 21:34:00','Article',NULL,NULL,NULL,NULL,0,1,21,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (5,NULL,1,'How to load a YAML config object','how-to-load-a-yaml-config-object','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.\r\n\r\n<pre><code class=\"ruby\">\r\nclass MyClass\r\n  def self.config_file\r\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\r\n  end \r\n\r\n  def self.config\r\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\r\n  end \r\n\r\n  def config\r\n    self.class.config\r\n  end \r\nend\r\n</code></pre>\r\n\r\nNow you can do things like this in your instance and class methods:\r\n\r\n<pre><code class=\"ruby\">\r\ndef where_am_i\r\n  config[:host]\r\nend\r\n</code></pre>\r\n\r\nThe YAML file would look like this:\r\n\r\n<pre><code class=\"yaml\">\r\ndevelopment:\r\n  host: localhost\r\ntest:\r\n  host: test.host\r\nproduction:\r\n  host: your_production_host.com\r\n</code></pre>','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\"><span class=\"caps\">YAML</span></a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>','<p>One of Rails&#8217; selling points is <a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">convention over configuration</a>, but most apps do need some configuration.  database.yml is a great example.</p>\n\n\n	<p>Here&#8217;s some code that loads data into a ruby class from a <a href=\"http://www.yaml.org/start.html\"><span class=\"caps\">YAML</span></a> config file.  Just like database.yml the configuration is specific to the rails environment you&#8217;re running in.</p>\n\n\n<pre><code class=\"ruby\">\nclass MyClass\n  def self.config_file\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\n  end \n\n  def self.config\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\n  end \n\n  def config\n    self.class.config\n  end \nend\n</code></pre>\n\n	<p>Now you can do things like this in your instance and class methods:</p>\n\n\n<pre><code class=\"ruby\">\ndef where_am_i\n  config[:host]\nend\n</code></pre>\n\n	<p>The <span class=\"caps\">YAML</span> file would look like this:</p>\n\n\n<pre><code class=\"yaml\">\ndevelopment:\n  host: localhost\ntest:\n  host: test.host\nproduction:\n  host: your_production_host.com\n</code></pre>','2009-06-10 17:13:51','2009-07-18 23:48:11','2009-06-10 17:13:00','Article',NULL,NULL,NULL,NULL,0,1,2,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (6,NULL,1,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>','<p>Here&#8217;s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you&#8217;re looking for.</p>\n\n\n	<p>First here&#8217;s a <a href=\"http://drasticcode.com/demo/js_search/index.html\">demo</a>.</p>\n\n\n	<p>What&#8217;s nice is this only takes a few lines of code (and the magic of jQuery.)</p>\n\n\n<pre><code class=\"javascript\">\n$().ready(function(){\n  // Instant Search\n  $(\'#q\').keyup(function(){\n    $(\'.search_item\').each(function(){\n      var re = new RegExp($(\'#q\').val(), \'i\')\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\n        $(this).show();\n      }else{\n        $(this).hide();\n      };\n    });\n  });\n});\n</code></pre>\n\n	<p>As long as your markup contains a list of items with <code>search_item</code> classes, and these contain an element with a <code>search_text</code> class, you&#8217;re set. For example:</p>\n\n\n<pre><code class=\"html\">\n &lt;form action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"q\" name=\"q\"/&gt;\n &lt;/form&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 1&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 2&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"search_item\"&gt;\n  &lt;h4 class=\"search_text\"&gt;Item 3&lt;/h4&gt;\n  &lt;p&gt;Some more info about Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n	<p>It takes regular expression syntax as well so queries like <code>Item\\s+(1)|(2)</code> will work just fine.  It wouldn&#8217;t be hard to enhance this to split keywords in the query apart, so <code>Bachelor Mount</code> would match an item call <em>Mount Bachelor</em>.  If this appeals to you feel free to fork the <a href=\"http://gist.github.com/131085\">gist on github</a>.</p>','2009-06-17 22:47:59','2009-07-18 23:47:22','2009-06-17 23:09:00','Article',NULL,NULL,NULL,NULL,1,1,10,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (7,6,NULL,'Instant Search in pure Javascript (almost instantly)','instant-search-in-pure-javascript-almost-instantly',NULL,'Dead simple, but seems like it won\'t scale too well. I wonder how hard it would be to index them using a trie?','','<p>Dead simple, but seems like it won&#8217;t scale too well. I wonder how hard it would be to index them using a trie?</p>','2009-06-18 20:53:18','2009-06-18 20:53:18','2009-06-17 23:09:00','Comment','Ian Smith-Heisters','http://idiosyncra.tc','i@idiosyncra.tc','70.36.142.16',0,NULL,NULL,1,1,0,'textile_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/525.28.3 (KHTML, like Gecko) Version/3.2.3 Safari/525.28.3','http://drasticcode.com/2009/6/17/instant-search-in-pure-javascript-almost-instantly',0);
INSERT INTO `contents` VALUES (8,NULL,1,'Installing an Interactive Javascript Shell','setting-up-an-interactive-javascript-console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put this following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>','<p>When you&#8217;re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That&#8217;s why <a href=\"http://en.wikipedia.org/wiki/Interactive_Ruby_Shell\">irb</a> for ruby or <code>script/console</code> for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.</p>\n\n\n	<p>There&#8217;s a cross-platform Javascript shell, which is super easy to get up and running.  It uses <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> which is an open-source implementation of JavaScript written entirely in Java.</p>\n\n\n	<p>I&#8217;ll show you how to install it on <span class=\"caps\">OS X</span> in under 5 minutes.</p>\n\n\n	<p>Most of this should work on Linux (and maybe Windows) too with some minor tweaks.</p>\n\n\n	<p>First thing you&#8217;ll need to do is download Rhino.</p>\n\n\n<pre><code class=\"bash\">\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\n$ unzip rhino1_7R2.zip\n</code></pre>\n\nThen copy the <code>js.jar</code> file where java can find it.  On <span class=\"caps\">OS X</span>\n<pre><code class=\"bash\">\n$ cd rhino1_7R2\n$ cp ./js.jar /Library/Java/Extensions/\n</code></pre>\n\n	<p>On Linux you&#8217;ll want to put the jar file in <code> JAVAHOME/jre/lib/ext</code> \n<br/> for example: <code>/usr/local/java/jre/lib/ext</code>.</p>\n\n\n	<p>On Windows it&#8217;ll be someplace like <code>C:\\j2sdk1.4.1_03\\jre\\lib\\ext</code></p>\n\n\nThat&#8217;s it.  You can enter the interactive javascript shell by running:\n<pre><code class=\"bash\">\n$ java org.mozilla.javascript.tools.shell.Main\n</code></pre>\n\nThis is a little unwieldy so I put this following alias in my <code>~/.bashrc</code> which lets me just type <code>js</code> to get into the console.\n<pre><code class=\"bash\">\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\n</code></pre>\n\n	<p>That was easy, but I quickly realized, this console really sucks.  I can&#8217;t backspace or use the arrow keys or <code>ctl-A</code>, <code>ctl-E</code> to move around.  Well not to worry.  JLine to rescue.</p>\n\n\n	<p>As its <a href=\"http://jline.sourceforge.net/\">website</a> states:</p>\n\n\n	<p><em>JLine is a Java library for handling console input. It is similar in functionality to <span class=\"caps\">BSD</span> editline and <span class=\"caps\">GNU</span> readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar.</em></p>\n\n\nJust download the library:\n<pre><code class=\"bash\">\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\n</code></pre>\n\n	<p>Unzip it and copy the <code>jline-0.9.94.jar</code> file to same place you put <code>js.jar</code> (<code>/Library/Java/Extensions/</code> on <span class=\"caps\">OS X</span>.)</p>\n\n\n	<p>Congrats.  Now you&#8217;ve got a javascript shell that doesn&#8217;t suck.</p>','2009-06-26 22:22:39','2009-08-03 05:30:46','2009-06-26 23:07:00','Article',NULL,NULL,NULL,NULL,0,1,11,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (9,NULL,1,'Fix for \"random\" NoMethodError in Rails\' ActiveRecord ','make-it-so-activerecord-attributes-which-conflict-with-object-private-methods-don-t-randomly-cause-nomethoderrors','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>','<p>I&#8217;m a little excited today because <a href=\"http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9\">some code I wrote was accepted into the Ruby on Rails core</a>.</p>\n\n\n	<p>It&#8217;s a patch I wrote to fix a tricky bug I ran into in <code>ActiveRecord</code> which can cause a call to one of your model&#8217;s attribute methods to sometimes throw a <code>NoMethodError</code>.</p>\n\n\n	<p>I came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named <code>system</code>.</p>\n\n\n	<p>All of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.</p>\n\n\n<pre>NoMethodError: Attempt to call private method\n    from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\n</pre>\n\n	<p>I traced the error back to this line in a helper method.</p>\n\n\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\n</code></pre>\n\n	<p>Why didn&#8217;t my tests catch this I was wondering?  Here&#8217;s where things get esoteric.  This test would pass:</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new(:system =&gt; \"openSUSE\")\n  demo.system.should == \"openSUSE\" \nend\n</code></pre>\n\n	<p>This one would fail (with a <code>NoMethodError</code>):</p>\n\n\n<pre><code class=\"ruby\">\nit \"should have a system\" do\n  demo = DemoFile.new\n  demo.system.should == nil\nend\n</code></pre>\n\n	<p><span class=\"caps\">WTF</span>? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of <code>ActiveRecord::Base#method_missing</code>.</p>\n\n\n<pre><code class=\"ruby\">\ndef method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  if self.class.private_method_defined?(method_name)\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\n  end\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end.\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end \nend\n</code></pre>\n\n	<p>The problem was that if you had an attribute with the same name as a private method inherited from <code>Object</code> <strong>and</strong> you called that attribute before any others the thing would blow up.</p>\n\n\n	<p>Why?  <code>ActiveRecord</code> only considers an attribute method to be implemented if it is defined in an <code>ActiveRecord::Base</code> descendant.  Methods inherited from above <code>ActiveRecord::Base</code> in the inheritance chain are overridden the first time <code>method_missing</code> is hit.</p>\n\n\nCheck it out:\n<pre><code class=\"ruby\">\n# Checks whether the method is defined in the model or any of its subclasses\n# that also derive from Active Record. Raises DangerousAttributeError if the\n# method is defined by Active Record though.\ndef instance_method_already_implemented?(method_name)\n  method_name = method_name.to_s\n  return true if method_name =~ /^id(=$|\\?$|$)/\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(&#38; :to_s).to_set\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(&#38; :to_s).to_set\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\n  @_defined_class_methods.include?(method_name)\nend\n</code></pre>\n\n	<p>But if there is a protected method inherited from <code>Object</code> which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.</p>\n\n\n	<p>The fix is to make sure <code>define_attribute_methods</code> is called before checking for private methods and raising a <code>NoMethodErrors</code>.</p>\n\n\n<pre><code class=\"ruby\">\n def method_missing(method_id, *args, &#38;block)\n  method_name = method_id.to_s\n\n  # If we haven\'t generated any methods yet, generate them, then\n  # see if we\'ve created the method we\'re looking for.\n  if !self.class.generated_methods?\n    self.class.define_attribute_methods\n    guard_private_attribute_method!(method_name, args)\n    if self.class.generated_methods.include?(method_name)\n      return self.send(method_id, *args, &#38;block)\n    end\n  end\n\n  guard_private_attribute_method!(method_name, args)\n  if self.class.primary_key.to_s == method_name\n    id\n  elsif md = self.class.match_attribute_method?(method_name)\n    attribute_name, method_type = md.pre_match, md.to_s\n    if @attributes.include?(attribute_name)\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &#38;block)\n    else\n      super\n    end\n  elsif @attributes.include?(method_name)\n    read_attribute(method_name)\n  else\n    super\n  end\nend\n</code></pre>\n\n	<p>For anyone else who&#8217;s experiencing this issue, <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff\">the patch</a> is available on <a href=\"https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror\">the lighthouse ticket</a>.</p>','2009-07-09 23:41:23','2009-07-19 05:46:44','2009-07-10 00:38:00','Article',NULL,NULL,NULL,NULL,0,1,10,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (10,NULL,1,'Timetrap: Simple Command-Line Time Tracking with Ruby','timetrap-simple-command-line-time-tracking-with-ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when _I find the time_ (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>','<p><em>Who knows where the time goes?</em></p>\n\n\n	<p>That&#8217;s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>.</p>\n\n\n	<p>There&#8217;s a lot of <a href=\"http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/\" title=\"8 Reasons Time Tracking Is Good\">good reason&#8217;s</a> for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that&#8217;s where I am most of the time when I&#8217;m working.</p>\n\n\n	<p>I got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by <a href=\"http://bitbucket.org/trevor/\">Trevor Caira</a>.)  It let&#8217;s you track your time through a command line utility named <code>t</code>.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing <code>t d</code> instead of <code>t display</code>.</p>\n\n\n<pre><code>$ t switch World Domination Plan\n$ t in Research Volcano Islands\n$ t out\n$ t display\nTimesheet World Domination Plan:\nDay            Start      End        Duration   Notes\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\nTotal                                0:12:45\n</code></pre>\n\n	<p>The problem was it wasn&#8217;t flexible enough.  I&#8217;d forget to start it and want to type:</p>\n\n\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\n</code></pre>\n\n	<p>I needed an easy way to edit an entry after the fact.  I wanted:</p>\n\n\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\n</code></pre>\n\n	<p>And I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:</p>\n\n\n<pre><code>$ t display --format ical &gt; my_ical_file.ics\n</code></pre>\n\n	<p>All of the above commands work in <a href=\"http://github.com/samg/timetrap/tree/master\">Timetrap</a>, which also has an <code>archive</code> command that moves your entries to a hidden sheet, where they&#8217;re out of the way.</p>\n\n\n	<p>I&#8217;ve been using it to track my own time for the last few months, and it&#8217;s working really well.  I&#8217;ve been focusing more of my time on working, and less on tracking what I&#8217;m working on.</p>\n\n\n	<p>There&#8217;s still a few features I&#8217;m planning to add when <em>I find the time</em> (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It&#8217;s available on <a href=\"http://github.com/samg/timetrap/tree/master\">github</a>.  Feel free to let me know about any bugs you find, or if you&#8217;re interested in contributing code.</p>','2009-07-13 21:16:02','2009-07-19 05:44:49','2009-07-19 05:44:00','Article',NULL,NULL,NULL,NULL,0,1,13,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (11,NULL,1,'My Favorite Bash Substitution Tricks','my-favorite-bash-substitution-tricks','Here\'s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the @bash@ shell uses to store various aspects of your history.\r\n\r\nh4. Repeating the last command with @!!@\r\n\r\nSometimes I run a command that requires @sudo@ access, but forget the @sudo@.  This is a great opportunity to use @!!@ which holds the last command you ran.\r\n\r\n<pre><code class=\"bash\">\r\n$ tail /var/log/mail.log\r\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\r\n$ sudo !!\r\nsudo tail /var/log/mail.log\r\n# output of command\r\n</code></pre>','Here\'s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the @bash@ shell uses to store various aspects of your history.\r\n\r\nh4. Repeating the last command with @!!@\r\n\r\nSometimes I run a command that requires @sudo@ access, but forget the @sudo@.  This is a great opportunity to use @!!@ which holds the last command you ran.\r\n\r\n<pre><code class=\"bash\">\r\n$ tail /var/log/mail.log\r\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\r\n$ sudo !!\r\nsudo tail /var/log/mail.log\r\n# output of command\r\n</code></pre>\r\n\r\nh4. The last argument of the last command using @!$@\r\n\r\nSometimes it\'s handy to be able to reference the last argument of your last command.  This can make certain operations safer, by preventing a fat fingered typo from deleting important files.\r\n\r\n<pre><code class=\"bash\">\r\n$ ls *.log\r\na.log  b.log\r\n$ rm -v !$\r\nremoved `a.log\'\r\nremoved `b.log\'\r\n</code></pre>\r\n\r\nSimilarly you can use @!*@ to reference all of the last commands\' arguments.\r\n\r\n<pre><code class=\"bash\">\r\n$ touch a.log b.log\r\n$ rm -v !*\r\nrm -v a.log b.log\r\nremoved `a.log\'\r\nremoved `b.log\'\r\n</code></pre>\r\n\r\nh4. Correcting mistakes with @^^@\r\n\r\nThis is a nifty trick that performs a substitution on your last command.  It\'s great for correcting typos, or running similar commands back to back. It looks for a match with whatever is after the first carrot, and replaces it with whatever is after the second.\r\n\r\n\r\n<pre><code class=\"bash\">\r\n$ cmhod a+x my_script.sh \r\n-bash: cmhod: command not found\r\n$ ^mh^hm\r\nchmod a+x my_script.sh \r\n</code></pre>\r\n\r\nI use this one all the time doing rails development if I make a mistake on a @script/generate@ command.\r\n\r\n<pre><code class=\"bash\">\r\n$ script/generate model Animal species:string sex:string birthday:date\r\n      exists  app/models/\r\n      exists  test/unit/\r\n      exists  test/fixtures/\r\n      create  app/models/animal.rb\r\n      create  test/unit/animal_test.rb\r\n      create  test/fixtures/animals.yml\r\n      create  db/migrate\r\n      create  db/migrate/20090801180754_create_animals.rb\r\n\r\n$ ^generate^destroy\r\nscript/destroy model Animal species:string sex:string birthday:date\r\n    notempty  db/migrate\r\n    notempty  db\r\n          rm  db/migrate/20090801180754_create_animals.rb\r\n          rm  test/fixtures/animals.yml\r\n          rm  test/unit/animal_test.rb\r\n          rm  app/models/animal.rb\r\n       rmdir  test/fixtures\r\n    notempty  test\r\n       rmdir  test/unit\r\n    notempty  test\r\n       rmdir  app/models\r\n    notempty  app\r\n\r\n$ ^destroy ^generate rspec_\r\nscript/generate rspec_model Animal species:string sex:string birthday:date\r\n      create  app/models/\r\n      create  spec/models/\r\n      create  spec/fixtures/\r\n      create  app/models/animal.rb\r\n      create  spec/models/animal_spec.rb\r\n      create  spec/fixtures/animals.yml\r\n      create  db/migrate\r\n      create  db/migrate/20090801180937_create_animals.rb\r\n</code></pre>\r\n\r\nHope someone else finds these as handy as I do.\r\n','<p>Here&#8217;s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the <code>bash</code> shell uses to store various aspects of your history.</p>\n\n\n	<h4>Repeating the last command with <code>!!</code></h4>\n\n\n	<p>Sometimes I run a command that requires <code>sudo</code> access, but forget the <code>sudo</code>.  This is a great opportunity to use <code>!!</code> which holds the last command you ran.</p>\n\n\n<pre><code class=\"bash\">\n$ tail /var/log/mail.log\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\n$ sudo !!\nsudo tail /var/log/mail.log\n# output of command\n</code></pre>','<p>Here&#8217;s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the <code>bash</code> shell uses to store various aspects of your history.</p>\n\n\n	<h4>Repeating the last command with <code>!!</code></h4>\n\n\n	<p>Sometimes I run a command that requires <code>sudo</code> access, but forget the <code>sudo</code>.  This is a great opportunity to use <code>!!</code> which holds the last command you ran.</p>\n\n\n<pre><code class=\"bash\">\n$ tail /var/log/mail.log\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\n$ sudo !!\nsudo tail /var/log/mail.log\n# output of command\n</code></pre>\n\n	<h4>The last argument of the last command using <code>!$</code></h4>\n\n\n	<p>Sometimes it&#8217;s handy to be able to reference the last argument of your last command.  This can make certain operations safer, by preventing a fat fingered typo from deleting important files.</p>\n\n\n<pre><code class=\"bash\">\n$ ls *.log\na.log  b.log\n$ rm -v !$\nremoved `a.log\'\nremoved `b.log\'\n</code></pre>\n\n	<p>Similarly you can use <code>!*</code> to reference all of the last commands&#8217; arguments.</p>\n\n\n<pre><code class=\"bash\">\n$ touch a.log b.log\n$ rm -v !*\nrm -v a.log b.log\nremoved `a.log\'\nremoved `b.log\'\n</code></pre>\n\n	<h4>Correcting mistakes with <code>^^</code></h4>\n\n\n	<p>This is a nifty trick that performs a substitution on your last command.  It&#8217;s great for correcting typos, or running similar commands back to back. It looks for a match with whatever is after the first carrot, and replaces it with whatever is after the second.</p>\n\n\n<pre><code class=\"bash\">\n$ cmhod a+x my_script.sh \n-bash: cmhod: command not found\n$ ^mh^hm\nchmod a+x my_script.sh \n</code></pre>\n\n	<p>I use this one all the time doing rails development if I make a mistake on a <code>script/generate</code> command.</p>\n\n\n<pre><code class=\"bash\">\n$ script/generate model Animal species:string sex:string birthday:date\n      exists  app/models/\n      exists  test/unit/\n      exists  test/fixtures/\n      create  app/models/animal.rb\n      create  test/unit/animal_test.rb\n      create  test/fixtures/animals.yml\n      create  db/migrate\n      create  db/migrate/20090801180754_create_animals.rb\n\n$ ^generate^destroy\nscript/destroy model Animal species:string sex:string birthday:date\n    notempty  db/migrate\n    notempty  db\n          rm  db/migrate/20090801180754_create_animals.rb\n          rm  test/fixtures/animals.yml\n          rm  test/unit/animal_test.rb\n          rm  app/models/animal.rb\n       rmdir  test/fixtures\n    notempty  test\n       rmdir  test/unit\n    notempty  test\n       rmdir  app/models\n    notempty  app\n\n$ ^destroy ^generate rspec_\nscript/generate rspec_model Animal species:string sex:string birthday:date\n      create  app/models/\n      create  spec/models/\n      create  spec/fixtures/\n      create  app/models/animal.rb\n      create  spec/models/animal_spec.rb\n      create  spec/fixtures/animals.yml\n      create  db/migrate\n      create  db/migrate/20090801180937_create_animals.rb\n</code></pre>\n\n	<p>Hope someone else finds these as handy as I do.</p>','2009-08-01 18:10:34','2009-08-01 18:17:29','2009-08-01 18:10:00','Article',NULL,NULL,NULL,NULL,2,1,2,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (12,11,NULL,'My Favorite Bash Substitution Tricks','my-favorite-bash-substitution-tricks',NULL,'One more tip:\r\n\r\nYou can also echo a specific number of arguments off the end of the last command using @!:n*@, where @n@ is the number of the first argument to echo.  For example:\r\n\r\n<pre>\r\n$ touch 1.log 2.log 3.log 4.log 5.log\r\n\r\n$ rm -v !:3*\r\nrm -v 3.log 4.log 5.log\r\n3.log\r\n4.log\r\n5.log\r\n</pre>\r\n\r\nI don\'t use this one too much in practice but it could come in handy in certain situations.','','<p>One more tip:</p>\n\n\n	<p>You can also echo a specific number of arguments off the end of the last command using <code>!:n*</code>, where <code>n</code> is the number of the first argument to echo.  For example:</p>\n\n\n<pre>\n$ touch 1.log 2.log 3.log 4.log 5.log\n\n$ rm -v !:3*\nrm -v 3.log 4.log 5.log\n3.log\n4.log\n5.log\n</pre>\n\n	<p>I don&#8217;t use this one too much in practice but it could come in handy in certain situations.</p>','2009-08-02 18:20:54','2009-08-02 18:20:54','2009-08-01 18:10:00','Comment','Sam','http://drasticcode.com','sgrock@gmail.com','24.20.20.153',0,NULL,NULL,1,1,0,'textile_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.1) Gecko/20090715 Firefox/3.5.1','http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks',0);
INSERT INTO `contents` VALUES (13,NULL,1,'Writing Domain Specific Languages (DSLs) with Ruby','writing-domain-specific-languages-dsls-with-ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers. ','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The Final Product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How Does It Work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few ways besides @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.</p>','<p>A <a href=\"http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html\">lot</a> <a href=\"http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages\">of</a> <a href=\"http://www.infoq.com/presentations/agile-dsl-development-in-ruby\">people</a> say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  <span class=\"caps\">A DSL</span> is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  <a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>, <a href=\"http://rspec.info/\">RSpec</a>, <a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a>, <a href=\"http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl\">Rails&#8217; Routing</a>, just to name a few.</p>\n\n\n	<p>In this post I&#8217;ll look at some of the most common ways to create a <span class=\"caps\">DSL</span> in Ruby.</p>\n\n\n	<h3><span class=\"caps\">A DSL</span> for Defending Medieval Castles</h3>\n\n\n	<p>A new client, <strong>Medieval Guards, Inc.</strong> specializes in guarding medieval castles and fighting off <a href=\"http://en.wikipedia.org/wiki/Conan_the_Barbarian\">Barbarian</a> attackers.  They need some software written that will help them create battle plans and coordinate the castles&#8217; defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle&#8217;s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a <span class=\"caps\">DSL</span>.</p>\n\n\n	<h3>The Final Product</h3>\n\n\n	<p>Let&#8217;s take a look at what kind of syntax we&#8217;d like our commander to write to define a new battle plan.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do\n  fire cannon if enemy_approaching?\n  unless enemy_neutralized?\n    sound_alarm\n    fire crossbow\n  end\n  if enemy_approaching?\n    prepare boiling_oil\n    raise_drawbridge\n    fire flaming_catapult\n  end\n  if enemy_approaching?\n    prepare evacuation\n    pour boiling_oil\n  end\n  if enemy_neutralized?\n    lower_drawbridge\n    prepare paperwork\n  end\nend\n</code></pre>\n\n	<p>You can see here that even though this is pure Ruby code, it&#8217;s pretty easy for a non-programming commander to see what&#8217;s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn&#8217;t be hard to make that change.</p>\n\n\n	<h3>How Does It Work?</h3>\n\n\n	<p>Let&#8217;s assume that the defense of castles is handled directly by castle guards.  In our application part of the <code>Guard</code> class we&#8217;ve implemented looks like this:</p>\n\n\n<pre><code class=\"ruby\">class Guard &lt; Warrior\n  def fire(weapon)\n    weapon.load unless weapon.loaded?\n    weapon.aim\n    weapon.fire\n  end\n\n  def sound_alarm\n    horn.sound\n  end\n\n  def raise_drawbridge\n    drawbridge.control(:up)\n  end\n\n  def lower_drawbridge\n    drawbridge.control(:down)\n  end\n\n  def prepare(recipe)\n    recipe.follow\n  end\n\n  def enemy_approaching?\n    telescope.enemy_visible? and not telescope.enemy_dead?\n  end\n\n  def enemy_neutralized?\n    not enemy_approaching?\n  end\n\n  def boiling_oil\n    define_recipe :boiling_oil do\n      fire.stoke\n      pots.each{|pot| pot.fill :oil}\n    end\n  end\n\n  def evacuation\n    define_recipe :evacuation do\n      gather_women_and_children\n      escape_through_tunnels\n    end\n  end\nend\n</code></pre>\n\n	<p>You can see that the methods on <code>Guard</code> are the same as the vocaulary that the commander is using in our <code>define_battle_plan</code> DSL block.</p>\n\n\n	<p>We create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.</p>\n\n\n	<h3>Defining the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">class Commander\n  attr_accessor :plan\n  def define_battle_plan(&#38;plan)\n    self.plan = plan\n  end\n\n  # ...\nend\n</code></pre>\n\n	<p>Here we have a method called <code>define_battle_plan</code> that takes a block argument called <code>plan</code>.  Notice that when we call <code>define_battle_plan</code> it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.</p>\n\n\n	<h3>Executing the Battle Plan</h3>\n\n\n<pre><code class=\"ruby\">\nclass Commander\n  def defend_castle!\n    guard_on_duty.instance_eval &#38;plan\n  end\nend\n</code></pre>\n\n	<p>There&#8217;s another method on our commander class that will cause our battle plan to be run.  When we call <code>defend_castle!</code> the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a <code>Guard</code> instance (the <code>guard_on_duty</code>).  Within the battle plan block, <code>self</code> will refer to the defending <code>Guard</code> giving us easy access to all of the instances methods.</p>\n\n\n	<h3>Another Approach</h3>\n\n\n	<p>There are a few ways besides <code>instance_eval</code> to get an nice <span class=\"caps\">DSL</span>-y syntax.  Within Rails it&#8217;s popular to pass the object into the block to get a syntax like this:</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\nend\n</code></pre>\n\n	<p>To get this syntax we would change our <code>defend_castle!</code> method to look like this:</p>\n\n\n<pre><code class=\"ruby\">class Commander\n  def defend_castle!\n    plan.call guard_on_duty\n  end\nend\n</code></pre>\n\n	<p>One advantage (or disadvantage) to this approach is that within the <code>plan</code> block <code>self</code> still refers to the context it was defined in, in this case the <code>Commander</code> instance.  This means we can call methods from the calling class as well.  Imagine the <code>Commander</code> had a <code>notify_king</code> method.</p>\n\n\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\n  guard.fire cannon if guard.enemy_approaching?\n  notify_king unless guard.enemy_neutralized?\nend\n</code></pre>\n\n	<h3>More Complex Approaches</h3>\n\n\n	<p>There are a variety of more complicated ways to handle which object&#8217;s methods get called in your <span class=\"caps\">DSL</span>.  You can use <code>method_missing</code>, <a href=\"http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html\"><code>Forwardable</code></a>, or <a href=\"http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html\"><code>Delegate</code></a> to create a chain of responders.  We could have the <code>Guard</code> handle the action if he has a corresponding method, and the <code>Commander</code> handle it otherwise.  <a href=\"http://whytheluckystiff.net/\">_why</a> gets into some other possibilities <a href=\"http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html\">here</a>.</p>','2009-08-03 22:21:33','2009-08-04 07:50:46','2009-08-03 22:57:00','Article',NULL,NULL,NULL,NULL,2,1,29,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (14,11,NULL,'My Favorite Bash Substitution Tricks','my-favorite-bash-substitution-tricks',NULL,'Thanks Sam, I didn\'t know about !* and the ^^ substitution, those will be useful!','','<p>Thanks Sam, I didn&#8217;t know about !* and the ^^ substitution, those will be useful!</p>','2009-08-04 00:15:50','2009-08-04 00:15:50','2009-08-01 18:10:00','Comment','Kirsten','','kcomandich@gmail.com','24.21.240.199',0,NULL,NULL,1,1,0,'textile_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.1) Gecko/20090715 Firefox/3.5.1','http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks',0);
INSERT INTO `contents` VALUES (15,13,NULL,'Writing Domain Specific Languages (DSLs) with Ruby','writing-domain-specific-languages-dsls-with-ruby',NULL,'I\'m anti-instance_eval these days. See http://gist.github.com/154550 for my favorite du-jour.','','<p>I&#8217;m anti-instance_eval these days. See http://gist.github.com/154550 for my favorite du-jour.</p>','2009-08-05 16:37:04','2009-08-05 16:37:04','2009-08-03 22:57:00','Comment','Ian Smith-Heisters','http://idiosyncra.tc','i@idiosyncra.tc','70.36.142.16',0,NULL,NULL,1,1,0,'textile_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/530.19.2 (KHTML, like Gecko) Version/4.0.2 Safari/530.19','http://drasticcode.com/2009/8/3/writing-domain-specific-languages-dsls-with-ruby',0);
INSERT INTO `contents` VALUES (16,13,NULL,'Writing Domain Specific Languages (DSLs) with Ruby','writing-domain-specific-languages-dsls-with-ruby',NULL,'@Ian - This is a pretty interesting approach, which I tried to allude to at the end of the article.  It could be criticized as being _too_ magical, but in a way that\'s the whole point of DSLs.  Whether it\'s worth the additional complexity of setting up a chain of responders, seems to depend on the nature of your application.  \r\n\r\nIf you want one DSL to be accessible in a bunch of different classes (and still have easy access to their native methods) your gist seems like a great way to go.  For many cases though it seems overly convoluted.','','<p>@Ian &#8211; This is a pretty interesting approach, which I tried to allude to at the end of the article.  It could be criticized as being <em>too</em> magical, but in a way that&#8217;s the whole point of DSLs.  Whether it&#8217;s worth the additional complexity of setting up a chain of responders, seems to depend on the nature of your application.</p>\n\n\n	<p>If you want one <span class=\"caps\">DSL</span> to be accessible in a bunch of different classes (and still have easy access to their native methods) your gist seems like a great way to go.  For many cases though it seems overly convoluted.</p>','2009-08-06 00:59:56','2009-08-06 00:59:56','2009-08-03 22:57:00','Comment','Sam Goldstein','http://github.com/samg','sgrock@gmail.com','70.102.138.244',0,NULL,NULL,1,1,0,'textile_filter','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2','http://drasticcode.com/2009/8/3/writing-domain-specific-languages-dsls-with-ruby',0);
INSERT INTO `contents` VALUES (18,NULL,1,'How To Run Rspec Specs From Vim','how-to-run-rspec-specs-from-vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<notextile>\r\n<div style=\"font-size:12px;\">\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n\r\n</div>\r\n</div>\r\n</notextile>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>','<p>Test Driven Development is all about having a quick feedback loop.  You know something&#8217;s broken immediately because your tests fail.</p>\n\n\n	<p>As projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to <strong>only run one test</strong> or the few tests you care about so you can keep moving with the code.</p>\n\n\n	<p>TextMate has some commands to do this (<code>Cmd-R</code>, and <code>Cmd-Shift-R</code>).</p>\n\n\n	<p>Here&#8217;s how to do it with <code>vim</code>.</p>\n\n\n	<p>Usually when I&#8217;m coding I have Vim open in split screen mode (with <a href=\"http://github.com/tpope/vim-rails/tree/master\"><code>rails.vim</code></a> installed, of course.)  I&#8217;ll have a spec file on one side, and the application code on the other.</p>\n\n\n	<p><a href=\"/images/user/vim-lg1.png\"><img src=\"/images/user/vim1.png\" alt=\"\" /></a></p>\n\n\n	<p>I have this incredibly handy function and key mapping in my <code>.vimrc</code>.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire <a href=\"http://idiosyncra.tc/\">Ian Smith-Heisters</a>.</p>\n\n\n\n<div style=\"font-size:12px;\">\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n      </div>\n\n</div>\n</div>\n\n\n	<p>When I&#8217;m in the spec file I can hit <code>!s return</code> to execute the example or describe block that the cursor is in.</p>\n\n\n	<p><a href=\"/images/user/vim-lg2.png\"><img src=\"/images/user/vim2.png\" alt=\"\" /></a></p>\n\n\n	<p>Hitting <code>!S return</code> executes all the examples in that file.</p>\n\n\n	<p><a href=\"/images/user/vim-lg3.png\"><img src=\"/images/user/vim3.png\" alt=\"\" /></a></p>\n\n\n	<p>The fancy descriptive output is just one of the nested formatter which comes included with <a href=\"http://rspec.info/\">Rspec</a>.  They can be specified with the <code>-f</code> flag.  <code>spec --help</code> has more details on this.</p>','2009-08-26 02:02:57','2009-08-27 19:55:23','2009-08-27 19:43:00','Article',NULL,NULL,NULL,NULL,0,1,17,1,0,30,'textile_filter',NULL,NULL,1);
INSERT INTO `contents` VALUES (19,NULL,1,'test','test','','\r\n<notextile>\r\n<div style=\"font-size:12px;\">\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n\r\n</div>\r\n</div>\r\n</notextile>','','<div style=\"font-size:12px;\">\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n      </div>\n\n</div>\n</div>','2009-08-27 19:53:43','2009-08-27 19:54:59',NULL,'Article',NULL,NULL,NULL,NULL,0,1,3,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (20,NULL,1,'ack: the fast code search tool','ack-the-fast-code-search-tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 ~/bin/ack \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 ~/bin/ack \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>','<p>One of the handiest tools in my programming toolkit is <code>ack</code>, a Perl script that is great for searching through code (or really any text files).  I use it a lot while <a href=\"http://en.wikipedia.org/wiki/Code_refactoring\">refactoring</a>, for example when I want to rename a method every time it&#8217;s called in a project.</p>\n\n\nYou can install <code>ack</code> with this command (from <a href=\"http://betterthangrep.com/\">http://betterthangrep.com/</a>):\n<pre><code class=\"bash\">$ curl http://betterthangrep.com/ack-standalone &gt; ~/bin/ack &#38;&#38; chmod 0755 ~/bin/ack \n</code></pre>\n\n	<p>Assuming that <code>~/bin/ack</code> is in your path searching code is as easy as this:</p>\n\n\n<pre><code class=\"bash\">$ ack my_poorly_named_method\n</code></pre>\n\n	<p>This spits out highlighted matches from every file in the present directory.</p>\n\n\n	<p><code>ack --help</code> lists a lot of additional options to control how it matches, and what it outputs.</p>\n\n\n	<p>(My favorite is <code>ack --thpppt</code>)</p>\n\n\n<pre><code class=\"bash\">$ ack --thpppt \n_   /|\n\\\'o.O\'\n=(___)=\n   U    Bill the Cat!\n</code></pre>\n\n	<p>So back to how <code>ack</code> is useful when you want to do a find and replace on a lot of files.</p>\n\n\nFirst I&#8217;d do a quick search for the method I want to rename:\n<pre><code class=\"bash\">$ ack destroy_other\napp/models/wd/core/proxy_to.rb\n23:    def destroy_other!\n\nscript/pull_wds\n58:      wd.destroy_other!\n\nspec/models/wd/core/proxy_to_spec.rb\n216:      @wd.destroy_other!\n\nspec/script/pull_wds_spec.rb\n26:    wd.should_receive :destroy_other!\n36:    wd.should_not_receive :destroy_other!\n</code></pre>\n\n	<p>This next command will open all the files in <code>vi</code> that matched in the previous command.  (The <code>!!</code> is one of <a href=\"http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\">My Favorite Bash Substitution Tricks</a>.)</p>\n\n\n<pre><code class=\"bash\">$ vi `!! -l`\n</code></pre>\n\n	<p><code>ack</code>&#8217;s <code>-l</code> option causes it to output only the filenames containing the matches.</p>','2009-09-09 04:47:03','2009-11-14 19:01:40','2009-09-09 06:16:00','Article',NULL,NULL,NULL,NULL,0,1,27,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (21,NULL,1,'Roll Your Own Remember Me','roll-your-own-remember-me','I\'ve been setting up \"Fluid Applications\":http://fluidapp.com/ for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it\'s a native OS X application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.\r\n\r\nThis has been working really well for me, until I hit one annoyance with \"New Relic\":http://www.newrelic.com/.  This web app doesn\'t have a *remember me* feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.\r\n','I\'ve been setting up \"Fluid Applications\":http://fluidapp.com/ for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it\'s a native OS X application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.\r\n\r\nThis has been working really well for me, until I hit one annoyance with \"New Relic\":http://www.newrelic.com/.  This web app doesn\'t have a *remember me* feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.\r\n\r\nLuckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you\'re viewing.  Just create one in the \"Scripts\" menu, or add a javascript file at @~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/@. Here\'s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven\'t had to enter my user credentials since.\r\n\r\n<pre><code class=\"javascript\">\r\n// ==UserScript==\r\n// @name        login\r\n// @namespace   http://fluidapp.com\r\n// @description This keeps you logged in to new relic across browser sessions\r\n// @include     *\r\n// @author      Sam Goldstein\r\n// ==/UserScript==\r\n\r\n(function () {\r\n    if (window.fluid) {\r\n      // Session cookie identifier\r\n      var CookieName = \'_newrelic_session_id\'\r\n\r\n      function LongTermCookie(cookieName) {\r\n\r\n        // http://www.quirksmode.org/js/cookies.html#script\r\n        function createCookie(name,value,days) {\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime()+(days*24*60*60*1000));\r\n                var expires = \"; expires=\"+date.toGMTString();\r\n            }\r\n            else var expires = \"\";\r\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n        }\r\n\r\n        function readCookie(name) {\r\n            var nameEQ = name + \"=\";\r\n            var ca = document.cookie.split(\';\');\r\n            for(var i=0;i < ca.length;i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\r\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function eraseCookie(name) {\r\n            createCookie(name,\"\",-1);\r\n        }\r\n\r\n        // Set the cookie to expire in 3000 days\r\n        createCookie(cookieName, readCookie(cookieName), 3000);\r\n      }\r\n    }\r\n    new LongTermCookie(CookieName)\r\n})();\r\n</code></pre>\r\n\r\nI\'ve pasted it into \"gist\":http://gist.github.com/207763 on github.','<p>I&#8217;ve been setting up <a href=\"http://fluidapp.com/\">Fluid Applications</a> for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it&#8217;s a native <span class=\"caps\">OS X</span> application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.</p>\n\n\n	<p>This has been working really well for me, until I hit one annoyance with <a href=\"http://www.newrelic.com/\">New Relic</a>.  This web app doesn&#8217;t have a <strong>remember me</strong> feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.</p>','<p>I&#8217;ve been setting up <a href=\"http://fluidapp.com/\">Fluid Applications</a> for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it&#8217;s a native <span class=\"caps\">OS X</span> application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.</p>\n\n\n	<p>This has been working really well for me, until I hit one annoyance with <a href=\"http://www.newrelic.com/\">New Relic</a>.  This web app doesn&#8217;t have a <strong>remember me</strong> feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.</p>\n\n\n	<p>Luckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you&#8217;re viewing.  Just create one in the &#8220;Scripts&#8221; menu, or add a javascript file at <code>~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/</code>. Here&#8217;s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven&#8217;t had to enter my user credentials since.</p>\n\n\n<pre><code class=\"javascript\">\n// ==UserScript==\n// @name        login\n// @namespace   http://fluidapp.com\n// @description This keeps you logged in to new relic across browser sessions\n// @include     *\n// @author      Sam Goldstein\n// ==/UserScript==\n\n(function () {\n    if (window.fluid) {\n      // Session cookie identifier\n      var CookieName = \'_newrelic_session_id\'\n\n      function LongTermCookie(cookieName) {\n\n        // http://www.quirksmode.org/js/cookies.html#script\n        function createCookie(name,value,days) {\n            if (days) {\n                var date = new Date();\n                date.setTime(date.getTime()+(days*24*60*60*1000));\n                var expires = \"; expires=\"+date.toGMTString();\n            }\n            else var expires = \"\";\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\n        }\n\n        function readCookie(name) {\n            var nameEQ = name + \"=\";\n            var ca = document.cookie.split(\';\');\n            for(var i=0;i &lt; ca.length;i++) {\n                var c = ca[i];\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n            }\n            return null;\n        }\n\n        function eraseCookie(name) {\n            createCookie(name,\"\",-1);\n        }\n\n        // Set the cookie to expire in 3000 days\n        createCookie(cookieName, readCookie(cookieName), 3000);\n      }\n    }\n    new LongTermCookie(CookieName)\n})();\n</code></pre>\n\n	<p>I&#8217;ve pasted it into <a href=\"http://gist.github.com/207763\">gist</a> on github.</p>','2009-10-05 00:07:22','2009-10-11 22:51:15','2009-10-11 17:37:00','Article',NULL,NULL,NULL,NULL,0,1,4,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (22,NULL,1,'How to run one Test::Unit test case from vim','how-to-run-one-test-unit-test-case-from-vim','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large @Test::Unit@ test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting @!s@ will execute the current testcase based on the cursor\'s position.  Hitting @!S@ will run all the cases in the file.  It\'s intelligent about whether you\'re in a @Test::Unit@ file or an @rspec@ file.  (It will also run your scala specs if you\'re in an \"@sbt@\":http://code.google.com/p/simple-build-tool/ project.)\r\n\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','<p>I recently updated my vim script for <a href=\"http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim\">running rspec specs from vim</a>.</p>','<p>I recently updated my vim script for <a href=\"http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim\">running rspec specs from vim</a>.</p>\n\n\n	<p>I&#8217;ve been working on a project that has a large <code>Test::Unit</code> test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting <code>!s</code> will execute the current testcase based on the cursor&#8217;s position.  Hitting <code>!S</code> will run all the cases in the file.  It&#8217;s intelligent about whether you&#8217;re in a <code>Test::Unit</code> file or an <code>rspec</code> file.  (It will also run your scala specs if you&#8217;re in an <a href=\"http://code.google.com/p/simple-build-tool/\"><code>sbt</code></a> project.)</p>\n\n\n<div style=\"font-size:10px;\">\n\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\n\n      <div class=\"gist-file\">\n        <div class=\"gist-data gist-syntax\">\n\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\n\n        </div>\n\n        <div class=\"gist-meta\">\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\n        </div>\n\n      </div>\n\n</div>\n\n</div>','2009-11-28 23:52:57','2009-11-29 02:41:47','2009-11-28 23:56:00','Article',NULL,NULL,NULL,NULL,0,1,6,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (23,NULL,1,'Poor Man\'s Notification System','poor-man-s-notification-system','','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n  mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.\r\n\r\nIf you don\'t have a \"mail\":http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1 command you can install @mailutils@ on Ubuntu.\r\n\r\n<pre><code class=\"bash\">\r\n$ sudo apt-get install mailutils\r\n</code></pre>','','<p>This is the easiest way to have a long running script, running in a <a href=\"http://en.wikipedia.org/wiki/GNU_Screen\">screen</a> session notify you when it finishes (or when it totally craps out.)</p>\n\n\n<pre><code class=\"bash\">\n$ ./long-running-script.rb; \\\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\n  mail -s \"Your thing died\" sam@drasticcode.com\n</code></pre>\n\n	<p>Run it as a one-liner and stop compulsively checking on it.</p>\n\n\n	<p>If you don&#8217;t have a <a href=\"http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1\">mail</a> command you can install <code>mailutils</code> on Ubuntu.</p>\n\n\n<pre><code class=\"bash\">\n$ sudo apt-get install mailutils\n</code></pre>','2010-04-22 04:28:02','2010-06-26 05:32:55','2010-04-21 14:17:00','Article',NULL,NULL,NULL,NULL,0,1,5,1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (33,NULL,1,'Android Developers, Don\'t Show Me Buttons That Ask For Money','android-developers-don-t-show-me-buttons-that-ask-for-money','','','','','2010-06-26 05:34:24','2010-06-26 05:34:24',NULL,'Article',NULL,NULL,NULL,NULL,0,1,1,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (34,NULL,1,'Wiff.me - A webpage differ','wiff-me-a-webpage-differ','','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Just \"replace any single quotes\":http://unixsupremacy.tribe.net/thread/0d8d161d-60b1-480b-bf29-0acd5835a392#1b9a92ca-c284-4bb2-b131-7d725de05a86 in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','','<p>The other night at <a href=\"http://twitter.com/NoPoCoNi\">nopoconi</a> I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It&#8217;s up on <strong><a href=\"http://wiff.me\">wiff.me</a></strong>.</p>\n\n\n	<p>In the process I also discovered this crazy bash command that will pipe two web requests as inputs through <code>diff</code> using subshells.  It&#8217;s kind of an insane one-liner.</p>\n\n\n<pre class=\"bash\">\n<code>\ndiff &lt;(curl \'drasticcode.com\') &lt;(curl \'www.drasticcode.com\')\n</code>\n</pre>\n\n	<p>Needless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  <a href=\"http://twitter.com/donpdonp\">@donpdonp</a> taught me how to sanitize the user provided data in the bash command.  Just <a href=\"http://unixsupremacy.tribe.net/thread/0d8d161d-60b1-480b-bf29-0acd5835a392#1b9a92ca-c284-4bb2-b131-7d725de05a86\">replace any single quotes</a> in the user provided urls with two single quotes.  I still ended up using <a href=\"http://www.sinatrarb.com/\">Sinatra</a> and <a href=\"http://curb.rubyforge.org/\">Curb</a>.</p>','2010-06-26 06:06:55','2010-06-26 06:28:14','2010-06-26 06:08:00','Article',NULL,NULL,NULL,NULL,0,1,4,1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (35,NULL,1,'Setting up a Macbook to dual boot into Ubuntu and OS X','setting-up-a-macbook-to-dual-boot-into-ubuntu-and-os-x','Recently I switched from using OS X on my development laptop (a macbook pro) to Ubuntu.\r\n\r\nI set up my laptop to dual boot into Ubuntu or OS X.  So far I\'ve been using Ubuntu full time for a few weeks and am happy with the results.\r\n\r\nHere\'s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind YMMV.','Recently I switched from using OS X on my development laptop (a macbook pro) to Ubuntu.\r\n\r\nI set up my laptop to dual boot into Ubuntu or OS X.  So far I\'ve been using Ubuntu full time for a few weeks and am happy with the results.\r\n\r\nHere\'s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind YMMV.\r\n\r\nh3. Backup\r\n\r\nMake a backup of your system.  This wasn\'t necessary in my case (in hindsight), but the experts will tell you that having a backup is a great way to CYA.  SuperDuper is a handy OS X utility that will make a bootable backup of your entire hard drive.  Definitely do this before moving forward.\r\n\r\nh3. Partition your hard disk\r\n\r\nI opened Disk Utility (in the Applications > Utilities folder) and partitioned my main hard disk partion into two equal parts.  In my case I have a 500Gb HD and was using less than half of it, so it wasn\'t necessary to clear up any space.  I was able to do this successfully without data loss.\r\n\r\nh3. Download Ubuntu\r\n\r\nI downloaded the 64 bit version of Ubuntu 10.04 from ubuntu.com, and burned this to a CD using Disk Utility.  It may save you some headaches down the line to install the 32 bit version, but I wanted 64 bit.\r\n\r\nh3. Install Ubuntu\r\n\r\nRestart your macbook with the Ubuntu install disk in the CD drive.  Hold the ALT key as you restart, and choose to boot from the \"Windows\" CD.  Follow the prompts to intall Ubuntu.\r\n\r\nWhen asked about disk partitions choose to *specify partions manually*.  I choose to install the boot partition on @/dev/sda3@ (the partition I just created.), and chose to use @/dev/sda4@ for swap.  *Be careful here not to install over your OS X partition* (possibly @/dev/sda2@), and hose your OS X system.\r\n\r\nEnter a username and password, and complete the installation process.\r\n\r\nh3. Booting into Ubuntu\r\n\r\nOnce Ubuntu is installed you can boot into it by restarting, holding the ALT key, and choosing to boot into \"Windows\".\r\n\r\nh3. Getting things set up nicely\r\n\r\nOnce you\'re in Ubuntu you\'ll want to set up wireless networking and several other things.  You can figure out which specific macbook you have by running:\r\n\r\n    sudo dmidecode -s system-product-name\r\n\r\nIn my case I own a MacBookPro5,3.  Each macbook/Ubuntu version combo has its own wiki, which is very valuable at this stage.  For example \"https://help.ubuntu.com/community/MacBookPro5-3/Karmic\":https://help.ubuntu.com/community/MacBookPro5-3/Karmic\r\n\r\nh3. Getting wireless networking to work\r\n\r\nConnect to the internet using an ethernet cable and run:\r\n\r\n    sudo apt-get bcmwl-kernel-source\r\n\r\nRestart, and bam, you\'re wireless.\r\n\r\nh3. Touchpad\r\n\r\nIn the gnome main menu @System > Preferences > Mouse > Touchpad@.\r\n\r\nh3. Sound\r\n\r\nJust turn up the volume.  This took a minute to figure out.\r\n\r\nh3. Accessing your OS X partition and data\r\n\r\nYou can mount your OS X partion and access the data on it from Ubuntu.\r\n\r\nFirst edit @/etc/fstab@ and add a line similar to this:\r\n\r\n    /dev/sda2   /mnt/macHD      auto    defaults        0       1\r\n\r\nMake sure that you select the right device (@/dev/sdaxxx@) that contains your OS X installation, and the the mount point (@/mnt/macHD@) is an existing directory.\r\n\r\nThen run:\r\n\r\n    sudo mount -t auto /dev/sda2 /mnt/macHD\r\n\r\nYou should be able to access your OS X data from the @/mnt/macHD@ directory.\r\n','<p>Recently I switched from using <span class=\"caps\">OS X</span> on my development laptop (a macbook pro) to Ubuntu.</p>\n\n\n	<p>I set up my laptop to dual boot into Ubuntu or <span class=\"caps\">OS X</span>.  So far I&#8217;ve been using Ubuntu full time for a few weeks and am happy with the results.</p>\n\n\n	<p>Here&#8217;s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind <span class=\"caps\">YMMV</span>.</p>','<p>Recently I switched from using <span class=\"caps\">OS X</span> on my development laptop (a macbook pro) to Ubuntu.</p>\n\n\n	<p>I set up my laptop to dual boot into Ubuntu or <span class=\"caps\">OS X</span>.  So far I&#8217;ve been using Ubuntu full time for a few weeks and am happy with the results.</p>\n\n\n	<p>Here&#8217;s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind <span class=\"caps\">YMMV</span>.</p>\n\n\n	<h3>Backup</h3>\n\n\n	<p>Make a backup of your system.  This wasn&#8217;t necessary in my case (in hindsight), but the experts will tell you that having a backup is a great way to <span class=\"caps\">CYA</span>.  SuperDuper is a handy <span class=\"caps\">OS X</span> utility that will make a bootable backup of your entire hard drive.  Definitely do this before moving forward.</p>\n\n\n	<h3>Partition your hard disk</h3>\n\n\n	<p>I opened Disk Utility (in the Applications &gt; Utilities folder) and partitioned my main hard disk partion into two equal parts.  In my case I have a 500Gb HD and was using less than half of it, so it wasn&#8217;t necessary to clear up any space.  I was able to do this successfully without data loss.</p>\n\n\n	<h3>Download Ubuntu</h3>\n\n\n	<p>I downloaded the 64 bit version of Ubuntu 10.04 from ubuntu.com, and burned this to a CD using Disk Utility.  It may save you some headaches down the line to install the 32 bit version, but I wanted 64 bit.</p>\n\n\n	<h3>Install Ubuntu</h3>\n\n\n	<p>Restart your macbook with the Ubuntu install disk in the CD drive.  Hold the <span class=\"caps\">ALT</span> key as you restart, and choose to boot from the &#8220;Windows&#8221; CD.  Follow the prompts to intall Ubuntu.</p>\n\n\n	<p>When asked about disk partitions choose to <strong>specify partions manually</strong>.  I choose to install the boot partition on <code>/dev/sda3</code> (the partition I just created.), and chose to use <code>/dev/sda4</code> for swap.  <strong>Be careful here not to install over your <span class=\"caps\">OS X</span> partition</strong> (possibly <code>/dev/sda2</code>), and hose your <span class=\"caps\">OS X</span> system.</p>\n\n\n	<p>Enter a username and password, and complete the installation process.</p>\n\n\n	<h3>Booting into Ubuntu</h3>\n\n\n	<p>Once Ubuntu is installed you can boot into it by restarting, holding the <span class=\"caps\">ALT</span> key, and choosing to boot into &#8220;Windows&#8221;.</p>\n\n\n	<h3>Getting things set up nicely</h3>\n\n\n	<p>Once you&#8217;re in Ubuntu you&#8217;ll want to set up wireless networking and several other things.  You can figure out which specific macbook you have by running:</p>\n\n\n	<pre><code>sudo dmidecode -s system-product-name</code></pre>\n\n\n	<p>In my case I own a MacBookPro5,3.  Each macbook/Ubuntu version combo has its own wiki, which is very valuable at this stage.  For example <a href=\"https://help.ubuntu.com/community/MacBookPro5-3/Karmic\">https://help.ubuntu.com/community/MacBookPro5-3/Karmic</a></p>\n\n\n	<h3>Getting wireless networking to work</h3>\n\n\n	<p>Connect to the internet using an ethernet cable and run:</p>\n\n\n	<pre><code>sudo apt-get bcmwl-kernel-source</code></pre>\n\n\n	<p>Restart, and bam, you&#8217;re wireless.</p>\n\n\n	<h3>Touchpad</h3>\n\n\n	<p>In the gnome main menu <code>System &gt; Preferences &gt; Mouse &gt; Touchpad</code>.</p>\n\n\n	<h3>Sound</h3>\n\n\n	<p>Just turn up the volume.  This took a minute to figure out.</p>\n\n\n	<h3>Accessing your <span class=\"caps\">OS X</span> partition and data</h3>\n\n\n	<p>You can mount your <span class=\"caps\">OS X</span> partion and access the data on it from Ubuntu.</p>\n\n\n	<p>First edit <code>/etc/fstab</code> and add a line similar to this:</p>\n\n\n	<pre><code>/dev/sda2   /mnt/macHD      auto    defaults        0       1</code></pre>\n\n\n	<p>Make sure that you select the right device (<code>/dev/sdaxxx</code>) that contains your <span class=\"caps\">OS X</span> installation, and the the mount point (<code>/mnt/macHD</code>) is an existing directory.</p>\n\n\n	<p>Then run:</p>\n\n\n	<pre><code>sudo mount -t auto /dev/sda2 /mnt/macHD</code></pre>\n\n\n	<p>You should be able to access your <span class=\"caps\">OS X</span> data from the <code>/mnt/macHD</code> directory.</p>','2010-09-15 05:29:20','2010-09-15 05:34:39','2010-09-15 05:33:00','Article',NULL,NULL,NULL,NULL,0,1,1,1,0,30,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (36,NULL,1,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n  end\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">  define_index do\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n  end\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the some literal YAML text,\r\n and stores whether it was found as a\r\ntrue/false attribute in the search index.  This is way easier than deserializing \r\nthe YAML and storing this value in a boolean field in mySQL.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>','<p>At <a href=\"http://aboutus.org\">AboutUs</a> where I work we recently re-implemented the\nsite&#8217;s search feature.  Behind the scenes the new search uses\n<a href=\"http://sphinxsearch.com\">Sphinx</a> (a super-fast and scalable search engine) and\n<a href=\"http://freelancing-god.github.com/ts/en/\">Thinking Sphinx</a> (which allows easy\nconfiguration and querying of Sphinx from within Rails).</p>\n\n\n	<p>One thing that makes Sphinx so much faster than alternatives like Solr is that\nit communicates directly with your database when it is building its search\nindex.  This is far faster than talking with your application layer, and\nindexing the result of your application models&#8217; methods.  In our case we&#8217;re\nable to reindex about 40 million records in around 4 hours.  Solr used to take\ndays.</p>\n\n\n	<p>There is a major disadvantage to this approach though.  Since Sphinx is\ntalking directly to the database, you can&#8217;t index the results of method calls\non your ruby objects.  I&#8217;ve discovered though that this is not nearly as\nlimiting as it may sound, since you <strong>can</strong> index the results of <span class=\"caps\">SQL</span> functions.\nEven better, manipulating and transforming your data with <span class=\"caps\">SQL</span> functions as you\nindex it, is <strong>virtually free</strong>.  I haven&#8217;t noticed any impact on our index\ntimes, after adding many functions to our indexing process.</p>\n\n\n	<p>Here are a couple real examples.</p>\n\n\n	<p>In our app, we deal a lot with domain names, and websites.  One feature of our\nsearch displays domain names that match your query.  Our stakeholders wanted\nthese to be sorted by the importance of the tld, with <code>.com</code> at the top,\nfollowed by <code>.org</code>, <code>.gov</code>, etc. Since this sort order is basically arbitrary\nI replace each tld with an integer, using mySQL&#8217;s <code>REPLACE</code> function, store\nthis attribute in Sphinx, and sort on it when querying.</p>\n\n\nThis is what it looks like in Thinking Sphinx&#8217;s <code>define_index</code> block:\n<pre><code class=\"ruby\">  define_index do\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\n    # Useful in \"exact domain match\" search\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\" \n    has replace_str, :as =&gt; :page_title_sortable_by_tld, :type =&gt; :string\n  end\n</code></pre>\n\n	<p>It&#8217;s not pretty, but it&#8217;s far prettier than trying to do this in ruby, at\nquery time.  Now we just add an <code>:order =&gt; \"page_title_sortable_by_tld ASC\"</code> to\nour calls to <code>Page.search</code>.</p>\n\n\nAnother place we use this is to convert a flag stored in a serialized <span class=\"caps\">YAML</span> structure\ninto a boolean attribute that Sphinx can sort on and filter by.\n<pre><code class=\"ruby\">  define_index do\n    # Allow favoring in search results based on whether a page is\n    # \"pro_followed\" (i.e. it has its external links followed).\n    #\n    # Since this data is stored in a serialized YAML structure we need some SQL\n    # function fanciness to access this data as a boolean value.  If the below\n    # YAML key value appear in the text field LOCATE will return an integer\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\n    # \"&gt; 0\") allows sphinx to interpret this as a boolean value.\n    join page_data_latest.page_datum\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) &gt; 0\',\n      :as =&gt; :pro_followed, :type =&gt; :boolean\n  end\n</code></pre>\n\n	<p>This code searches a field in the database for the some literal <span class=\"caps\">YAML</span> text,\n and stores whether it was found as a\ntrue/false attribute in the search index.  This is way easier than deserializing \nthe <span class=\"caps\">YAML</span> and storing this value in a boolean field in mySQL.</p>\n\n\n	<p>This has proved to be a very useful technique for us, and is far easier and\nmore efficient than denormalizing some of our data to a &#8220;search text&#8221; column,\nor doing a bunch of post-querying processing within Ruby on Rails.</p>','2010-10-13 14:39:05','2010-11-10 04:20:42','2010-10-13 14:42:00','Article',NULL,NULL,NULL,NULL,0,1,6,1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (39,NULL,1,'Adding Failover and Load Balancing to Thinking Sphinx','adding-failover-and-load-balancing-to-thinking-sphinx','After we set up \"AboutUs\'s search feature\":http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx our (awesome) sysadmin wanted a redundant setup.  He doesn\'t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.\r\n\r\nIt turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).\r\n','After we set up \"AboutUs\'s search feature\":http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx our (awesome) sysadmin wanted a redundant setup.  He doesn\'t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.\r\n\r\nIt turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).\r\n\r\nBasically instead of a @sphinx.yml@ like this:\r\n\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  address: 10.1.0.42\r\n  listen: 0.0.0.0\r\n</code></pre>\r\n\r\nIt looks this:\r\n\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  timeout: 0.5\r\n  address:\r\n  - 10.1.0.42\r\n  - 10.1.0.43\r\n  listen: 0.0.0.0\r\n</code></pre>\r\n\r\nQueries will load balance between the multiple servers specified in @address@ (it\'s still ok to have just one), and in the event of a failure they\'ll failover to the other servers.  You can also specify a timeout option, and the clients will failover after they\'ve hit it.  (This is good for cases where the server is totally down, to avoid waiting on a TCP timeout of around 30 seconds.)\r\n\r\nThese changes were pulled back into \"ThinkingSphinx\":https://github.com/freelancing-god/thinking-sphinx/commit/5eea57e6329c9bd25b29ebeab535e9c5d291708c  and \"Riddle\":https://github.com/freelancing-god/riddle/pull/12, so they should be available when the next versions of these gems are released.','<p>After we set up <a href=\"http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx\">AboutUs&#8217;s search feature</a> our (awesome) sysadmin wanted a redundant setup.  He doesn&#8217;t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.</p>\n\n\n	<p>It turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).</p>','<p>After we set up <a href=\"http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx\">AboutUs&#8217;s search feature</a> our (awesome) sysadmin wanted a redundant setup.  He doesn&#8217;t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.</p>\n\n\n	<p>It turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).</p>\n\n\n	<p>Basically instead of a <code>sphinx.yml</code> like this:</p>\n\n\n<pre><code class=\"yaml\">production:\n  morphology: stem_en\n  mem_limit: 1600M\n  address: 10.1.0.42\n  listen: 0.0.0.0\n</code></pre>\n\n	<p>It looks this:</p>\n\n\n<pre><code class=\"yaml\">production:\n  morphology: stem_en\n  mem_limit: 1600M\n  timeout: 0.5\n  address:\n  - 10.1.0.42\n  - 10.1.0.43\n  listen: 0.0.0.0\n</code></pre>\n\n	<p>Queries will load balance between the multiple servers specified in <code>address</code> (it&#8217;s still ok to have just one), and in the event of a failure they&#8217;ll failover to the other servers.  You can also specify a timeout option, and the clients will failover after they&#8217;ve hit it.  (This is good for cases where the server is totally down, to avoid waiting on a <span class=\"caps\">TCP</span> timeout of around 30 seconds.)</p>\n\n\n	<p>These changes were pulled back into <a href=\"https://github.com/freelancing-god/thinking-sphinx/commit/5eea57e6329c9bd25b29ebeab535e9c5d291708c\">ThinkingSphinx</a>  and <a href=\"https://github.com/freelancing-god/riddle/pull/12\">Riddle</a>, so they should be available when the next versions of these gems are released.</p>','2010-11-10 04:26:05','2010-11-10 04:49:54','2010-11-10 04:49:00','Article',NULL,NULL,NULL,NULL,0,1,3,1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (40,NULL,1,'The easiest way to diff two strings in ruby','the-easiest-way-to-diff-two-strings-in-ruby','','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nI wanted to make it dead simple to generate attractive diff output from within a ruby application.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n\r\n\r\n<pre><code>>> Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\r\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\r\n                  <li class=\"del\"><del>\"<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>\" said<strong> I</strong>.</del></li>\r\n                  <li class=\"ins\"><ins>\"<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a\" <strong>I </strong>said.</ins></li>\r\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\r\n                </ul>\r\n              </div>\r\n\r\nYou can find out more in the \"README\":https://github.com/samg/diffy/blob/master/README.md','','<p>I just released version 2.0 of <a href=\"https://github.com/samg/diffy\">Diffy</a>.</p>\n\n\n	<p>I wanted to make it dead simple to generate attractive diff output from within a ruby application.</p>\n\n\n	<p>Here&#8217;s how you use it:</p>\n\n\n	<pre><code>$ sudo gem install diffy\n$ irb\n&gt;&gt; string1 = &lt;&lt;-TXT\n&gt;\" Hello how are you\n&gt;\" I\'m fine\n&gt;\" That\'s great\n&gt;\" TXT\n=&gt; \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\" \n&gt;&gt; string2 = &lt;&lt;-TXT\n&gt;\" Hello how are you?\n&gt;\" I\'m fine\n&gt;\" That\'s swell\n&gt;\" TXT\n=&gt; \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\" \n&gt;&gt; puts Diffy::Diff.new(string1, string2)\n-Hello how are you\n+Hello how are you?\n I\'m fine\n-That\'s great\n+That\'s swell</code></pre>\n\n\n	<p>It also will generate nice html for you:</p>\n\n\n<pre><code>&gt;&gt; Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\n                  <li class=\"del\"><del>&#8220;<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>&#8221; said<strong> I</strong>.</del></li>\n                  <li class=\"ins\"><ins>&#8220;<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a&#8221; <strong>I </strong>said.</ins></li>\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\n                </ul>\n              </div>\n\n	<p>You can find out more in the <a href=\"https://github.com/samg/diffy/blob/master/README.md\"><span class=\"caps\">README</span></a></p>','2010-11-26 18:08:52','2010-12-09 04:42:50','2010-11-26 18:21:00','Article',NULL,NULL,NULL,NULL,0,1,4,1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (41,NULL,1,'Making Diffy a little less creative','making-diffy-a-little-less-creative','','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html diff output.  \r\n\r\nWard Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off as a bit of a know-it-all when it found one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','','<p>I just pushed a new version of my <a href=\"https://github.com/samg/diffy\">Diffy</a> ruby gem.</p>\n\n\n	<p>This version does a better job when highlighting parts of lines in the html diff output.</p>\n\n\n	<p>Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off as a bit of a know-it-all when it found one letter similarities between &#8220;Unescaped&#8221; and &#8220;Swallowed&#8221;.</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>\n\n	<p>Version 2.0.1 suppresses this creativity a little bit for clearer output:</p>\n\n\n<div class=\"diff\">\n                <ul>\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like &#8217;/File:Picture.jpg&#8217; instead of relative links (i.e. &#8216;File:Picture.jpg&#8217;).</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won&#8217;t work at all.</span></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki&#8217;s behavior</strong>.</ins></li>\n                  <li class=\"unchanged\"><span></span></li>\n                  <li class=\"unchanged\"><span>&#8220;To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.&#8221;</span></li>\n                </ul>\n              </div>','2010-12-09 04:38:58','2010-12-09 05:06:45','2010-12-09 04:30:00','Article',NULL,NULL,NULL,NULL,0,1,5,1,0,-1,'textile_filter',NULL,NULL,0);
INSERT INTO `contents` VALUES (42,NULL,1,'pwdeath - ssh keys for everyone','pwdeath-ssh-keys-for-everyone','','How many times a day do you see something like this?\r\n\r\n<pre><code>\r\n$ ssh sam@drasticcode.com\r\nsam@drasticcode.com\'s password:\r\n</code></pre>\r\n\r\nWell f**k that.  Typing in ssh passwords is for suckers.  Personally I try to never do it, and to make it easier I have a @pwdeath@ script to make setting up ssh keys painlessly easy.  Once you\'ve generated ssh keys (you can do this with @ssh-keygen@) put this script in your @PATH@.\r\n\r\n<pre><code class=\"bash\">\r\n#!/bin/bash\r\n\r\nkey=`cat ~/.ssh/id_rsa.pub`\r\nfor host in $*; do\r\n  ssh $host \"mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod 700 ~/.ssh && chmod -R 600 ~/.ssh/* && echo \'$key\' >> ~/.ssh/authorized_keys\"\r\ndone\r\n</code></pre>\r\n\r\nThen you invoke it like this:\r\n\r\n\r\n<pre><code class=\"bash\">\r\n$ pwdeath sam@server1.com sam@server2.com\r\n</code></pre>\r\n\r\nType your password once for each server, then never type it again.  Your fingers will thank you.','','<p>How many times a day do you see something like this?</p>\n\n\n<pre><code>\n$ ssh sam@drasticcode.com\nsam@drasticcode.com\'s password:\n</code></pre>\n\n	<p>Well f**k that.  Typing in ssh passwords is for suckers.  Personally I try to never do it, and to make it easier I have a <code>pwdeath</code> script to make setting up ssh keys painlessly easy.  Once you&#8217;ve generated ssh keys (you can do this with <code>ssh-keygen</code>) put this script in your <code>PATH</code>.</p>\n\n\n<pre><code class=\"bash\">\n#!/bin/bash\n\nkey=`cat ~/.ssh/id_rsa.pub`\nfor host in $*; do\n  ssh $host \"mkdir -p ~/.ssh &#38;&#38; touch ~/.ssh/authorized_keys &#38;&#38; chmod 700 ~/.ssh &#38;&#38; chmod -R 600 ~/.ssh/* &#38;&#38; echo \'$key\' &gt;&gt; ~/.ssh/authorized_keys\" \ndone\n</code></pre>\n\n	<p>Then you invoke it like this:</p>\n\n\n<pre><code class=\"bash\">\n$ pwdeath sam@server1.com sam@server2.com\n</code></pre>\n\n	<p>Type your password once for each server, then never type it again.  Your fingers will thank you.</p>','2011-04-06 16:15:10','2011-04-06 16:16:06','2011-04-06 16:15:00','Article',NULL,NULL,NULL,NULL,0,1,1,1,0,-1,'textile_filter',NULL,NULL,0);
/*!40000 ALTER TABLE `contents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `events`
--

DROP TABLE IF EXISTS `events`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `events` (
  `id` int(11) NOT NULL auto_increment,
  `mode` varchar(255) default NULL,
  `user_id` int(11) default NULL,
  `article_id` int(11) default NULL,
  `title` text,
  `body` text,
  `created_at` datetime default NULL,
  `author` varchar(100) default NULL,
  `comment_id` int(11) default NULL,
  `site_id` int(11) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=203 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `events`
--

LOCK TABLES `events` WRITE;
/*!40000 ALTER TABLE `events` DISABLE KEYS */;
INSERT INTO `events` VALUES (2,'publish',1,2,'A smart pluralizing helper for rails.','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so my pair and I wrote this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-05-20 05:35:17',NULL,NULL,1);
INSERT INTO `events` VALUES (3,'edit',1,2,'A smart pluralizing helper for rails.','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-05-20 06:59:24',NULL,NULL,1);
INSERT INTO `events` VALUES (4,'edit',1,2,'Smart Pluralize for Rails','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nSince Ruby lets you add methods to any class we just reopen @String@ and add a @smart_pluralize@ method to it.  Having the method take the string that its called on as a default argument (which is converted to an integer) leads to some interesting but intuitive behavior.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-05-20 08:11:59',NULL,NULL,1);
INSERT INTO `events` VALUES (5,'edit',1,2,'Smart Pluralize for Rails','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot on one project, so the guy I was pair programming with at the time and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-05-20 08:16:54',NULL,NULL,1);
INSERT INTO `events` VALUES (6,'publish',1,3,'Resizing Textareas as You Type with Prototype','','2009-05-26 01:38:17',NULL,NULL,1);
INSERT INTO `events` VALUES (7,'publish',1,4,'Resizing Textareas as You Type with JQuery','','2009-05-26 01:39:03',NULL,NULL,1);
INSERT INTO `events` VALUES (8,'edit',1,4,'Resizing Textareas as You Type with JQuery','<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 01:49:20',NULL,NULL,1);
INSERT INTO `events` VALUES (9,'edit',1,3,'Resizing Textareas as You Type with Prototype','<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/90) + 1\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(\'scaleTextareas();\', 1000)\r\n}\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});\r\n</code></pre>\r\n','2009-05-26 01:51:37',NULL,NULL,1);
INSERT INTO `events` VALUES (10,'edit',1,4,'Resizing Textareas as You Type with JQuery','\r\n<textarea>\r\nDue to circumstances beyond your control, you are master of your fate\r\nand captain of your soul.\r\n\r\nWhom computers would destroy, they must first drive mad.\r\n\r\nThe sooner you make your first 5000 mistakes, the sooner you will be\r\nable to correct them.\r\n                -- Nicolaides\r\n\r\nRule of Defactualization:\r\n  Information deteriorates upward through bureaucracies.\r\n\r\nDocumentation is like sex: when it is good, it is very, very good; and \r\nwhen it is bad, it is better than nothing.\r\n    -- Dick Brandon\r\n\r\n</textarea>\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:03:43',NULL,NULL,1);
INSERT INTO `events` VALUES (11,'edit',1,4,'Resizing Textareas as You Type with JQuery','<textarea>Due to circumstances beyond your control, you are master of your fate\r\nand captain of your soul.</textarea>\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:04:56',NULL,NULL,1);
INSERT INTO `events` VALUES (12,'edit',1,4,'Resizing Textareas as You Type with JQuery','<textarea>Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:05:20',NULL,NULL,1);
INSERT INTO `events` VALUES (13,'edit',1,4,'Resizing Textareas as You Type with JQuery','<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Spill your guts:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:07:43',NULL,NULL,1);
INSERT INTO `events` VALUES (14,'edit',1,4,'Resizing Textareas as You Type with JQuery','<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Spill your guts:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n\r\nHere\'s the code:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:09:49',NULL,NULL,1);
INSERT INTO `events` VALUES (15,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has empty.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:20:42',NULL,NULL,1);
INSERT INTO `events` VALUES (16,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has empty.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:21:07',NULL,NULL,1);
INSERT INTO `events` VALUES (17,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running jQuery\":http://jquery.com ) and all your textareas expand to fit the text the user has empty.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:21:55',NULL,NULL,1);
INSERT INTO `events` VALUES (18,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has empty.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>','2009-05-26 05:22:15',NULL,NULL,1);
INSERT INTO `events` VALUES (19,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">\r\n/*\r\n * Scale all textareas dynamically on the page\r\n */\r\nfunction scaleAll(){\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0 \r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/64) + 1\r\n    })    \r\n    t.style.height = Math.floor(m + 8) + \'em\'; \r\n    setTimeout(\"scaleAll();\", 1000);\r\n  })\r\n}\r\n$(document).ready(function(){\r\n  scaleAll()\r\n})\r\n\r\n\r\n</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in Internet Explorer (after some refactoring).  ','2009-05-26 05:24:22',NULL,NULL,1);
INSERT INTO `events` VALUES (20,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user type. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires jQuery\r\n*/\r\nfunction scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n    setTimeout(scaleTextareas, 1000);\r\n  });\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});\r\n$(document).ready(function(){\r\n  scaleAll()\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 20:27:05',NULL,NULL,1);
INSERT INTO `events` VALUES (21,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n<input type=\"submit\" value=\"Submit\" onclick=\"return false\"/>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires jQuery\r\n*/\r\nfunction scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n    setTimeout(scaleTextareas, 1000);\r\n  });\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 20:27:36',NULL,NULL,1);
INSERT INTO `events` VALUES (22,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project I do.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires jQuery\r\n*/\r\nfunction scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n    setTimeout(scaleTextareas, 1000);\r\n  });\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 20:29:55',NULL,NULL,1);
INSERT INTO `events` VALUES (23,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires jQuery\r\n*/\r\nfunction scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n    setTimeout(scaleTextareas, 1000);\r\n  });\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 20:30:58',NULL,NULL,1);
INSERT INTO `events` VALUES (24,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas() {\r\n  var textareaWidth = 65;\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/textareaWidth) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-26 21:34:05',NULL,NULL,1);
INSERT INTO `events` VALUES (25,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  The only problem is what if you\'re not running jQuery.  Rails by default uses the \"Prototype\":http://www.prototypejs.org/ javascript framework, and you may not want to switch to jQuery just for fancy-pancy resizing textareas.  Well not to worry.  Here\'s the same functionality built on top of Prototype:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires Prototype\r\n*/\r\nfunction scaleTextareas(){\r\n  var textareaWidth = 65;\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/textareaWidth) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n','2009-05-27 01:52:53',NULL,NULL,1);
INSERT INTO `events` VALUES (26,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires Prototype\r\n*/\r\nfunction scaleTextareas(){\r\n  var textareaWidth = 65;\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/textareaWidth) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextareas/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-27 20:00:16',NULL,NULL,1);
INSERT INTO `events` VALUES (27,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n* Scale all textareas dynamically on the page\r\n* Requires Prototype\r\n*/\r\nfunction scaleTextareas(){\r\n  var textareaWidth = 65;\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/textareaWidth) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-27 20:04:58',NULL,NULL,1);
INSERT INTO `events` VALUES (28,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-28 07:31:34',NULL,NULL,1);
INSERT INTO `events` VALUES (29,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">function scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(textareaWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-28 07:32:37',NULL,NULL,1);
INSERT INTO `events` VALUES (30,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(textareaWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-28 07:34:25',NULL,NULL,1);
INSERT INTO `events` VALUES (31,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-05-28 07:39:03',NULL,NULL,1);
INSERT INTO `events` VALUES (32,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-05-28 07:45:05',NULL,NULL,1);
INSERT INTO `events` VALUES (33,'edit',1,4,'Resizing Textareas as You Type with jQuery','Here\'s some code I\'m going to use on every project from now on.  It makes all the @textarea@ fields in your forms resize dynamically as the user types. Drop it \"unobtrusively\":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript into any page (running \"jQuery\":http://jquery.com) and all your textareas expand to fit the text the user has entered.\r\n\r\n<form action=\"\" method=\"get\">\r\n<label for=\"stream\">Try it out:</label>\r\n<textarea id=\"stream\">Due to circumstances beyond your control, you are master of your fate and captain of your soul.</textarea>\r\n</form>\r\n<br/><br/>\r\n\r\nHere\'s \"the code\":http://gist.github.com/117849:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires jQuery\r\n */\r\nfunction scaleTextareas() {\r\n  $(\'textarea\').each(function(i, t){\r\n    var m = 0;\r\n    $($(t).val().split(\"\\n\")).each(function(i, s){\r\n      m += (s.length/(t.offsetWidth/10)) + 1;\r\n    });\r\n    t.style.height = Math.floor(m + 8) + \'em\';\r\n  });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\n$(document).ready(function(){\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nI\'ve tested it in FF3, Safari, and it even works in IE6 and IE7 (after some refactoring).  ','2009-06-01 20:33:42',NULL,NULL,1);
INSERT INTO `events` VALUES (34,'edit',1,3,'Resizing Textareas as You Type with Prototype','In my \"last post\":http://drasticcode.com/2009/5/26/resizing-textareas-as-you-type-with-jquery I described how you can use jQuery to easily add dynamically scaling textareas to your site.  Now here\'s one for everyone using Rail\'s standard javascript framework \"Prototype\":http://www.prototypejs.org/:\r\n\r\n<pre><code class=\"javascript\">/*\r\n * Scale all textareas dynamically on the page\r\n * Requires Prototype\r\n */\r\nfunction scaleTextareas(){\r\n  $$(\'textarea\').each(function(t){\r\n      t.style.height = Math.floor($F(t).split(\'\\n\').inject(1, function(m, s){\r\n        return m += (s.length/(t.offsetWidth/10)) + 1;\r\n      })) + 8 + \'em\';\r\n    });\r\n  setTimeout(scaleTextareas, 1000);\r\n};\r\nEvent.observe(window, \'load\', function() {\r\n  scaleTextareas();\r\n});</code></pre>\r\n\r\nIts tested in Firefox, Safari, IE6 and IE7.\r\n\r\nHere\'s \"a demo\":http://drasticcode.com/demo/resizetextarea/prototype.html and here\'s \"the gist\":http://gist.github.com/99346.\r\n','2009-06-02 05:38:11',NULL,NULL,1);
INSERT INTO `events` VALUES (35,'publish',1,5,'How to load a YAML config object','One of Rails\' selling points is \"convention over configuration\":http://en.wikipedia.org/wiki/Convention_over_Configuration, but most apps do need some configuration.  database.yml is a great example.\r\n\r\nHere\'s some code that loads data into a ruby class from a \"YAML\":http://www.yaml.org/start.html config file.  Just like database.yml the configuration is specific to the rails environment you\'re running in.\r\n\r\n<pre><code class=\"ruby\">\r\nclass MyClass\r\n  def self.config_file\r\n    File.join(RAILS_ROOT, \'config\', \'my_class.yml\')\r\n  end \r\n\r\n  def self.config\r\n    YAML.load(File.read(config_file)).with_indifferent_access[RAILS_ENV]\r\n  end \r\n\r\n  def config\r\n    self.class.config\r\n  end \r\nend\r\n</code></pre>\r\n\r\nNow you can do things like this in your instance and class methods:\r\n\r\n<pre><code class=\"ruby\">\r\ndef where_am_i\r\n  config[:host]\r\nend\r\n</code></pre>\r\n\r\nThe YAML file would look like this:\r\n\r\n<pre><code class=\"yaml\">\r\ndevelopment:\r\n  host: localhost\r\ntest:\r\n  host: test.host\r\nproduction:\r\n  host: your_production_host.com\r\n</code></pre>','2009-06-10 17:13:51',NULL,NULL,1);
INSERT INTO `events` VALUES (36,'publish',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html','2009-06-17 22:47:59',NULL,NULL,1);
INSERT INTO `events` VALUES (37,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>','2009-06-17 22:53:06',NULL,NULL,1);
INSERT INTO `events` VALUES (38,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with *search_item* classes, and these contain an element with a *search_text* class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>','2009-06-17 22:56:02',NULL,NULL,1);
INSERT INTO `events` VALUES (39,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with *search_item* classes, and these contain an element with a *search_text* class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\n','2009-06-17 22:58:49',NULL,NULL,1);
INSERT INTO `events` VALUES (40,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with *search_item* classes, and these contain an element with a *search_text* class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like _a.*z_ will work just fine.\r\n','2009-06-17 23:00:45',NULL,NULL,1);
INSERT INTO `events` VALUES (41,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like _a.*z_ will work just fine.\r\n','2009-06-17 23:01:23',NULL,NULL,1);
INSERT INTO `events` VALUES (42,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.\r\n','2009-06-17 23:02:44',NULL,NULL,1);
INSERT INTO `events` VALUES (43,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nHere\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','2009-06-17 23:05:28',NULL,NULL,1);
INSERT INTO `events` VALUES (44,'edit',1,6,'Instant Search in pure Javascript (almost instantly)','Here\'s a really simple method for creating an instant search for a list of items.  It lets you quickly filter a long list or table down to the few items you\'re looking for.\r\n\r\nFirst here\'s a \"demo\":http://drasticcode.com/demo/js_search/index.html.\r\n\r\nWhat\'s nice is this only takes a few lines of code (and the magic of jQuery.)\r\n\r\n<pre><code class=\"javascript\">\r\n$().ready(function(){\r\n  // Instant Search\r\n  $(\'#q\').keyup(function(){\r\n    $(\'.search_item\').each(function(){\r\n      var re = new RegExp($(\'#q\').val(), \'i\')\r\n      if($(this).children(\'.search_text\')[0].innerHTML.match(re)){\r\n        $(this).show();\r\n      }else{\r\n        $(this).hide();\r\n      };\r\n    });\r\n  });\r\n});\r\n</code></pre>\r\n\r\nAs long as your markup contains a list of items with @search_item@ classes, and these contain an element with a @search_text@ class, you\'re set. For example:\r\n\r\n<pre><code class=\"html\">\r\n <form action=\"javascript:void(0);\">\r\n    <input type=\"text\" id=\"q\" name=\"q\"/>\r\n </form>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 1</h4>\r\n  <p>Some more info about Item 1</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 2</h4>\r\n  <p>Some more info about Item 2</p>\r\n</div>\r\n<div class=\"search_item\">\r\n  <h4 class=\"search_text\">Item 3</h4>\r\n  <p>Some more info about Item 3</p>\r\n</div>\r\n</code></pre>\r\n\r\nIt takes regular expression syntax as well so queries like @Item\\s+(1)|(2)@ will work just fine.  It wouldn\'t be hard to enhance this to split keywords in the query apart, so @Bachelor Mount@ would match an item call _Mount Bachelor_.  If this appeals to you feel free to fork the \"gist on github\":http://gist.github.com/131085.\r\n','2009-06-17 23:08:43',NULL,NULL,1);
INSERT INTO `events` VALUES (45,'comment',NULL,6,'Instant Search in pure Javascript (almost instantly)','Dead simple, but seems like it won\'t scale too well. I wonder how hard it would be to index them using a trie?','2009-06-18 20:53:18','Ian Smith-Heisters',7,1);
INSERT INTO `events` VALUES (46,'edit',1,2,'Smart Pluralize for Rails','You may know that the \"ActiveSupport\":http://as.rubyonrails.org/ library included with \"Rails\":http://rubyonrails.org contains a @pluralize@ method that lets you pluralize a string.\r\n\r\nFor example:\r\n\r\n<pre><code class=\"ruby\">$ irb\r\n>> require \"rubygems\"\r\n=> true\r\n>> require \"activesupport\"\r\n=> true\r\n>> \"monkey\".pluralize\r\n=> \"monkeys\"\r\n>> \"ox\".pluralize\r\n=> \"oxen\"\r\n</code></pre>\r\n\r\nSometimes you want to decide whether or not to pluralize a string based on a quantity.  For example, at the bottom of this article should it say *1 comment* or *2 comments*?  It depends on how many comments we have.  I was running into this in a lot while pair programming on one project, so \"Ian Smith-Heisters\":http://idiosyncra.tc/ and I whipped up this simple helper which makes it easy.\r\n\r\n<pre><code class=\"ruby\">class String\r\n  def smart_pluralize(num=self)\r\n    num.to_i.abs == 1 ? self : pluralize\r\n  end\r\nend\r\n</code></pre>\r\n\r\nNow here\'s the fun part.  Having this method take @self@ (the string its called on) as its default argument is what makes this so easy to work with.  You can pass a quantity explicitly to it, or just call it on a string that starts with a number.\r\n\r\n<pre><code class=\"ruby\">>> \"1 monkey\".smart_pluralize\r\n=> \"1 monkey\"\r\n>> \"2 monkey\".smart_pluralize\r\n=> \"2 monkeys\"\r\n>> (-2..2).each do |number|\r\n?>   puts \"#{number} monkey\".smart_pluralize(number).inspect\r\n>> end\r\n\"-2 monkeys\"\r\n\"-1 monkey\"\r\n\"0 monkeys\"\r\n\"1 monkey\"\r\n\"2 monkeys\"\r\n</code></pre>\r\n\r\nHere\'s a link to \"the gist\":http://gist.github.com/103323.\r\n','2009-06-19 16:20:40',NULL,NULL,1);
INSERT INTO `events` VALUES (47,'publish',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ \r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\n','2009-06-26 22:22:39',NULL,NULL,1);
INSERT INTO `events` VALUES (48,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nbq. JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar. \r\n\r\n','2009-06-26 22:25:57',NULL,NULL,1);
INSERT INTO `events` VALUES (49,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library from @http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip@ and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 22:31:50',NULL,NULL,1);
INSERT INTO `events` VALUES (50,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nand copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 22:54:33',NULL,NULL,1);
INSERT INTO `events` VALUES (51,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 22:55:17',NULL,NULL,1);
INSERT INTO `events` VALUES (52,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re playing around with some programming ideas or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell now there\'s a cross-platform Javascript shell, which, as I found out the other day, is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is _an open-source implementation of JavaScript written entirely in Java_.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nNow that\'s it.  Now you can get into an interactive javascript console by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nSo that was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: _JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 22:56:31',NULL,NULL,1);
INSERT INTO `events` VALUES (53,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nWell there\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 23:04:26',NULL,NULL,1);
INSERT INTO `events` VALUES (54,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to get it up and running on OS X, although much of this should work on Linux (and maybe Windows) as well with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put the following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 23:04:59',NULL,NULL,1);
INSERT INTO `events` VALUES (55,'edit',1,8,'Setting up an Interactive Javascript Console','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put this following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-06-26 23:05:51',NULL,NULL,1);
INSERT INTO `events` VALUES (56,'publish',1,9,'Make it so AR attributes which conflict with object-private methods (e.g.  system) don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix an esoteric (but dangerous) bug in ActiveRecord which can potentially cause a call to one of your model\'s attribute methods to sometimes through a NoMethodError. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Then suddenly the site started throwing errors, which I traced back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>','2009-07-09 23:41:23',NULL,NULL,1);
INSERT INTO `events` VALUES (57,'edit',1,9,'Make it so AR attributes which conflict with object-private methods (e.g.  system) don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix an esoteric (but dangerous) bug in ActiveRecord which can potentially cause a call to one of your model\'s attribute methods to sometimes through a NoMethodError. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Then suddenly the site started throwing errors, which I traced back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">\r\n@demo_files.map{|p| p.system}.compact\r\n</code></pre>','2009-07-09 23:42:09',NULL,NULL,1);
INSERT INTO `events` VALUES (58,'edit',1,9,'Make it so AR attributes which conflict with object-private methods (e.g.  system) don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix an esoteric (but dangerous) bug in ActiveRecord which can potentially cause a call to one of your model\'s attribute methods to sometimes through a NoMethodError. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code</pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system = \"openSUSE\"\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code</pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning a no','2009-07-09 23:53:51',NULL,NULL,1);
INSERT INTO `events` VALUES (59,'edit',1,9,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in ActiveRecord which can cause a call to one of your model\'s attribute methods to sometimes throw a NoMethodError. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code</pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system = \"openSUSE\"\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning and raise an error if you try to call them.  Before it would just call the method even if was private.\r\n\r\nThe problem was that ','2009-07-09 23:56:26',NULL,NULL,1);
INSERT INTO `events` VALUES (60,'edit',1,9,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside of the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n      # Checks whether the method is defined in the model or any of its subclasses\r\n      # that also derive from Active Record. Raises DangerousAttributeError if the\r\n      # method is defined by Active Record though.\r\n      def instance_method_already_implemented?(method_name)\r\n        method_name = method_name.to_s\r\n        return true if method_name =~ /^id(=$|\\?$|$)/\r\n        @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n        @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n        raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n        @_defined_class_methods.include?(method_name)\r\n      end\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @#define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-10 00:13:36',NULL,NULL,1);
INSERT INTO `events` VALUES (61,'edit',1,9,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside of the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @#define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-10 00:32:15',NULL,NULL,1);
INSERT INTO `events` VALUES (62,'edit',1,9,'Make it so ActiveRecord attributes which conflict with object-private methods don\'t \'randomly\' cause NoMethodErrors ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-10 00:35:40',NULL,NULL,1);
INSERT INTO `events` VALUES (63,'publish',1,10,'Timetrap: A command-line timetracker in Ruby','http://github.com/samg/timetrap/tree/master','2009-07-13 21:16:02',NULL,NULL,1);
INSERT INTO `events` VALUES (64,'edit',1,9,'Fix for \"random\" NoMethodError in Rails ActiveRecord ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-18 23:56:51',NULL,NULL,1);
INSERT INTO `events` VALUES (65,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  There\'s a lot of \"good reason\'s\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot \r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:05:21',NULL,NULL,1);
INSERT INTO `events` VALUES (66,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  There\'s a lot of \"good reason\'s\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved the interface.\r\n\r\n<pre><code>\r\n$ t switch writing\r\n$ t in blog post\r\n$ t out\r\n$ t display\r\nTimesheet writing:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    blog post\r\n                                     0:12:45\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:24:35',NULL,NULL,1);
INSERT INTO `events` VALUES (67,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago (and the reason I wrote \"Timetrap\":http://github.com/samg/timetrap/tree/master.)\r\n\r\nThere\'s a lot of \"good reason\'s\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.\r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:46:39',NULL,NULL,1);
INSERT INTO `events` VALUES (68,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago (and the reason I wrote \"Timetrap\":http://github.com/samg/timetrap/tree/master.)\r\n\r\nThere\'s a lot of \"good reason\'s\"(8 Reasons Time Tracking Is Good):http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.\r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:48:17',NULL,NULL,1);
INSERT INTO `events` VALUES (69,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago (and the reason I wrote \"Timetrap\":http://github.com/samg/timetrap/tree/master.)\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.\r\n\r\nhttp://github.com/samg/timetrap/tree/master','2009-07-19 00:49:06',NULL,NULL,1);
INSERT INTO `events` VALUES (70,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago (and the reason I wrote \"Timetrap\":http://github.com/samg/timetrap/tree/master.)\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 00:51:08',NULL,NULL,1);
INSERT INTO `events` VALUES (71,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nTimetrap also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:39:02',NULL,NULL,1);
INSERT INTO `events` VALUES (72,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of these commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:41:42',NULL,NULL,1);
INSERT INTO `events` VALUES (73,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months now, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:41:59',NULL,NULL,1);
INSERT INTO `events` VALUES (74,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when I find the time (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:42:22',NULL,NULL,1);
INSERT INTO `events` VALUES (75,'edit',1,10,'Timetrap: Simple Command-Line Time Tracking with Ruby','_Who knows where the time goes?_\r\n\r\nThat\'s a question that I was asking myself a lot a few months ago.  And the results of all that asking was a command line time tracker called \"Timetrap\":http://github.com/samg/timetrap/tree/master.\r\n\r\nThere\'s a lot of \"good reason\'s (8 Reasons Time Tracking Is Good)\":http://www.crackerjackaccounting.com/2009/06/8-reasons-time-tracking-is-good/ for tracking what you spend your time on (especially if you bill by the hour), but I was finding a lot of the time tracking tools out there to be kind of kludgy.  What I really wanted was something that would let me easily track and edit time entries and get out of my way.  It would be even better if I could use it on the command line, since that\'s where I am most of the time when I\'m working.\r\n\r\nI got the idea for writing Timetrap from a cool little command-line time tracker called Timebook (written in Python by \"Trevor Caira\":http://bitbucket.org/trevor/.)  It let\'s you track your time through a command line utility named @t@.  I loved simplicity of the interface, and how it lets you abbreviate any command, typing @t d@ instead of @t display@.\r\n\r\n<pre><code>$ t switch World Domination Plan\r\n$ t in Research Volcano Islands\r\n$ t out\r\n$ t display\r\nTimesheet World Domination Plan:\r\nDay            Start      End        Duration   Notes\r\nMar 14, 2009   19:53:30 - 20:06:15   0:12:45    Research Volcano Islands\r\nTotal                                0:12:45\r\n</code></pre>\r\n\r\nThe problem was it wasn\'t flexible enough.  I\'d forget to start it and want to type:\r\n\r\n<pre><code>$ t in --at \"5 minutes ago\" Research Volcano Islands\r\n</code></pre>\r\n\r\nI needed an easy way to edit an entry after the fact.  I wanted:\r\n\r\n<pre><code>$ t edit --id 45 --start \"last Monday 10am\" --end \"last Monday 12pm\" created 4000 novelty buttons\r\n</code></pre>\r\n\r\nAnd I wanted to be able to easily export to a variety of formats (such as ical and csv,) and easily add additional export formats with a few lines of Ruby:\r\n\r\n<pre><code>$ t display --format ical > my_ical_file.ics\r\n</code></pre>\r\n\r\nAll of the above commands work in \"Timetrap\":http://github.com/samg/timetrap/tree/master, which also has an @archive@ command that moves your entries to a hidden sheet, where they\'re out of the way.\r\n\r\nI\'ve been using it to track my own time for the last few months, and it\'s working really well.  I\'ve been focusing more of my time on working, and less on tracking what I\'m working on.  \r\n\r\nThere\'s still a few features I\'m planning to add when _I find the time_ (like an option that shows/exports your entries rounded to 15 minute intervals.)  But I thought there might be some others out there that would find this useful.  It\'s available on \"github\":http://github.com/samg/timetrap/tree/master.  Feel free to let me know about any bugs you find, or if you\'re interested in contributing code.','2009-07-19 05:43:02',NULL,NULL,1);
INSERT INTO `events` VALUES (76,'edit',1,9,'Fix for \"random\" NoMethodError in Rails\' ActiveRecord ','I\'m a little excited today because \"some code I wrote was accepted into the Ruby on Rails core\":http://github.com/rails/rails/commit/d60d7edce462f4602bfc9996689087a235b034c9.\r\n\r\nIt\'s a patch I wrote to fix a tricky bug I ran into in @ActiveRecord@ which can cause a call to one of your model\'s attribute methods to sometimes throw a @NoMethodError@. \r\n\r\nI came across this bug after upgrading a site I help maintain to Rails 2.3.  This site allows users to download demos of software.  Users have to specify which operating system they want a demo for, and this is stored in a database column named @system@.\r\n\r\nAll of this was working just fine until I upgraded to Rails 2.3.  Suddenly the site started throwing errors like this.\r\n\r\n<pre>NoMethodError: Attempt to call private method\r\n	from /Users/sam/project/vendor/rails/activerecord/lib/active_record/attribute_methods.rb:236:in `method_missing\'\r\n</pre>\r\n\r\nI traced the error back to this line in a helper method.\r\n\r\n<pre><code class=\"ruby\">@demo_files.map{|p| p.system}.compact\r\n</code></pre>\r\n\r\nWhy didn\'t my tests catch this I was wondering?  Here\'s where things get esoteric.  This test would pass:\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new(:system => \"openSUSE\")\r\n  demo.system.should == \"openSUSE\"\r\nend\r\n</code></pre>\r\n\r\nThis one would fail (with a @NoMethodError@):\r\n\r\n<pre><code class=\"ruby\">\r\nit \"should have a system\" do\r\n  demo = DemoFile.new\r\n  demo.system.should == nil\r\nend\r\n</code></pre>\r\n\r\nWTF? ActiveRecord recently started allowing you to mark attribute methods as private, meaning they would raise an error if you try to call them (from outside the object.)  Before it would just call the method even if was private.  You can see this in the first few line of the (pre-patch) version of @ActiveRecord::Base#method_missing@.\r\n\r\n<pre><code class=\"ruby\">\r\ndef method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n\r\n  if self.class.private_method_defined?(method_name)\r\n    raise NoMethodError.new(\"Attempt to call private method\", method_name, args)\r\n  end\r\n\r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end.\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end \r\nend\r\n</code></pre>\r\n\r\nThe problem was that if you had an attribute with the same name as a private method inherited from @Object@ *and* you called that attribute before any others the thing would blow up.\r\n\r\nWhy?  @ActiveRecord@ only considers an attribute method to be implemented if it is defined in an @ActiveRecord::Base@ descendant.  Methods inherited from above @ActiveRecord::Base@ in the inheritance chain are overridden the first time @method_missing@ is hit.\r\n\r\nCheck it out:\r\n<pre><code class=\"ruby\">\r\n# Checks whether the method is defined in the model or any of its subclasses\r\n# that also derive from Active Record. Raises DangerousAttributeError if the\r\n# method is defined by Active Record though.\r\ndef instance_method_already_implemented?(method_name)\r\n  method_name = method_name.to_s\r\n  return true if method_name =~ /^id(=$|\\?$|$)/\r\n  @_defined_class_methods         ||= ancestors.first(ancestors.index(ActiveRecord::Base)).sum([]) { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.map(& :to_s).to_set\r\n  @@_defined_activerecord_methods ||= (ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false)).map(& :to_s).to_set\r\n  raise DangerousAttributeError, \"#{method_name} is defined by ActiveRecord\" if @@_defined_activerecord_methods.include?(method_name)\r\n  @_defined_class_methods.include?(method_name)\r\nend\r\n</code></pre>\r\n\r\n\r\nBut if there is a protected method inherited from @Object@ which shares the name with an database attribute, it will raise an error before it ever tries to implement the attribute methods.  If you call another attribute first it will define your attribute methods (overwriting the inherited private method) and work as expected.\r\n\r\nThe fix is to make sure @define_attribute_methods@ is called before checking for private methods and raising a @NoMethodErrors@.\r\n\r\n<pre><code class=\"ruby\">\r\n def method_missing(method_id, *args, &block)\r\n  method_name = method_id.to_s\r\n    \r\n  # If we haven\'t generated any methods yet, generate them, then\r\n  # see if we\'ve created the method we\'re looking for.\r\n  if !self.class.generated_methods?\r\n    self.class.define_attribute_methods\r\n    guard_private_attribute_method!(method_name, args)\r\n    if self.class.generated_methods.include?(method_name)\r\n      return self.send(method_id, *args, &block)\r\n    end\r\n  end\r\n\r\n  guard_private_attribute_method!(method_name, args)\r\n  if self.class.primary_key.to_s == method_name\r\n    id\r\n  elsif md = self.class.match_attribute_method?(method_name)\r\n    attribute_name, method_type = md.pre_match, md.to_s\r\n    if @attributes.include?(attribute_name)\r\n      __send__(\"attribute#{method_type}\", attribute_name, *args, &block)\r\n    else\r\n      super\r\n    end\r\n  elsif @attributes.include?(method_name)\r\n    read_attribute(method_name)\r\n  else\r\n    super\r\n  end\r\nend\r\n</code></pre>\r\n\r\nFor anyone else who\'s experiencing this issue, \"the patch\":https://rails.lighthouseapp.com/projects/8994/tickets/2808/a/216729/bug2808.diff is available on \"the lighthouse ticket\":https://rails.lighthouseapp.com/projects/8994/tickets/2808-ar-attribute-collides-with-private-method-results-in-nomethoderror.\r\n','2009-07-19 05:46:44',NULL,NULL,1);
INSERT INTO `events` VALUES (77,'publish',1,11,'My Favorite Bash Substitution Tricks','Here\'s a few tricks that I often use on the command line to save time.  They take advantage of some variables that the @bash@ shell uses to store various aspects of your history.\r\n\r\nh4. Repeating the last command with @!!@\r\n\r\nSometimes I run a command that requires @sudo@ access, but forget the @sudo@.  This is a great opportunity to use @!!@ which holds the last command you ran.\r\n\r\n<pre><code class=\"bash\">\r\n$ tail /var/log/mail.log\r\ntail: cannot open `/var/log/mail.log\' for reading: Permission denied\r\n$ sudo !!\r\nsudo tail /var/log/mail.log\r\n# output of command\r\n</code></pre>\r\n\r\nh4. The last argument of the last command using @!$@\r\n\r\nSometimes it\'s handy to be able to reference the last argument of your last command.  This can make certain operations safer, by preventing a fat fingered typo from deleting important files.\r\n\r\n<pre><code class=\"bash\">\r\n$ ls *.log\r\na.log  b.log\r\n$ rm -v !$\r\nremoved `a.log\'\r\nremoved `b.log\'\r\n</code></pre>\r\n\r\nSimilarly you can use @!*@ to reference all of the last commands\' arguments.\r\n\r\n<pre><code class=\"bash\">\r\n$ touch a.log b.log\r\n$ rm -v !*\r\nrm -v a.log b.log\r\nremoved `a.log\'\r\nremoved `b.log\'\r\n</code></pre>\r\n\r\nh4. Correcting mistakes with @^^@\r\n\r\nThis is a nifty trick that performs a substitution on your last command.  It\'s great for correcting typos, or running similar commands back to back. It looks for a match with whatever is after the first carrot, and replaces it with whatever is after the second.\r\n\r\n\r\n<pre><code class=\"bash\">\r\n$ cmhod a+x my_script.sh \r\n-bash: cmhod: command not found\r\n$ ^mh^hm\r\nchmod a+x my_script.sh \r\n</code></pre>\r\n\r\nI use this one all the time doing rails development if I make a mistake on a @script/generate@ command.\r\n\r\n<pre><code class=\"bash\">\r\n$ script/generate model Animal species:string sex:string birthday:date\r\n      exists  app/models/\r\n      exists  test/unit/\r\n      exists  test/fixtures/\r\n      create  app/models/animal.rb\r\n      create  test/unit/animal_test.rb\r\n      create  test/fixtures/animals.yml\r\n      create  db/migrate\r\n      create  db/migrate/20090801180754_create_animals.rb\r\n\r\n$ ^generate^destroy\r\nscript/destroy model Animal species:string sex:string birthday:date\r\n    notempty  db/migrate\r\n    notempty  db\r\n          rm  db/migrate/20090801180754_create_animals.rb\r\n          rm  test/fixtures/animals.yml\r\n          rm  test/unit/animal_test.rb\r\n          rm  app/models/animal.rb\r\n       rmdir  test/fixtures\r\n    notempty  test\r\n       rmdir  test/unit\r\n    notempty  test\r\n       rmdir  app/models\r\n    notempty  app\r\n\r\n$ ^destroy ^generate rspec_\r\nscript/generate rspec_model Animal species:string sex:string birthday:date\r\n      create  app/models/\r\n      create  spec/models/\r\n      create  spec/fixtures/\r\n      create  app/models/animal.rb\r\n      create  spec/models/animal_spec.rb\r\n      create  spec/fixtures/animals.yml\r\n      create  db/migrate\r\n      create  db/migrate/20090801180937_create_animals.rb\r\n</code></pre>\r\n\r\nHope someone else finds these as handy as I do.\r\n','2009-08-01 18:10:35',NULL,NULL,1);
INSERT INTO `events` VALUES (78,'comment',NULL,11,'My Favorite Bash Substitution Tricks','One more tip:\r\n\r\nYou can also echo a specific number of arguments off the end of the last command using @!:n*@, where @n@ is the number of the first argument to echo.  For example:\r\n\r\n<pre>\r\n$ touch 1.log 2.log 3.log 4.log 5.log\r\n\r\n$ rm -v !:3*\r\nrm -v 3.log 4.log 5.log\r\n3.log\r\n4.log\r\n5.log\r\n</pre>\r\n\r\nI don\'t use this one too much in practice but it could come in handy in certain situations.','2009-08-02 18:20:54','Sam',12,1);
INSERT INTO `events` VALUES (79,'edit',1,8,'Installing an Interactive Javascript Shell','When you\'re brainstorming some ideas for a program or learning a new language its great to have an interactive console to play with.  It lets you start typing out code, inspect the return values, and experiment or debug in a really helpful way.  You get immediate feedback on what each line of your code is doing.  That\'s why \"irb\":http://en.wikipedia.org/wiki/Interactive_Ruby_Shell for ruby or @script/console@ for your rails app are such great and useful tools.  Once you get used to being able to dive into your application environment and fiddle around you wonder how you ever did without it.\r\n\r\nThere\'s a cross-platform Javascript shell, which is super easy to get up and running.  It uses \"Rhino\":http://www.mozilla.org/rhino/ which is an open-source implementation of JavaScript written entirely in Java.\r\n\r\nI\'ll show you how to install it on OS X in under 5 minutes. \r\n\r\nMost of this should work on Linux (and maybe Windows) too with some minor tweaks.\r\n\r\nFirst thing you\'ll need to do is download Rhino.\r\n\r\n<pre><code class=\"bash\">\r\n$ wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R2.zip\r\n$ unzip rhino1_7R2.zip\r\n</code></pre>\r\n\r\nThen copy the @js.jar@ file where java can find it.  On OS X\r\n<pre><code class=\"bash\">\r\n$ cd rhino1_7R2\r\n$ cp ./js.jar /Library/Java/Extensions/\r\n</code></pre>\r\n\r\nOn Linux you\'ll want to put the jar file in @ JAVAHOME/jre/lib/ext@ \r\n<br/> for example: @/usr/local/java/jre/lib/ext@.\r\n\r\nOn Windows it\'ll be someplace like @C:\\j2sdk1.4.1_03\\jre\\lib\\ext@\r\n\r\nThat\'s it.  You can enter the interactive javascript shell by running:\r\n<pre><code class=\"bash\">\r\n$ java org.mozilla.javascript.tools.shell.Main\r\n</code></pre>\r\n\r\nThis is a little unwieldy so I put this following alias in my @~/.bashrc@ which lets me just type @js@ to get into the console.\r\n<pre><code class=\"bash\">\r\nalias js=\'java org.mozilla.javascript.tools.shell.Main\'\r\n</code></pre>\r\n\r\nThat was easy, but I quickly realized, this console really sucks.  I can\'t backspace or use the arrow keys or @ctl-A@, @ctl-E@ to move around.  Well not to worry.  JLine to rescue.\r\n\r\nAs its \"website\":http://jline.sourceforge.net/ states: \r\n\r\n_JLine is a Java library for handling console input. It is similar in functionality to BSD editline and GNU readline. People familiar with the readline/editline capabilities for modern shells (such as bash and tcsh) will find most of the command editing features of JLine to be familiar._\r\n\r\nJust download the library:\r\n<pre><code class=\"bash\">\r\n$ wget http://superb-west.dl.sourceforge.net/sourceforge/jline/jline-0.9.94.zip\r\n</code></pre>\r\n\r\nUnzip it and copy the @jline-0.9.94.jar@ file to same place you put @js.jar@ (@/Library/Java/Extensions/@ on OS X.)\r\n\r\nCongrats.  Now you\'ve got a javascript shell that doesn\'t suck.\r\n\r\n','2009-08-03 05:30:46',NULL,NULL,1);
INSERT INTO `events` VALUES (80,'publish',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  Basically a DSL is a highly abstracted programming language that lets you deal with a certain problem domain in a natural an intutative way. The power of a DSL lies in its ability to describe the concepts in a certain _problem domain_. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. The Problem Domain\r\n\r\nA new client *Medieval Guards, Inc.* specialized is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their attacks, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:21:33',NULL,NULL,1);
INSERT INTO `events` VALUES (81,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  Basically a DSL is a highly abstracted programming language that gives you a natural and intuitive language for dealing with a specific logical domain . The power of a DSL lies in its ability to describe the concepts in a certain _problem domain_. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. The Problem Domain\r\n\r\nA new client *Medieval Guards, Inc.* specialized is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their attacks, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:23:57',NULL,NULL,1);
INSERT INTO `events` VALUES (82,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  Basically a DSL is a highly abstracted programming language that gives you a natural and intuitive language for dealing with a specific logical domain. The power of a DSL lies in its ability to describe the concepts in a certain _problem domain_. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. The Problem Domain\r\n\r\nA new client *Medieval Guards, Inc.* specialized is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their attacks, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:24:32',NULL,NULL,1);
INSERT INTO `events` VALUES (83,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  Basically a DSL is a highly abstracted programming language that gives you a natural and intuitive language for dealing with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. The Problem Domain\r\n\r\nA new client *Medieval Guards, Inc.* specialized is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their attacks, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:25:43',NULL,NULL,1);
INSERT INTO `events` VALUES (84,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive language for dealing with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. The Problem Domain\r\n\r\nA new client *Medieval Guards, Inc.* specialized is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their attacks, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:26:06',NULL,NULL,1);
INSERT INTO `events` VALUES (85,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. The Problem Domain\r\n\r\nA new client *Medieval Guards, Inc.* specialized is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their attacks, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:26:39',NULL,NULL,1);
INSERT INTO `events` VALUES (86,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specialized is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their attacks, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">\r\ncommander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:32:05',NULL,NULL,1);
INSERT INTO `events` VALUES (87,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their attacks, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:32:32',NULL,NULL,1);
INSERT INTO `events` VALUES (88,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change it\'s defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:38:40',NULL,NULL,1);
INSERT INTO `events` VALUES (89,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:39:05',NULL,NULL,1);
INSERT INTO `events` VALUES (90,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  The head of their central command and control needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:43:44',NULL,NULL,1);
INSERT INTO `events` VALUES (91,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire weapon\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    r ||= Recipe.new\r\n    r.prepare do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:44:42',NULL,NULL,1);
INSERT INTO `events` VALUES (92,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare recipe\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:47:19',NULL,NULL,1);
INSERT INTO `events` VALUES (93,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will trigger our battle plan to be run.  When we call @defend_castle!@ the block we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:48:07',NULL,NULL,1);
INSERT INTO `events` VALUES (94,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  When the block is executed @self@ will refer to the defending @guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:49:38',NULL,NULL,1);
INSERT INTO `events` VALUES (95,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  In the battle plan we defined @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that in the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:50:59',NULL,NULL,1);
INSERT INTO `events` VALUES (96,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a notify_king method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:51:38',NULL,NULL,1);
INSERT INTO `events` VALUES (97,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or @Delegate@ to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:53:02',NULL,NULL,1);
INSERT INTO `events` VALUES (98,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  It\'s possible to use @method_missing@ or \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:54:53',NULL,NULL,1);
INSERT INTO `events` VALUES (99,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  In this case we could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some of these possiblities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:55:34',NULL,NULL,1);
INSERT INTO `events` VALUES (100,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which objects methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:56:34',NULL,NULL,1);
INSERT INTO `events` VALUES (101,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes is guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 22:57:17',NULL,NULL,1);
INSERT INTO `events` VALUES (102,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://www.rajuabju.com/barbarians/conan.htm attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 23:00:10',NULL,NULL,1);
INSERT INTO `events` VALUES (103,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 23:02:12',NULL,NULL,1);
INSERT INTO `events` VALUES (104,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The final product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How does it work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 23:02:48',NULL,NULL,1);
INSERT INTO `events` VALUES (105,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The Final Product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How Does It Work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few other ways aside for @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-03 23:04:22',NULL,NULL,1);
INSERT INTO `events` VALUES (106,'comment',NULL,11,'My Favorite Bash Substitution Tricks','Thanks Sam, I didn\'t know about !* and the ^^ substitution, those will be useful!','2009-08-04 00:15:50','Kirsten',14,1);
INSERT INTO `events` VALUES (107,'edit',1,13,'Writing Domain Specific Languages (DSLs) with Ruby','A \"lot\":http://blog.jayfields.com/2008/02/implementing-internal-dsl-in-ruby.html \"of\":http://weblog.jamisbuck.org/2006/4/20/writing-domain-specific-languages \"people\":http://www.infoq.com/presentations/agile-dsl-development-in-ruby say that Ruby is a great languages for writing Domain Specific Languages (DSLs).  A DSL is a highly abstracted programming language that gives you a natural and intuitive way to deal with a specific logical domain.  They can serve as easy flexible APIs for programmers or enable clients to have control over the way a system deals with their business logic. There are lots of examples of DSLs in the Ruby world.  \"Capistrano\":http://www.capify.org/index.php/Capistrano, \"RSpec\":http://rspec.info/, \"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/, \"Rails\' Routing\":http://weblog.jamisbuck.org/2006/10/2/under-the-hood-rails-routing-dsl, just to name a few.\r\n\r\nIn this post I\'ll look at some of the most common ways to create a DSL in Ruby.\r\n\r\nh3. A DSL for Defending Medieval Castles\r\n\r\nA new client, *Medieval Guards, Inc.* specializes in guarding medieval castles and fighting off \"Barbarian\":http://en.wikipedia.org/wiki/Conan_the_Barbarian attackers.  They need some software written that will help them create battle plans and coordinate the castles\' defenses.  But the Barbarians are always changing their tactics, so the system needs to be able to change its defense strategy flexibly.  Each castle\'s commander needs to be able to define new battle plans as battle conditions change.  Perfect use for a DSL.\r\n\r\nh3. The Final Product\r\n\r\nLet\'s take a look at what kind of syntax we\'d like our commander to write to define a new battle plan.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do\r\n  fire cannon if enemy_approaching?\r\n  unless enemy_neutralized?\r\n    sound_alarm\r\n    fire crossbow\r\n  end\r\n  if enemy_approaching?\r\n    prepare boiling_oil\r\n    raise_drawbridge\r\n    fire flaming_catapult\r\n  end\r\n  if enemy_approaching?\r\n    prepare evacuation\r\n    pour boiling_oil\r\n  end\r\n  if enemy_neutralized?\r\n    lower_drawbridge\r\n    prepare paperwork\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see here that even though this is pure Ruby code, it\'s pretty easy for a non-programming commander to see what\'s going on here.  If the Barbarians all get scooters, and the castle needs to prepare boiling oil as soon as their sighted, it wouldn\'t be hard to make that change.\r\n\r\nh3. How Does It Work?\r\n\r\nLet\'s assume that the defense of castles is handled directly by castle guards.  In our application part of the @Guard@ class we\'ve implemented looks like this:\r\n\r\n<pre><code class=\"ruby\">class Guard < Warrior\r\n  def fire(weapon)\r\n    weapon.load unless weapon.loaded?\r\n    weapon.aim\r\n    weapon.fire\r\n  end\r\n\r\n  def sound_alarm\r\n    horn.sound\r\n  end\r\n\r\n  def raise_drawbridge\r\n    drawbridge.control(:up)\r\n  end\r\n\r\n  def lower_drawbridge\r\n    drawbridge.control(:down)\r\n  end\r\n\r\n  def prepare(recipe)\r\n    recipe.follow\r\n  end\r\n\r\n  def enemy_approaching?\r\n    telescope.enemy_visible? and not telescope.enemy_dead?\r\n  end\r\n\r\n  def enemy_neutralized?\r\n    not enemy_approaching?\r\n  end\r\n\r\n  def boiling_oil\r\n    define_recipe :boiling_oil do\r\n      fire.stoke\r\n      pots.each{|pot| pot.fill :oil}\r\n    end\r\n  end\r\n\r\n  def evacuation\r\n    define_recipe :evacuation do\r\n      gather_women_and_children\r\n      escape_through_tunnels\r\n    end\r\n  end\r\nend\r\n</code></pre>\r\n\r\nYou can see that the methods on @Guard@ are the same as the vocaulary that the commander is using in our @define_battle_plan@ DSL block.\r\n\r\nWe create a Commander class which is responsible for defining a battle plan and triggering the guards to execute it.\r\n\r\nh3. Defining the Battle Plan\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  attr_accessor :plan\r\n  def define_battle_plan(&plan)\r\n    self.plan = plan\r\n  end\r\n\r\n  # ...\r\nend\r\n</code></pre>\r\n\r\n\r\nHere we have a method called @define_battle_plan@ that takes a block argument called @plan@.  Notice that when we call @define_battle_plan@ it never executes the block.  Instead it just tucks the code away in an attribute until we need to fight off an attack.\r\n\r\nh3. Executing the Battle Plan\r\n\r\n<pre><code class=\"ruby\">\r\nclass Commander\r\n  def defend_castle!\r\n    guard_on_duty.instance_eval &plan\r\n  end\r\nend\r\n</code></pre>\r\n\r\nThere\'s another method on our commander class that will cause our battle plan to be run.  When we call @defend_castle!@ the plan we saved is executed, but not by the commander class.  Instead the code is run in the context of a @Guard@ instance (the @guard_on_duty@).  Within the battle plan block, @self@ will refer to the defending @Guard@ giving us easy access to all of the instances methods.\r\n\r\nh3. Another Approach\r\n\r\nThere are a few ways besides @instance_eval@ to get an nice DSL-y syntax.  Within Rails it\'s popular to pass the object into the block to get a syntax like this:\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\nend\r\n</code></pre>\r\n\r\nTo get this syntax we would change our @defend_castle!@ method to look like this:\r\n\r\n<pre><code class=\"ruby\">class Commander\r\n  def defend_castle!\r\n    plan.call guard_on_duty\r\n  end\r\nend\r\n</code></pre>\r\n\r\nOne advantage (or disadvantage) to this approach is that within the @plan@ block @self@ still refers to the context it was defined in, in this case the @Commander@ instance.  This means we can call methods from the calling class as well.  Imagine the @Commander@ had a @notify_king@ method.\r\n\r\n<pre><code class=\"ruby\">commander.define_battle_plan do |guard|\r\n  guard.fire cannon if guard.enemy_approaching?\r\n  notify_king unless guard.enemy_neutralized?\r\nend\r\n</code></pre>\r\n\r\nh3. More Complex Approaches\r\n\r\nThere are a variety of more complicated ways to handle which object\'s methods get called in your DSL.  You can use @method_missing@, \"@Forwardable@\":http://ruby-doc.org/stdlib/libdoc/forwardable/rdoc/index.html, or \"@Delegate@\":http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html to create a chain of responders.  We could have the @Guard@ handle the action if he has a corresponding method, and the @Commander@ handle it otherwise.  \"_why\":http://whytheluckystiff.net/ gets into some other possibilities \"here\":http://hackety.org/2008/10/06/mixingOurWayOutOfInstanceEval.html.\r\n','2009-08-04 07:50:47',NULL,NULL,1);
INSERT INTO `events` VALUES (108,'comment',NULL,13,'Writing Domain Specific Languages (DSLs) with Ruby','I\'m anti-instance_eval these days. See http://gist.github.com/154550 for my favorite du-jour.','2009-08-05 16:37:04','Ian Smith-Heisters',15,1);
INSERT INTO `events` VALUES (109,'comment',NULL,13,'Writing Domain Specific Languages (DSLs) with Ruby','@Ian - This is a pretty interesting approach, which I tried to allude to at the end of the article.  It could be criticized as being _too_ magical, but in a way that\'s the whole point of DSLs.  Whether it\'s worth the additional complexity of setting up a chain of responders, seems to depend on the nature of your application.  \r\n\r\nIf you want one DSL to be accessible in a bunch of different classes (and still have easy access to their native methods) your gist seems like a great way to go.  For many cases though it seems overly convoluted.','2009-08-06 00:59:56','Sam Goldstein',16,1);
INSERT INTO `events` VALUES (111,'publish',1,17,'How To Run R','','2009-08-26 02:02:57',NULL,NULL,1);
INSERT INTO `events` VALUES (112,'edit',1,18,'How To Run Rspec Specs From Vim','','2009-08-26 02:03:48',NULL,NULL,1);
INSERT INTO `events` VALUES (113,'edit',1,18,'How To Run Rspec Specs From Vim','!/images/user/vim1.png!\r\n!/images/user/vim2.png!\r\n!/images/user/vim3.png!','2009-08-27 17:30:31',NULL,NULL,1);
INSERT INTO `events` VALUES (114,'edit',1,18,'How To Run Rspec Specs From Vim','!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png','2009-08-27 17:32:15',NULL,NULL,1);
INSERT INTO `events` VALUES (115,'edit',1,18,'How To Run Rspec Specs From Vim','<script src=\"http://gist.github.com/176430.js\"></script>\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png','2009-08-27 17:38:36',NULL,NULL,1);
INSERT INTO `events` VALUES (116,'edit',1,18,'How To Run Rspec Specs From Vim','<pre><code class=\"vim\">\" Execute open rspec buffer\r\n\" Thanks to Ian Smith-Heisters\r\nfunction! RunSpec(args)\r\n if exists(\"b:rails_root\") && filereadable(b:rails_root . \"/script/spec\")\r\n   let spec = b:rails_root . \"/script/spec\"\r\n else\r\n   let spec = \"spec\"\r\n end\r\n let cmd = \":! \" . spec . \" % -cfn \" . a:args\r\n execute cmd\r\nendfunction\r\n\r\n\" Mappings\r\n\" run one rspec example or describe block based on cursor position\r\nmap !s :call RunSpec(\"-l \" . <C-r>=line(\'.\')<CR>)\r\n\" run full rspec file\r\nmap !S :call RunSpec(\"\")</code></pre>\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png','2009-08-27 17:39:43',NULL,NULL,1);
INSERT INTO `events` VALUES (117,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your test.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode.  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png','2009-08-27 19:24:03',NULL,NULL,1);
INSERT INTO `events` VALUES (118,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your test.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode.  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/, which can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:29:21',NULL,NULL,1);
INSERT INTO `events` VALUES (119,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your test.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode.  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:30:52',NULL,NULL,1);
INSERT INTO `events` VALUES (120,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do with with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:34:46',NULL,NULL,1);
INSERT INTO `events` VALUES (121,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do with with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:36:12',NULL,NULL,1);
INSERT INTO `events` VALUES (122,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:37:54',NULL,NULL,1);
INSERT INTO `events` VALUES (123,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n</div>\r\n\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:39:11',NULL,NULL,1);
INSERT INTO `events` VALUES (124,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">  \r\n<div class=\"gist-file\">\r\n   <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n</div>\r\n\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:41:36',NULL,NULL,1);
INSERT INTO `events` VALUES (125,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<div style=\"font-size:12px;\"><script src=\"http://gist.github.com/176430.js\"></script></div>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:43:06',NULL,NULL,1);
INSERT INTO `events` VALUES (126,'publish',1,19,'test','<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n</div>\r\n</notextile>','2009-08-27 19:53:44',NULL,NULL,1);
INSERT INTO `events` VALUES (127,'edit',1,19,'test','<div style=\"font-size:12px;\"/>\r\n<notextile>\r\n<div style=\"font-size:12px;\">\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n\r\n</div>\r\n</div>\r\n</notextile>','2009-08-27 19:54:35',NULL,NULL,1);
INSERT INTO `events` VALUES (128,'edit',1,19,'test','\r\n<notextile>\r\n<div style=\"font-size:12px;\">\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n\r\n</div>\r\n</div>\r\n</notextile>','2009-08-27 19:54:59',NULL,NULL,1);
INSERT INTO `events` VALUES (129,'edit',1,18,'How To Run Rspec Specs From Vim','Test Driven Development is all about having a quick feedback loop.  You know something\'s broken immediately because your tests fail.\r\n\r\nAs projects grow you write more tests, and it takes more time to run your tests.  It becomes increasingly important to be able to *only run one test* or the few tests you care about so you can keep moving with the code.\r\n\r\nTextMate has some commands to do this (@Cmd-R@, and @Cmd-Shift-R@).\r\n\r\nHere\'s how to do it with @vim@.\r\n\r\nUsually when I\'m coding I have Vim open in split screen mode (with \"@rails.vim@\":http://github.com/tpope/vim-rails/tree/master installed, of course.)  I\'ll have a spec file on one side, and the application code on the other.\r\n\r\n!/images/user/vim1.png!:/images/user/vim-lg1.png\r\n\r\nI have this incredibly handy function and key mapping in my @.vimrc@.  Credit for this clever implementation goes to Art and Technology Consultant extraordinaire \"Ian Smith-Heisters\":http://idiosyncra.tc/.\r\n\r\n<notextile>\r\n<div style=\"font-size:12px;\">\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-176430\" class=\"gist\">\r\n  \r\n  \r\n    \r\n      \r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"c\">&quot; Execute open rspec buffer</span></div><div class=\"line\" id=\"LC2\"><span class=\"c\">&quot; Thanks to Ian Smith-Heisters</span></div><div class=\"line\" id=\"LC3\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">end</span> </div><div class=\"line\" id=\"LC9\">&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC10\">&nbsp;execute cmd </div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"c\">&quot; Mappings</span></div><div class=\"line\" id=\"LC14\"><span class=\"c\">&quot; run one rspec example or describe block based on cursor position</span></div><div class=\"line\" id=\"LC15\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC16\"><span class=\"c\">&quot; run full rspec file</span></div><div class=\"line\" id=\"LC17\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC18\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/176430/a47fa9b8760351ea1409eb48fdef25818b5ffb5c/.vimrc.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/176430\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n      </div>\r\n\r\n        \r\n  \r\n\r\n</div>\r\n</div>\r\n</notextile>\r\n\r\n\r\nWhen I\'m in the spec file I can hit @!s return@ to execute the example or describe block that the cursor is in.\r\n\r\n!/images/user/vim2.png!:/images/user/vim-lg2.png\r\n\r\nHitting @!S return@ executes all the examples in that file.\r\n\r\n!/images/user/vim3.png!:/images/user/vim-lg3.png\r\n\r\nThe fancy descriptive output is just one of the nested formatter which comes included with \"Rspec\":http://rspec.info/.  They can be specified with the @-f@ flag.  @spec --help@ has more details on this.','2009-08-27 19:55:23',NULL,NULL,1);
INSERT INTO `events` VALUES (130,'publish',1,20,'Refactoring with ack (which is better than grep)','','2009-09-09 04:47:04',NULL,NULL,1);
INSERT INTO `events` VALUES (131,'edit',1,20,'Refactoring with ack (which is better than grep)','<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>','2009-09-09 04:49:02',NULL,NULL,1);
INSERT INTO `events` VALUES (132,'edit',1,20,'Refactoring with ack (which is better than grep)','<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\n','2009-09-09 04:50:00',NULL,NULL,1);
INSERT INTO `events` VALUES (133,'edit',1,20,'Refactoring with ack (which is better than grep)','http://betterthangrep.com/\r\n\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n','2009-09-09 04:51:56',NULL,NULL,1);
INSERT INTO `events` VALUES (134,'edit',1,20,'ack: the fast code search tool','@ack@ is a Perl script that is great for searching though code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install ack by this command running (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is the @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n','2009-09-09 06:00:02',NULL,NULL,1);
INSERT INTO `events` VALUES (135,'edit',1,20,'ack: the fast code search tool','@ack@ is a Perl script that is great for searching though code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install ack by this command running (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is the @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nAdding an @-l@ option outputs on the filenames containing the matches. This command will open all the files in vi that matched in previous command.  The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n','2009-09-09 06:02:48',NULL,NULL,1);
INSERT INTO `events` VALUES (136,'edit',1,20,'ack: the fast code search tool','@ack@ is a Perl script that is great for searching though code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install ack by this command running (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is the @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\n. This next command will open all the files in vi that matched in previous command.  The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n','2009-09-09 06:04:23',NULL,NULL,1);
INSERT INTO `events` VALUES (137,'edit',1,20,'ack: the fast code search tool','@ack@ is a Perl script that is great for searching though code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install ack with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is the @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\n. This next command will open all the files in vi that matched in previous command.  The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n','2009-09-09 06:04:58',NULL,NULL,1);
INSERT INTO `events` VALUES (138,'edit',1,20,'ack: the fast code search tool','@ack@ is a Perl script that is great for searching though code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install ack with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in vi that matched in previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n','2009-09-09 06:05:52',NULL,NULL,1);
INSERT INTO `events` VALUES (139,'edit',1,20,'ack: the fast code search tool','@ack@ is a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install ack with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in vi that matched in previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:07:42',NULL,NULL,1);
INSERT INTO `events` VALUES (140,'edit',1,20,'ack: the fast code search tool','@ack@ is a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in vi that matched in previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:09:43',NULL,NULL,1);
INSERT INTO `events` VALUES (141,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    ack --thpppt!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in vi that matched in previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:10:24',NULL,NULL,1);
INSERT INTO `events` VALUES (142,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in vi that matched in previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:11:37',NULL,NULL,1);
INSERT INTO `events` VALUES (143,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what kind of options it provides.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in vi that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:13:01',NULL,NULL,1);
INSERT INTO `events` VALUES (144,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in vi that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:13:51',NULL,NULL,1);
INSERT INTO `events` VALUES (145,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:16:00',NULL,NULL,1);
INSERT INTO `events` VALUES (146,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n<!-- more -->\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:17:15',NULL,NULL,1);
INSERT INTO `events` VALUES (147,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://ack.googlecode.com/svn/tags/latest/ack > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-09 06:18:07',NULL,NULL,1);
INSERT INTO `events` VALUES (148,'edit',1,20,'ack: the fast code search tool','<strong>Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://gist.github.com/193974 online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://gist.github.com/raw/193974/f863f739b5446a5363cadc7d3c3a5e6c04d73d76/ack.pl > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nEnd update....\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://gist.github.com/raw/193974/f863f739b5446a5363cadc7d3c3a5e6c04d73d76/ack.pl > ~/bin/ack && chmod 0755 > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-26 01:52:38',NULL,NULL,1);
INSERT INTO `events` VALUES (149,'edit',1,20,'ack: the fast code search tool','<strong style=\"color:#090\">Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://gist.github.com/193974 online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://gist.github.com/raw/193974/f863f739b5446a5363cadc7d3c3a5e6c04d73d76/ack.pl > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nEnd update....\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://gist.github.com/raw/193974/f863f739b5446a5363cadc7d3c3a5e6c04d73d76/ack.pl > ~/bin/ack && chmod 0755 > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-26 01:54:39',NULL,NULL,1);
INSERT INTO `events` VALUES (150,'edit',1,20,'ack: the fast code search tool','<strong style=\"color:#900\">Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://gist.github.com/193974 online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://gist.github.com/raw/193974/f863f739b5446a5363cadc7d3c3a5e6c04d73d76/ack.pl > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nEnd update....\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://gist.github.com/raw/193974/f863f739b5446a5363cadc7d3c3a5e6c04d73d76/ack.pl > ~/bin/ack && chmod 0755 > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-26 01:54:52',NULL,NULL,1);
INSERT INTO `events` VALUES (151,'edit',1,20,'ack: the fast code search tool','<strong style=\"color:#900\">Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://drasticcode.com/demo/download/ack.txt online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nEnd update....\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-26 02:02:34',NULL,NULL,1);
INSERT INTO `events` VALUES (152,'edit',1,20,'ack: the fast code search tool','<strong style=\"color:#900\">Update</strong>\r\n\r\nIt looks like the stand-alone version of @ack@ is no longer available.  I\'ve put \"a copy of the version of ack I\'m using\":http://drasticcode.com/demo/download/ack.txt online.  You should be able to install it on your local system with this command:\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\n<strong style=\"color:#900\">End Update....</strong>\r\n\r\nOne of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://drasticcode.com/demo/download/ack.txt > ~/bin/ack && chmod 0755 > ~/bin/ack && chmod 0755 ~/bin/ack  \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-09-26 02:05:10',NULL,NULL,1);
INSERT INTO `events` VALUES (153,'publish',1,21,'Roll Your Own Remember Me','<pre><code class=\"javascript\">\r\n// ==UserScript==\r\n// @name        login\r\n// @namespace   http://fluidapp.com\r\n// @description This keeps you logged in to new relic across browser sessions\r\n// @include     *\r\n// @author      Sam Goldstein\r\n// ==/UserScript==\r\n\r\n(function () {\r\n    if (window.fluid) {\r\n        // Session cookie identifier\r\n        var CookieName = \'_newrelic_session_id\'\r\n\r\n        // http://www.quirksmode.org/js/cookies.html#script\r\n        function createCookie(name,value,days) {\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime()+(days*24*60*60*1000));\r\n                var expires = \"; expires=\"+date.toGMTString();\r\n            }\r\n            else var expires = \"\";\r\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n        }\r\n\r\n        function readCookie(name) {\r\n            var nameEQ = name + \"=\";\r\n            var ca = document.cookie.split(\';\');\r\n            for(var i=0;i < ca.length;i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\r\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function eraseCookie(name) {\r\n            createCookie(name,\"\",-1);\r\n        }\r\n\r\n        // Set the cookie to expire in 3000 days\r\n        createCookie(CookieName, readCookie(CookieName), 3000);\r\n\r\n    }\r\n})();\r\n</code></pre>','2009-10-05 00:07:23',NULL,NULL,1);
INSERT INTO `events` VALUES (154,'edit',1,21,'Roll Your Own Remember Me','I\'ve been setting up \"Fluid Applications\":http://fluidapp.com/ for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it\'s a native OS X application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.\r\n\r\nThis has been working really well for me, until I hit one annoyance with \"New Relic\":http://www.newrelic.com/.  This web app doesn\'t have a *remember me* feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.\r\n\r\nLuckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you\'re viewing.  Just create one in the \"Scripts\" menu, or add a javascript file at @~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/@. Here\'s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven\'t had to enter my user credentials since.\r\n\r\n<pre><code class=\"javascript\">\r\n// ==UserScript==\r\n// @name        login\r\n// @namespace   http://fluidapp.com\r\n// @description This keeps you logged in to new relic across browser sessions\r\n// @include     *\r\n// @author      Sam Goldstein\r\n// ==/UserScript==\r\n\r\n(function () {\r\n    if (window.fluid) {\r\n      // Session cookie identifier\r\n      var CookieName = \'_newrelic_session_id\'\r\n\r\n      function LongTermCookie(cookieName) {\r\n\r\n        // http://www.quirksmode.org/js/cookies.html#script\r\n        function createCookie(name,value,days) {\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime()+(days*24*60*60*1000));\r\n                var expires = \"; expires=\"+date.toGMTString();\r\n            }\r\n            else var expires = \"\";\r\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n        }\r\n\r\n        function readCookie(name) {\r\n            var nameEQ = name + \"=\";\r\n            var ca = document.cookie.split(\';\');\r\n            for(var i=0;i < ca.length;i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\r\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function eraseCookie(name) {\r\n            createCookie(name,\"\",-1);\r\n        }\r\n\r\n        // Set the cookie to expire in 3000 days\r\n        createCookie(cookieName, readCookie(CookieName), 3000);\r\n      }\r\n    }\r\n    new LongTermCookie(CookieName)\r\n})();\r\n</code></pre>','2009-10-11 17:33:41',NULL,NULL,1);
INSERT INTO `events` VALUES (155,'edit',1,21,'Roll Your Own Remember Me','I\'ve been setting up \"Fluid Applications\":http://fluidapp.com/ for a lot of the web applications I use frequently.  This lets you run a web application in a lightweight browser, like it\'s a native OS X application.  Instead of having Gmail, Google Reader, Pivotal Tracker, and New Relic running in tabs in a browser I have them running as separate applications that I can switch between using the normal Cmd-Tab.\r\n\r\nThis has been working really well for me, until I hit one annoyance with \"New Relic\":http://www.newrelic.com/.  This web app doesn\'t have a *remember me* feature.  Its login cookies expire every time you close your browser session (as is the default in ruby on rails).  This meant that every time I would pop it open I would have to re-enter my login credentials.  Turns out I like to quit and reopen this application a lot, and was starting to get really irritated by having to retype my email and password to do a quick check of the production servers.\r\n\r\nLuckily Fluid makes it really easy to include UserScripts, which allow you to inject custom javascript into web pages you\'re viewing.  Just create one in the \"Scripts\" menu, or add a javascript file at @~/Library/Application\\ Support/Fluid/SSB/YourAppName/Userscripts/@. Here\'s one a threw together.  Now I can quit and reopen my New Relic application and it remembers me across browser sessions.  I haven\'t had to enter my user credentials since.\r\n\r\n<pre><code class=\"javascript\">\r\n// ==UserScript==\r\n// @name        login\r\n// @namespace   http://fluidapp.com\r\n// @description This keeps you logged in to new relic across browser sessions\r\n// @include     *\r\n// @author      Sam Goldstein\r\n// ==/UserScript==\r\n\r\n(function () {\r\n    if (window.fluid) {\r\n      // Session cookie identifier\r\n      var CookieName = \'_newrelic_session_id\'\r\n\r\n      function LongTermCookie(cookieName) {\r\n\r\n        // http://www.quirksmode.org/js/cookies.html#script\r\n        function createCookie(name,value,days) {\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime()+(days*24*60*60*1000));\r\n                var expires = \"; expires=\"+date.toGMTString();\r\n            }\r\n            else var expires = \"\";\r\n            document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n        }\r\n\r\n        function readCookie(name) {\r\n            var nameEQ = name + \"=\";\r\n            var ca = document.cookie.split(\';\');\r\n            for(var i=0;i < ca.length;i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0)==\' \') c = c.substring(1,c.length);\r\n                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function eraseCookie(name) {\r\n            createCookie(name,\"\",-1);\r\n        }\r\n\r\n        // Set the cookie to expire in 3000 days\r\n        createCookie(cookieName, readCookie(cookieName), 3000);\r\n      }\r\n    }\r\n    new LongTermCookie(CookieName)\r\n})();\r\n</code></pre>\r\n\r\nI\'ve pasted it into \"gist\":http://gist.github.com/207763 on github.','2009-10-11 17:35:36',NULL,NULL,1);
INSERT INTO `events` VALUES (156,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 ~/bin/ack \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-11-14 19:01:20',NULL,NULL,1);
INSERT INTO `events` VALUES (157,'edit',1,20,'ack: the fast code search tool','One of the handiest tools in my programming toolkit is @ack@, a Perl script that is great for searching through code (or really any text files).  I use it a lot while \"refactoring\":http://en.wikipedia.org/wiki/Code_refactoring, for example when I want to rename a method every time it\'s called in a project.\r\n\r\nYou can install @ack@ with this command (from \"http://betterthangrep.com/\":http://betterthangrep.com/):\r\n<pre><code class=\"bash\">$ curl http://betterthangrep.com/ack-standalone > ~/bin/ack && chmod 0755 ~/bin/ack \r\n</code></pre>\r\n\r\nAssuming that @~/bin/ack@ is in your path searching code is as easy as this:\r\n\r\n<pre><code class=\"bash\">$ ack my_poorly_named_method\r\n</code></pre>\r\n\r\nThis spits out highlighted matches from every file in the present directory.  \r\n\r\n@ack --help@ lists a lot of additional options to control how it matches, and what it outputs.  \r\n\r\n(My favorite is @ack --thpppt@)\r\n\r\n<pre><code class=\"bash\">$ ack --thpppt \r\n_   /|\r\n\\\'o.O\'\r\n=(___)=\r\n   U    Bill the Cat!\r\n</code></pre>\r\n\r\nSo back to how @ack@ is useful when you want to do a find and replace on a lot of files.\r\n\r\nFirst I\'d do a quick search for the method I want to rename:\r\n<pre><code class=\"bash\">$ ack destroy_other\r\napp/models/wd/core/proxy_to.rb\r\n23:    def destroy_other!\r\n\r\nscript/pull_wds\r\n58:      wd.destroy_other!\r\n\r\nspec/models/wd/core/proxy_to_spec.rb\r\n216:      @wd.destroy_other!\r\n\r\nspec/script/pull_wds_spec.rb\r\n26:    wd.should_receive :destroy_other!\r\n36:    wd.should_not_receive :destroy_other!\r\n</code></pre>\r\n\r\nThis next command will open all the files in @vi@ that matched in the previous command.  (The @!!@ is one of \"My Favorite Bash Substitution Tricks\":http://drasticcode.com/2009/8/1/my-favorite-bash-substitution-tricks.)\r\n\r\n<pre><code class=\"bash\">$ vi `!! -l`\r\n</code></pre>\r\n\r\n@ack@\'s @-l@ option causes it to output only the filenames containing the matches.\r\n\r\n','2009-11-14 19:01:40',NULL,NULL,1);
INSERT INTO `events` VALUES (158,'publish',1,22,'How to run one Test::Unit test case from vim','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large Test::Unit suite and I missed being able to execute one testcase from within vim.  I finally got around to coding it.  HItting `!s` will execute the current testcase based on the cursor\'s position.  Hitting `!S` will run all the cases in the file.  It\'s intelligent about whether you\'re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you\'re in an `sbt` project.)\r\n\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n','2009-11-28 23:52:57',NULL,NULL,1);
INSERT INTO `events` VALUES (159,'edit',1,22,'How to run one Test::Unit test case from vim','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large Test::Unit suite and I missed being able to execute one testcase from within vim.  I finally got around to coding it.  HItting `!s` will execute the current testcase based on the cursor\'s position.  Hitting `!S` will run all the cases in the file.  It\'s intelligent about whether you\'re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you\'re in an `sbt` project.)\r\n\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n','2009-11-28 23:53:28',NULL,NULL,1);
INSERT INTO `events` VALUES (160,'edit',1,22,'How to run one Test::Unit test case from vim','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large Test::Unit suite and I missed being able to execute one testcase from within vim.  I finally got around to coding it.  HItting `!s` will execute the current testcase based on the cursor\'s position.  Hitting `!S` will run all the cases in the file.  It\'s intelligent about whether you\'re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you\'re in an `sbt` project.)\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','2009-11-28 23:54:03',NULL,NULL,1);
INSERT INTO `events` VALUES (161,'edit',1,22,'How to run one Test::Unit test case from vim','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large `Test::Unit` test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting `!s` will execute the current testcase based on the cursor\'s position.  Hitting `!S` will run all the cases in the file.  It\'s intelligent about whether you\'re in a `Test::Unit` file or an `rspec` file.  (It will also run your scala specs if you\'re in an `sbt` project.)\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','2009-11-28 23:55:46',NULL,NULL,1);
INSERT INTO `events` VALUES (162,'edit',1,22,'How to run one Test::Unit test case from vim','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large @Test::Unit@ test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting @!s@ will execute the current testcase based on the cursor\'s position.  Hitting @!S@ will run all the cases in the file.  It\'s intelligent about whether you\'re in a @Test::Unit@ file or an @rspec@ file.  (It will also run your scala specs if you\'re in an @sbt@ project.)\r\n\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','2009-11-28 23:56:39',NULL,NULL,1);
INSERT INTO `events` VALUES (163,'edit',1,22,'How to run one Test::Unit test case from vim','I recently updated my vim script for \"running rspec specs from vim\":http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim.\r\n\r\nI\'ve been working on a project that has a large @Test::Unit@ test suite and I missed being able to execute one testcase from within vim.  I finally got around to coding this.  HItting @!s@ will execute the current testcase based on the cursor\'s position.  Hitting @!S@ will run all the cases in the file.  It\'s intelligent about whether you\'re in a @Test::Unit@ file or an @rspec@ file.  (It will also run your scala specs if you\'re in an \"@sbt@\":http://code.google.com/p/simple-build-tool/ project.)\r\n\r\n\r\n<div style=\"font-size:10px;\">\r\n<notextile>\r\n<link rel=\"stylesheet\" href=\"http://gist.github.com/stylesheets/gist/embed.css\"/><div id=\"gist-235784\" class=\"gist\">\r\n  \r\n  \r\n    \r\n            \r\n\r\n      <div class=\"gist-file\">\r\n        <div class=\"gist-data gist-syntax\">\r\n          \r\n          \r\n          \r\n            <div class=\"highlight\"><pre><div class=\"line\" id=\"LC1\"><span class=\"k\">function</span><span class=\"p\">!</span> BDD<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC2\">&nbsp;<span class=\"k\">if</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;test.rb&quot;</span></div><div class=\"line\" id=\"LC3\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunTest<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC4\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"s2\">&quot;.scala&quot;</span></div><div class=\"line\" id=\"LC5\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC6\">&nbsp;<span class=\"k\">elseif</span> bufname<span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span> <span class=\"p\">=~</span> <span class=\"c\">&quot;spec.rb&quot;</span></div><div class=\"line\" id=\"LC7\">&nbsp;&nbsp;&nbsp;<span class=\"k\">call</span> RunSpec<span class=\"p\">(</span>a:args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC8\">&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC9\">&nbsp;&nbsp;&nbsp;echo <span class=\"c\">&quot;don&#39;t know how to BDD this file&quot;</span></div><div class=\"line\" id=\"LC10\">&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC11\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC12\">&nbsp;</div><div class=\"line\" id=\"LC13\"><span class=\"k\">function</span><span class=\"p\">!</span> RunTest<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC14\">&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">=</span> matchstr<span class=\"p\">(</span>a:args<span class=\"p\">,</span> <span class=\"s1\">&#39;\\d\\+&#39;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC15\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"nb\">cursor</span></div><div class=\"line\" id=\"LC16\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">while</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span> &amp;&amp; <span class=\"nb\">cursor</span> <span class=\"p\">!=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC17\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"k\">match</span><span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"s1\">&#39;def test&#39;</span><span class=\"p\">)</span> <span class=\"p\">&gt;=</span> <span class=\"m\">0</span></div><div class=\"line\" id=\"LC18\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv -n &quot;</span>. matchstr<span class=\"p\">(</span>getline<span class=\"p\">(</span><span class=\"nb\">cursor</span><span class=\"p\">),</span> <span class=\"c\">&quot;test_[a-zA-Z_]*&quot;)</span></div><div class=\"line\" id=\"LC19\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC20\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> <span class=\"nb\">cursor</span> <span class=\"p\">-=</span> <span class=\"m\">1</span></div><div class=\"line\" id=\"LC21\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC22\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">endwhile</span></div><div class=\"line\" id=\"LC23\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC24\">&nbsp;&nbsp;<span class=\"k\">if</span> <span class=\"p\">!</span>exists<span class=\"p\">(</span><span class=\"s2\">&quot;cmd&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC25\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! ruby % -vv&quot;</span></div><div class=\"line\" id=\"LC26\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC27\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC28\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC29\">&nbsp;</div><div class=\"line\" id=\"LC30\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSpec<span class=\"p\">(</span>args<span class=\"p\">)</span></div><div class=\"line\" id=\"LC31\">&nbsp;&nbsp;<span class=\"k\">if</span> exists<span class=\"p\">(</span><span class=\"s2\">&quot;b:rails_root&quot;</span><span class=\"p\">)</span> &amp;&amp; filereadable<span class=\"p\">(</span><span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;)</span></div><div class=\"line\" id=\"LC32\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"k\">b</span>:rails_root . <span class=\"c\">&quot;/script/spec&quot;</span></div><div class=\"line\" id=\"LC33\">&nbsp;&nbsp;<span class=\"k\">else</span></div><div class=\"line\" id=\"LC34\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"k\">let</span> spec <span class=\"p\">=</span> <span class=\"c\">&quot;spec&quot;</span></div><div class=\"line\" id=\"LC35\">&nbsp;&nbsp;<span class=\"k\">end</span></div><div class=\"line\" id=\"LC36\">&nbsp;&nbsp;<span class=\"k\">let</span> cmd <span class=\"p\">=</span> <span class=\"s2\">&quot;:! &quot;</span> . spec . <span class=\"c\">&quot; % -cfn &quot; . a:args</span></div><div class=\"line\" id=\"LC37\">&nbsp;&nbsp;execute cmd</div><div class=\"line\" id=\"LC38\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC39\">&nbsp;</div><div class=\"line\" id=\"LC40\"><span class=\"k\">function</span><span class=\"p\">!</span> RunSBTTest<span class=\"p\">()</span></div><div class=\"line\" id=\"LC41\">&nbsp;&nbsp;execute <span class=\"s2\">&quot;:! java -jar ~/sbt-launcher-0.5.5.jar test&quot;</span></div><div class=\"line\" id=\"LC42\"><span class=\"k\">endfunction</span></div><div class=\"line\" id=\"LC43\">&nbsp;</div><div class=\"line\" id=\"LC44\">map <span class=\"p\">!</span>s :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;-l &quot;</span> . <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">r</span><span class=\"p\">&gt;=</span>line<span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)&lt;</span>CR<span class=\"p\">&gt;)</span></div><div class=\"line\" id=\"LC45\">map <span class=\"p\">!</span>S :<span class=\"k\">call</span> BDD<span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div><div class=\"line\" id=\"LC46\">&nbsp;</div></pre></div>\r\n\r\n          \r\n        </div>\r\n\r\n        <div class=\"gist-meta\">\r\n          <a href=\"http://gist.github.com/raw/235784/b20a815e2a1451c768a3eee672d32c365a1a3a05/bdd.vim\" style=\"float:right;\">view raw</a>\r\n          <a href=\"http://gist.github.com/235784#file_bdd.vim\" style=\"float:right;margin-right:10px;color:#666\">bdd.vim</a>\r\n          <a href=\"http://gist.github.com/235784\">This Gist</a> brought to you by <a href=\"http://github.com\">GitHub</a>.\r\n        </div>\r\n\r\n      </div>\r\n    \r\n  \r\n</div>\r\n</notextile>\r\n</div>\r\n','2009-11-29 02:41:47',NULL,NULL,1);
INSERT INTO `events` VALUES (164,'publish',1,23,'Poor Man\'s Notification System','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n  echo \"Oh crap! Your long running script isn\'t running\" | mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>','2010-04-22 04:28:04',NULL,NULL,1);
INSERT INTO `events` VALUES (165,'edit',1,23,'Poor Man\'s Notification System','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n> echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n> mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.','2010-04-22 04:31:43',NULL,NULL,1);
INSERT INTO `events` VALUES (166,'edit',1,23,'Poor Man\'s Notification System','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n  mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.\r\n\r\nIf you don\'t have a \"mail\":http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1 command you can install mailutils on Ubuntu.\r\n\r\n<pre><code class=\"bash\">\r\n$ sudo apt-get install mailutils\r\n</code></pre>','2010-04-22 04:44:51',NULL,NULL,1);
INSERT INTO `events` VALUES (167,'edit',1,23,'Poor Man\'s Notification System','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n  mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.\r\n\r\nIf you don\'t have a \"mail\":http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1 command you can install `mailutils` on Ubuntu.\r\n\r\n<pre><code class=\"bash\">\r\n$ sudo apt-get install mailutils\r\n</code></pre>','2010-04-22 04:52:08',NULL,NULL,1);
INSERT INTO `events` VALUES (168,'edit',1,23,'Poor Man\'s Notification System','This is the easiest way to have a long running script, running in a \"screen\":http://en.wikipedia.org/wiki/GNU_Screen session notify you when it finishes (or when it totally craps out.)\r\n\r\n<pre><code class=\"bash\">\r\n$ ./long-running-script.rb; \\\r\n  echo \"Oh crap! Your long running script isn\'t running\" | \\\r\n  mail -s \"Your thing died\" sam@drasticcode.com\r\n</code></pre>\r\n\r\nRun it as a one-liner and stop compulsively checking on it.\r\n\r\nIf you don\'t have a \"mail\":http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?mail+1 command you can install @mailutils@ on Ubuntu.\r\n\r\n<pre><code class=\"bash\">\r\n$ sudo apt-get install mailutils\r\n</code></pre>','2010-04-22 04:55:54',NULL,NULL,1);
INSERT INTO `events` VALUES (178,'publish',1,33,'Android Developers, Don\'t Show Me Buttons That Ask For Money','','2010-06-26 05:34:24',NULL,NULL,1);
INSERT INTO `events` VALUES (179,'publish',1,34,'Wiff.me - A website differ','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I hacked together a tiny web application that will run the content of any two web pages through a diffing tool and drank a couple Super Dog IPAs.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Just replace any single quotes in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','2010-06-26 06:06:55',NULL,NULL,1);
INSERT INTO `events` VALUES (180,'edit',1,34,'Wiff.me - A website differ','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Just replace any single quotes in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','2010-06-26 06:08:55',NULL,NULL,1);
INSERT INTO `events` VALUES (181,'edit',1,34,'Wiff.me - A website differ','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Just \"replace any single quotes\":http://unixsupremacy.tribe.net/thread/0d8d161d-60b1-480b-bf29-0acd5835a392 in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','2010-06-26 06:18:41',NULL,NULL,1);
INSERT INTO `events` VALUES (182,'edit',1,34,'Wiff.me - A webpage differ','The other night at \"nopoconi\":http://twitter.com/NoPoCoNi I drank a couple Super Dog IPAs and hacked together a tiny web application that will run the content of any two web pages through a diffing tool.  It\'s up on *\"wiff.me\":http://wiff.me*.\r\n\r\nIn the process I also discovered this crazy bash command that will pipe two web requests as inputs through @diff@ using subshells.  It\'s kind of an insane one-liner.\r\n\r\n<pre class=\"bash\">\r\n<code>\r\ndiff <(curl \'drasticcode.com\') <(curl \'www.drasticcode.com\')\r\n</code>\r\n</pre>\r\n\r\nNeedless to say I punted on trying to use the one-liner in the web based version.  Echoing user provided data to the shell scares me.  \"@donpdonp\":http://twitter.com/donpdonp taught me how to sanitize the user provided data in the bash command.  Just \"replace any single quotes\":http://unixsupremacy.tribe.net/thread/0d8d161d-60b1-480b-bf29-0acd5835a392#1b9a92ca-c284-4bb2-b131-7d725de05a86 in the user provided urls with two single quotes.  I still ended up using \"Sinatra\":http://www.sinatrarb.com/ and \"Curb\":http://curb.rubyforge.org/.','2010-06-26 06:20:08',NULL,NULL,1);
INSERT INTO `events` VALUES (183,'publish',1,35,'Setting up a Macbook to dual boot into Ubuntu and OS X','Recently I switched from using OS X on my development laptop (a macbook pro) to Ubuntu.\r\n\r\nI set up my laptop to dual boot into Ubuntu or OS X.  So far I\'ve been using Ubuntu full time for a few weeks and am happy with the results.\r\n\r\nHere\'s the basic process I followed to get set up to dual boot, and get the basics up and running in Ubuntu.  Keep in mind YMMV.\r\n\r\nh3. Backup\r\n\r\nMake a backup of your system.  This wasn\'t necessary in my case (in hindsight), but the experts will tell you that having a backup is a great way to CYA.  SuperDuper is a handy OS X utility that will make a bootable backup of your entire hard drive.  Definitely do this before moving forward.\r\n\r\nh3. Partition your hard disk\r\n\r\nI opened Disk Utility (in the Applications > Utilities folder) and partitioned my main hard disk partion into two equal parts.  In my case I have a 500Gb HD and was using less than half of it, so it wasn\'t necessary to clear up any space.  I was able to do this successfully without data loss.\r\n\r\nh3. Download Ubuntu\r\n\r\nI downloaded the 64 bit version of Ubuntu 10.04 from ubuntu.com, and burned this to a CD using Disk Utility.  It may save you some headaches down the line to install the 32 bit version, but I wanted 64 bit.\r\n\r\nh3. Install Ubuntu\r\n\r\nRestart your macbook with the Ubuntu install disk in the CD drive.  Hold the ALT key as you restart, and choose to boot from the \"Windows\" CD.  Follow the prompts to intall Ubuntu.\r\n\r\nWhen asked about disk partitions choose to *specify partions manually*.  I choose to install the boot partition on @/dev/sda3@ (the partition I just created.), and chose to use @/dev/sda4@ for swap.  *Be careful here not to install over your OS X partition* (possibly @/dev/sda2@), and hose your OS X system.\r\n\r\nEnter a username and password, and complete the installation process.\r\n\r\nh3. Booting into Ubuntu\r\n\r\nOnce Ubuntu is installed you can boot into it by restarting, holding the ALT key, and choosing to boot into \"Windows\".\r\n\r\nh3. Getting things set up nicely\r\n\r\nOnce you\'re in Ubuntu you\'ll want to set up wireless networking and several other things.  You can figure out which specific macbook you have by running @sudo dmidecode -s system-product-name@.  In my case I own a MacBookPro5,3.  Each macbook/Ubuntu version combo has its own wiki, which is very valuable at this stage.  For example \"https://help.ubuntu.com/community/MacBookPro5-3/Karmic\":https://help.ubuntu.com/community/MacBookPro5-3/Karmic\r\n\r\nh3. Getting wireless networking to work\r\n\r\nConnect to the internet using an ethernet cable and run @sudo apt-get bcmwl-kernel-source@.  Restart, and bam, you\'re wireless.\r\n\r\nh3. Touchpad\r\n\r\nIn the gnome main menu @System > Preferences > Mouse > Touchpad@.\r\n\r\nh3. Sound\r\n\r\nJust turn up the volume.  This took a minute to figure out.\r\n\r\nh3. Accessing your OS X partition and data\r\n\r\nYou can mount your OS X partion and access the data on it from Ubuntu.\r\n\r\nFirst edit @/etc/fstab@ and add a line similar to this:\r\n\r\n    /dev/sda2   /mnt/macHD      auto    defaults        0       1\r\n\r\nMake sure that you select the right device (@/dev/sdaxxx@) that contains your OS X installation, and the the mount point (@/mnt/macHD@) is an existing directory.\r\n\r\nThen run @sudo mount -t auto /dev/sda2 /mnt/macHD@\r\n\r\nYou should be able to access your OS X data from the @/mnt/macHD@ directory.\r\n','2010-09-15 05:29:33',NULL,NULL,1);
INSERT INTO `events` VALUES (184,'publish',1,36,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the text\r\n\":follow_external_links: true\", and if found stores whether it was found as a\r\ntrue/false attribute in the search index.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','2010-10-13 14:39:07',NULL,NULL,1);
INSERT INTO `events` VALUES (185,'edit',1,36,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the text\r\n_:follow_external_links: true_, and if found stores whether it was found as a\r\ntrue/false attribute in the search index.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','2010-10-13 14:40:33',NULL,NULL,1);
INSERT INTO `events` VALUES (186,'edit',1,36,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the some literal YAML text,\r\n and if found stores whether it was found as a\r\ntrue/false attribute in the search index.  This is way easier than deserializing \r\nthe YAML and storing this value in a boolean field in mySQL.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','2010-10-13 14:42:20',NULL,NULL,1);
INSERT INTO `events` VALUES (187,'edit',1,36,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">\r\n  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the some literal YAML text,\r\n and stores whether it was found as a\r\ntrue/false attribute in the search index.  This is way easier than deserializing \r\nthe YAML and storing this value in a boolean field in mySQL.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','2010-10-13 14:45:04',NULL,NULL,1);
INSERT INTO `events` VALUES (188,'edit',1,36,'Indexing data that\'s not in your database with Sphinx and Thinking Sphinx','At \"AboutUs\":http://aboutus.org where I work we recently re-implemented the\r\nsite\'s search feature.  Behind the scenes the new search uses\r\n\"Sphinx\":http://sphinxsearch.com (a super-fast and scalable search engine) and\r\n\"Thinking Sphinx\":http://freelancing-god.github.com/ts/en/ (which allows easy\r\nconfiguration and querying of Sphinx from within Rails).\r\n\r\nOne thing that makes Sphinx so much faster than alternatives like Solr is that\r\nit communicates directly with your database when it is building its search\r\nindex.  This is far faster than talking with your application layer, and\r\nindexing the result of your application models\' methods.  In our case we\'re\r\nable to reindex about 40 million records in around 4 hours.  Solr used to take\r\ndays.\r\n\r\nThere is a major disadvantage to this approach though.  Since Sphinx is\r\ntalking directly to the database, you can\'t index the results of method calls\r\non your ruby objects.  I\'ve discovered though that this is not nearly as\r\nlimiting as it may sound, since you *can* index the results of SQL functions.\r\nEven better, manipulating and transforming your data with SQL functions as you\r\nindex it, is *virtually free*.  I haven\'t noticed any impact on our index\r\ntimes, after adding many functions to our indexing process.\r\n\r\nHere are a couple real examples.\r\n\r\nIn our app, we deal a lot with domain names, and websites.  One feature of our\r\nsearch displays domain names that match your query.  Our stakeholders wanted\r\nthese to be sorted by the importance of the tld, with @.com@ at the top,\r\nfollowed by @.org@, @.gov@, etc. Since this sort order is basically arbitrary\r\nI replace each tld with an integer, using mySQL\'s @REPLACE@ function, store\r\nthis attribute in Sphinx, and sort on it when querying.\r\n\r\nThis is what it looks like in Thinking Sphinx\'s @define_index@ block:\r\n<pre><code class=\"ruby\">  define_index do\r\n    # Attributes that allow for fast sorting of domain names by tld, favoring .com\'s etc.\r\n    # Useful in \"exact domain match\" search\r\n    replace_str = \"LOWER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(page_title,\'com\',\'1\'),\'org\',\'2\'),\'gov\',\'3\'),\'edu\',\'4\'),\'net\',\'5\'),\'co.uk\',\'6\'),\'de\',\'7\'),\'co.jp\',\'8\'),\'info\',\'9\'))\"\r\n    has replace_str, :as => :page_title_sortable_by_tld, :type => :string\r\n  end\r\n</code></pre>\r\n\r\nIt\'s not pretty, but it\'s far prettier than trying to do this in ruby, at\r\nquery time.  Now we just add an @:order => \"page_title_sortable_by_tld ASC\"@ to\r\nour calls to @Page.search@.\r\n\r\nAnother place we use this is to convert a flag stored in a serialized YAML structure\r\ninto a boolean attribute that Sphinx can sort on and filter by.\r\n<pre><code class=\"ruby\">  define_index do\r\n    # Allow favoring in search results based on whether a page is\r\n    # \"pro_followed\" (i.e. it has its external links followed).\r\n    #\r\n    # Since this data is stored in a serialized YAML structure we need some SQL\r\n    # function fanciness to access this data as a boolean value.  If the below\r\n    # YAML key value appear in the text field LOCATE will return an integer\r\n    # greater than 0.  If not it will return 0.  Coercing this to 1 or 0 (with\r\n    # \"> 0\") allows sphinx to interpret this as a boolean value.\r\n    join page_data_latest.page_datum\r\n    has \'LOCATE(\":follow_external_links: true\", `page_data`.`content`) > 0\',\r\n      :as => :pro_followed, :type => :boolean\r\n  end\r\n</code></pre>\r\n\r\nThis code searches a field in the database for the some literal YAML text,\r\n and stores whether it was found as a\r\ntrue/false attribute in the search index.  This is way easier than deserializing \r\nthe YAML and storing this value in a boolean field in mySQL.\r\n\r\nThis has proved to be a very useful technique for us, and is far easier and\r\nmore efficient than denormalizing some of our data to a \"search text\" column,\r\nor doing a bunch of post-querying processing within Ruby on Rails.\r\n','2010-10-19 00:43:03',NULL,NULL,1);
INSERT INTO `events` VALUES (191,'publish',1,39,'Adding Failover and Load Balancing to Thinking Sphinx','<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  timeout: 0.5\r\n  address:\r\n  - 10.1.0.42\r\n  - 10.1.0.43\r\n  listen: 0.0.0.0\r\n</code></pre>','2010-11-10 04:26:06',NULL,NULL,1);
INSERT INTO `events` VALUES (192,'edit',1,39,'Adding Failover and Load Balancing to Thinking Sphinx','After we set up \"AboutUs\'s search feature\":http://drasticcode.com/2010/10/13/indexing-data-that-s-not-in-your-database-with-sphinx-and-thinking-sphinx our (awesome) sysadmin wanted a redundant setup.  He doesn\'t like having to cancel his weekend if a box goes down.  We talked about running an instance of HAProxy on all our app servers to load balance between two Sphinx servers, but that seemed heavy handed.\r\n\r\nIt turned out to be really easy to add this functionality to ThinkingSphinx (and the Riddle client it uses to talk to Sphinx).\r\n\r\nBasically instead of a @sphinx.yml@ like this:\r\n\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  address: 10.1.0.42\r\n  listen: 0.0.0.0\r\n</code></pre>\r\n\r\nIt looks this:\r\n\r\n<pre><code class=\"yaml\">production:\r\n  morphology: stem_en\r\n  mem_limit: 1600M\r\n  timeout: 0.5\r\n  address:\r\n  - 10.1.0.42\r\n  - 10.1.0.43\r\n  listen: 0.0.0.0\r\n</code></pre>\r\n\r\nQueries will load balance between the multiple servers specified in @address@ (it\'s still ok to have just one), and in the event of a failure they\'ll failover to the other servers.  You can also specify a timeout option, and the clients will failover after they\'ve hit it.  (This is good for cases where the server is totally down, to avoid waiting on a TCP timeout of around 30 seconds.)\r\n\r\nThese changes were pulled back into \"ThinkingSphinx\":https://github.com/freelancing-god/thinking-sphinx/commit/5eea57e6329c9bd25b29ebeab535e9c5d291708c  and \"Riddle\":https://github.com/freelancing-god/riddle/pull/12, so they should be available when the next versions of these gems are released.','2010-11-10 04:44:35',NULL,NULL,1);
INSERT INTO `events` VALUES (193,'publish',1,40,'The easiest way to diff two strings in ruby','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nThe motivation behind this gem is to make it dirt simple to generate attractive diff output from within a ruby script.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n<style type=\"text/css\">\r\n    .diff{overflow:auto;border:solid 1px yellow;}\r\n    .diff ul{overflow:auto;font-size:13px;list-style:none;margin:0;padding:0;display:table;width:100%;}\r\n    .diff del, .diff ins{display:block;text-decoration:none;}\r\n    .diff li{padding:0; display:table-row;margin: 0;height:1em;}\r\n    .diff li.ins{background:#dfd; color:#080}\r\n    .diff li.del{background:#fee; color:#b00}\r\n    .diff li:hover{background:#ffc}\r\n    /* try \'whitespace:pre;\' if you don\'t want lines to wrap */\r\n    .diff del, .diff ins, .diff span{white-space:pre-wrap;font-family:courier;}\r\n    .diff del strong{font-weight:normal;background:#fcc;}\r\n    .diff ins strong{font-weight:normal;background:#9f9;}\r\n</style>\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Swallowed html in nowiki tags==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The break tag in here is not rendered as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>\"To create a line break put this &lt;<strong>code&gt;&lt;</strong>nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt;<strong>&lt;/code&gt;</strong> in your markup.\"</del></li>\r\n                  <li class=\"ins\"><ins>\"To create a line break put this &lt;nowiki&gt;&lt;br/&gt;&lt;/nowiki&gt; in your markup.\"</ins></li>\r\n                </ul>\r\n              </div>','2010-11-26 18:08:54',NULL,NULL,1);
INSERT INTO `events` VALUES (194,'edit',1,40,'The easiest way to diff two strings in ruby','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nI wanted to make it dead simple to generate attractive diff output from within a ruby application.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n<style type=\"text/css\">\r\n    .diff{overflow:auto;border:solid 1px green;}\r\n    .diff ul{overflow:auto;font-size:13px;list-style:none;margin:0;padding:0;display:table;width:100%;}\r\n    .diff del, .diff ins{display:block;text-decoration:none;}\r\n    .diff li{padding:0; display:table-row;margin: 0;height:1em;}\r\n    .diff li.ins{background:#dfd; color:#080}\r\n    .diff li.del{background:#fee; color:#b00}\r\n    .diff del, .diff ins, .diff span{white-space:pre-wrap;font-family:courier;}\r\n    .diff del strong{font-weight:normal;background:#fcc;}\r\n    .diff ins strong{font-weight:normal;background:#9f9;}\r\n</style>\r\n\r\n\r\n<pre><code>>> Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\r\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\r\n                  <li class=\"del\"><del>\"<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>\" said<strong> I</strong>.</del></li>\r\n                  <li class=\"ins\"><ins>\"<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a\" <strong>I </strong>said.</ins></li>\r\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\r\n                </ul>\r\n              </div>\r\n\r\nYou can find out more in the README:https://github.com/samg/diffy/blob/master/README.md','2010-11-26 18:19:46',NULL,NULL,1);
INSERT INTO `events` VALUES (195,'edit',1,40,'The easiest way to diff two strings in ruby','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nI wanted to make it dead simple to generate attractive diff output from within a ruby application.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n<style type=\"text/css\">\r\n    .diff{overflow:auto;border:solid 1px green;padding:1em;}\r\n    .diff ul{overflow:auto;font-size:13px;list-style:none;margin:0;padding:0;display:table;width:100%;}\r\n    .diff del, .diff ins{display:block;text-decoration:none;}\r\n    .diff li{padding:0; display:table-row;margin: 0;height:1em;}\r\n    .diff li.ins{background:#dfd; color:#080}\r\n    .diff li.del{background:#fee; color:#b00}\r\n    .diff del, .diff ins, .diff span{white-space:pre-wrap;font-family:courier;}\r\n    .diff del strong{font-weight:normal;background:#fcc;}\r\n    .diff ins strong{font-weight:normal;background:#9f9;}\r\n</style>\r\n\r\n\r\n<pre><code>>> Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\r\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\r\n                  <li class=\"del\"><del>\"<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>\" said<strong> I</strong>.</del></li>\r\n                  <li class=\"ins\"><ins>\"<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a\" <strong>I </strong>said.</ins></li>\r\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\r\n                </ul>\r\n              </div>\r\n\r\nYou can find out more in the \"README\":https://github.com/samg/diffy/blob/master/README.md','2010-11-26 18:21:10',NULL,NULL,1);
INSERT INTO `events` VALUES (196,'publish',1,41,'Making Diffy a little less creative','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html output.  Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this <code><nowiki><br></nowiki></code> in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','2010-12-09 04:38:59',NULL,NULL,1);
INSERT INTO `events` VALUES (197,'edit',1,41,'Making Diffy a little less creative','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html output.  Ward Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','2010-12-09 04:42:17',NULL,NULL,1);
INSERT INTO `events` VALUES (198,'edit',1,40,'The easiest way to diff two strings in ruby','I just released version 2.0 of \"Diffy\":https://github.com/samg/diffy.  \r\n\r\nI wanted to make it dead simple to generate attractive diff output from within a ruby application.\r\n\r\nHere\'s how you use it:\r\n\r\n    $ sudo gem install diffy\r\n    $ irb\r\n    >> string1 = <<-TXT\r\n    >\" Hello how are you\r\n    >\" I\'m fine\r\n    >\" That\'s great\r\n    >\" TXT\r\n    => \"Hello how are you\\nI\'m fine\\nThat\'s great\\n\"\r\n    >> string2 = <<-TXT\r\n    >\" Hello how are you?\r\n    >\" I\'m fine\r\n    >\" That\'s swell\r\n    >\" TXT\r\n    => \"Hello how are you?\\nI\'m fine\\nThat\'s swell\\n\"\r\n    >> puts Diffy::Diff.new(string1, string2)\r\n    -Hello how are you\r\n    +Hello how are you?\r\n     I\'m fine\r\n    -That\'s great\r\n    +That\'s swell\r\n\r\nIt also will generate nice html for you:\r\n\r\n\r\n<pre><code>>> Diffy::Diff.new(string1, string2).to_s(:html)</code></pre>\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>We were all having a good time.</span></li>\r\n                  <li class=\"unchanged\"><span>Soon it was very late.</span></li>\r\n                  <li class=\"del\"><del>\"<strong>T</strong>i<strong>me</strong> flies like a<strong>n</strong> a<strong>rrow</strong>\" said<strong> I</strong>.</del></li>\r\n                  <li class=\"ins\"><ins>\"<strong>Fru</strong>i<strong>t</strong> flies like a <strong>banan</strong>a\" <strong>I </strong>said.</ins></li>\r\n                  <li class=\"unchanged\"><span>Then I left.</span></li>\r\n                </ul>\r\n              </div>\r\n\r\nYou can find out more in the \"README\":https://github.com/samg/diffy/blob/master/README.md','2010-12-09 04:42:50',NULL,NULL,1);
INSERT INTO `events` VALUES (199,'edit',1,41,'Making Diffy a little less creative','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html output.  \r\n\r\nWard Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off like a know-it-all when it finds one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','2010-12-09 05:05:19',NULL,NULL,1);
INSERT INTO `events` VALUES (200,'edit',1,41,'Making Diffy a little less creative','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html output.  \r\n\r\nWard Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off as a bit of a know-it-all when it found one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','2010-12-09 05:05:52',NULL,NULL,1);
INSERT INTO `events` VALUES (201,'edit',1,41,'Making Diffy a little less creative','I just pushed a new version of my \"Diffy\":https://github.com/samg/diffy ruby gem.\r\n\r\nThis version does a better job when highlighting parts of lines in the html diff output.  \r\n\r\nWard Cunningham pointed out to me that sometimes Diffy would get a little creative when finding similarities in between lines.  For example, while technically correct Diffy 2.0.0 could come off as a bit of a know-it-all when it found one letter similarities between \"Unescaped\" and \"Swallowed\".\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unesc</strong>a<strong>p</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Sw</strong>a<strong>llow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\nVersion 2.0.1 suppresses this creativity a little bit for clearer output:\r\n\r\n<div class=\"diff\">\r\n                <ul>\r\n                  <li class=\"unchanged\"><span>==Links around Images==</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>Images should link to absolute paths like \'/File:Picture.jpg\' instead of relative links (i.e. \'File:Picture.jpg\').</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>The later confuses my browser and causes it to link to file:///Picture.jpg, which won\'t work at all.</span></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>==<strong>Unescap</strong>ed html in nowiki tags==</del></li>\r\n                  <li class=\"ins\"><ins>==<strong>Swallow</strong>ed html in nowiki tags==</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"del\"><del>The break tag in here is rendered.</del></li>\r\n                  <li class=\"ins\"><ins>The break tag in here is <strong>not </strong>rendered<strong> as literal text despite being in nowiki and code tags. This differs from mediawiki\'s behavior</strong>.</ins></li>\r\n                  <li class=\"unchanged\"><span></span></li>\r\n                  <li class=\"unchanged\"><span>\"To create a line break put this &lt;code&gt;&lt;nowiki&gt;&lt;br /&gt;&lt;/nowiki&gt;&lt;/code&gt; in your markup.\"</span></li>\r\n                </ul>\r\n              </div>\r\n\r\n\r\n \r\n','2010-12-09 05:06:45',NULL,NULL,1);
INSERT INTO `events` VALUES (202,'publish',1,42,'pwdeath - ssh keys for everyone','How many times a day do you see something like this?\r\n\r\n<pre><code>\r\n$ ssh sam@drasticcode.com\r\nsam@drasticcode.com\'s password:\r\n</code></pre>\r\n\r\nWell f**k that.  Typing in ssh passwords is for suckers.  Personally I try to never do it, and to make it easier I have a @pwdeath@ script to make setting up ssh keys painlessly easy.  Once you\'ve generated ssh keys (you can do this with @ssh-keygen@) put this script in your @PATH@.\r\n\r\n<pre><code class=\"bash\">\r\n#!/bin/bash\r\n\r\nkey=`cat ~/.ssh/id_rsa.pub`\r\nfor host in $*; do\r\n  ssh $host \"mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod 700 ~/.ssh && chmod -R 600 ~/.ssh/* && echo \'$key\' >> ~/.ssh/authorized_keys\"\r\ndone\r\n</code></pre>\r\n\r\nThen you invoke it like this:\r\n\r\n\r\n<pre><code class=\"bash\">\r\n$ pwdeath sam@server1.com sam@server2.com\r\n</code></pre>\r\n\r\nType your password once for each server, then never type it again.  Your fingers will thank you.','2011-04-06 16:15:12',NULL,NULL,1);
/*!40000 ALTER TABLE `events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `feedbacks`
--

DROP TABLE IF EXISTS `feedbacks`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `feedbacks` (
  `id` int(11) NOT NULL auto_increment,
  `site_id` int(11) default NULL,
  `name` varchar(255) default NULL,
  `email` varchar(255) default NULL,
  `body` text,
  `key` varchar(255) default NULL,
  `created_at` datetime default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `feedbacks`
--

LOCK TABLES `feedbacks` WRITE;
/*!40000 ALTER TABLE `feedbacks` DISABLE KEYS */;
/*!40000 ALTER TABLE `feedbacks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `memberships`
--

DROP TABLE IF EXISTS `memberships`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `memberships` (
  `id` int(11) NOT NULL auto_increment,
  `site_id` int(11) default NULL,
  `user_id` int(11) default NULL,
  `created_at` datetime default NULL,
  `admin` tinyint(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `memberships`
--

LOCK TABLES `memberships` WRITE;
/*!40000 ALTER TABLE `memberships` DISABLE KEYS */;
INSERT INTO `memberships` VALUES (1,1,2,'2009-07-28 17:46:23',0);
/*!40000 ALTER TABLE `memberships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mephisto_plugins`
--

DROP TABLE IF EXISTS `mephisto_plugins`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `mephisto_plugins` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `options` text,
  `type` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `mephisto_plugins`
--

LOCK TABLES `mephisto_plugins` WRITE;
/*!40000 ALTER TABLE `mephisto_plugins` DISABLE KEYS */;
/*!40000 ALTER TABLE `mephisto_plugins` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) NOT NULL,
  UNIQUE KEY `unique_schema_migrations` (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('1');
INSERT INTO `schema_migrations` VALUES ('10');
INSERT INTO `schema_migrations` VALUES ('11');
INSERT INTO `schema_migrations` VALUES ('12');
INSERT INTO `schema_migrations` VALUES ('13');
INSERT INTO `schema_migrations` VALUES ('14');
INSERT INTO `schema_migrations` VALUES ('15');
INSERT INTO `schema_migrations` VALUES ('16');
INSERT INTO `schema_migrations` VALUES ('17');
INSERT INTO `schema_migrations` VALUES ('18');
INSERT INTO `schema_migrations` VALUES ('19');
INSERT INTO `schema_migrations` VALUES ('2');
INSERT INTO `schema_migrations` VALUES ('20');
INSERT INTO `schema_migrations` VALUES ('20081219130711');
INSERT INTO `schema_migrations` VALUES ('20081223142853');
INSERT INTO `schema_migrations` VALUES ('20081223221228');
INSERT INTO `schema_migrations` VALUES ('21');
INSERT INTO `schema_migrations` VALUES ('22');
INSERT INTO `schema_migrations` VALUES ('23');
INSERT INTO `schema_migrations` VALUES ('24');
INSERT INTO `schema_migrations` VALUES ('25');
INSERT INTO `schema_migrations` VALUES ('26');
INSERT INTO `schema_migrations` VALUES ('27');
INSERT INTO `schema_migrations` VALUES ('28');
INSERT INTO `schema_migrations` VALUES ('29');
INSERT INTO `schema_migrations` VALUES ('3');
INSERT INTO `schema_migrations` VALUES ('30');
INSERT INTO `schema_migrations` VALUES ('31');
INSERT INTO `schema_migrations` VALUES ('32');
INSERT INTO `schema_migrations` VALUES ('33');
INSERT INTO `schema_migrations` VALUES ('34');
INSERT INTO `schema_migrations` VALUES ('35');
INSERT INTO `schema_migrations` VALUES ('36');
INSERT INTO `schema_migrations` VALUES ('37');
INSERT INTO `schema_migrations` VALUES ('38');
INSERT INTO `schema_migrations` VALUES ('39');
INSERT INTO `schema_migrations` VALUES ('4');
INSERT INTO `schema_migrations` VALUES ('40');
INSERT INTO `schema_migrations` VALUES ('41');
INSERT INTO `schema_migrations` VALUES ('42');
INSERT INTO `schema_migrations` VALUES ('43');
INSERT INTO `schema_migrations` VALUES ('44');
INSERT INTO `schema_migrations` VALUES ('45');
INSERT INTO `schema_migrations` VALUES ('46');
INSERT INTO `schema_migrations` VALUES ('47');
INSERT INTO `schema_migrations` VALUES ('48');
INSERT INTO `schema_migrations` VALUES ('49');
INSERT INTO `schema_migrations` VALUES ('5');
INSERT INTO `schema_migrations` VALUES ('50');
INSERT INTO `schema_migrations` VALUES ('51');
INSERT INTO `schema_migrations` VALUES ('52');
INSERT INTO `schema_migrations` VALUES ('53');
INSERT INTO `schema_migrations` VALUES ('54');
INSERT INTO `schema_migrations` VALUES ('55');
INSERT INTO `schema_migrations` VALUES ('56');
INSERT INTO `schema_migrations` VALUES ('57');
INSERT INTO `schema_migrations` VALUES ('58');
INSERT INTO `schema_migrations` VALUES ('59');
INSERT INTO `schema_migrations` VALUES ('6');
INSERT INTO `schema_migrations` VALUES ('60');
INSERT INTO `schema_migrations` VALUES ('61');
INSERT INTO `schema_migrations` VALUES ('62');
INSERT INTO `schema_migrations` VALUES ('63');
INSERT INTO `schema_migrations` VALUES ('64');
INSERT INTO `schema_migrations` VALUES ('65');
INSERT INTO `schema_migrations` VALUES ('66');
INSERT INTO `schema_migrations` VALUES ('67');
INSERT INTO `schema_migrations` VALUES ('68');
INSERT INTO `schema_migrations` VALUES ('69');
INSERT INTO `schema_migrations` VALUES ('7');
INSERT INTO `schema_migrations` VALUES ('70');
INSERT INTO `schema_migrations` VALUES ('71');
INSERT INTO `schema_migrations` VALUES ('72');
INSERT INTO `schema_migrations` VALUES ('73');
INSERT INTO `schema_migrations` VALUES ('74');
INSERT INTO `schema_migrations` VALUES ('75');
INSERT INTO `schema_migrations` VALUES ('76');
INSERT INTO `schema_migrations` VALUES ('8');
INSERT INTO `schema_migrations` VALUES ('9');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sections`
--

DROP TABLE IF EXISTS `sections`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `sections` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `show_paged_articles` tinyint(1) default '0',
  `articles_per_page` int(11) default '15',
  `layout` varchar(255) default NULL,
  `template` varchar(255) default NULL,
  `site_id` int(11) default NULL,
  `path` varchar(255) default NULL,
  `articles_count` int(11) default '0',
  `archive_path` varchar(255) default NULL,
  `archive_template` varchar(255) default NULL,
  `position` int(11) default '1',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `sections`
--

LOCK TABLES `sections` WRITE;
/*!40000 ALTER TABLE `sections` DISABLE KEYS */;
INSERT INTO `sections` VALUES (1,'Home',0,15,NULL,'home.liquid',1,'',24,'archives',NULL,0);
/*!40000 ALTER TABLE `sections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sites`
--

DROP TABLE IF EXISTS `sites`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `sites` (
  `id` int(11) NOT NULL auto_increment,
  `title` varchar(255) default NULL,
  `subtitle` varchar(255) default NULL,
  `email` varchar(255) default NULL,
  `ping_urls` text,
  `articles_per_page` int(11) default '15',
  `host` varchar(255) default NULL,
  `approve_comments` tinyint(1) default NULL,
  `comment_age` int(11) default NULL,
  `timezone` varchar(255) default NULL,
  `filter` varchar(255) default 'textile_filter',
  `permalink_style` varchar(255) default NULL,
  `search_path` varchar(255) default NULL,
  `tag_path` varchar(255) default NULL,
  `tag_layout` varchar(255) default NULL,
  `current_theme_path` varchar(255) default NULL,
  `akismet_key` varchar(100) default NULL,
  `akismet_url` varchar(255) default NULL,
  `lang` varchar(255) NOT NULL default 'en-US',
  PRIMARY KEY  (`id`),
  KEY `index_sites_on_host` (`host`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `sites`
--

LOCK TABLES `sites` WRITE;
/*!40000 ALTER TABLE `sites` DISABLE KEYS */;
INSERT INTO `sites` VALUES (1,'Drastic Code','Building Internet Applications with Ruby, Javascript, and Other Things','sgrock@gmail.com',NULL,15,'unusedfornow.com',0,-1,'US/Pacific','textile_filter',':year/:month/:day/:permalink','search','tags',NULL,'drastic','','','en-US');
/*!40000 ALTER TABLE `sites` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taggings`
--

DROP TABLE IF EXISTS `taggings`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `taggings` (
  `id` int(11) NOT NULL auto_increment,
  `tag_id` int(11) default NULL,
  `taggable_id` int(11) default NULL,
  `taggable_type` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=93 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `taggings`
--

LOCK TABLES `taggings` WRITE;
/*!40000 ALTER TABLE `taggings` DISABLE KEYS */;
INSERT INTO `taggings` VALUES (1,1,1,'Content');
INSERT INTO `taggings` VALUES (2,2,1,'Content');
INSERT INTO `taggings` VALUES (3,3,1,'Content');
INSERT INTO `taggings` VALUES (4,1,2,'Content');
INSERT INTO `taggings` VALUES (5,2,2,'Content');
INSERT INTO `taggings` VALUES (6,3,2,'Content');
INSERT INTO `taggings` VALUES (7,3,4,'Content');
INSERT INTO `taggings` VALUES (8,4,4,'Content');
INSERT INTO `taggings` VALUES (9,5,4,'Content');
INSERT INTO `taggings` VALUES (11,1,3,'Content');
INSERT INTO `taggings` VALUES (12,3,3,'Content');
INSERT INTO `taggings` VALUES (13,4,3,'Content');
INSERT INTO `taggings` VALUES (15,7,3,'Content');
INSERT INTO `taggings` VALUES (16,8,3,'Content');
INSERT INTO `taggings` VALUES (17,8,4,'Content');
INSERT INTO `taggings` VALUES (18,4,6,'Content');
INSERT INTO `taggings` VALUES (19,5,6,'Content');
INSERT INTO `taggings` VALUES (20,8,6,'Content');
INSERT INTO `taggings` VALUES (21,9,6,'Content');
INSERT INTO `taggings` VALUES (22,10,6,'Content');
INSERT INTO `taggings` VALUES (23,1,5,'Content');
INSERT INTO `taggings` VALUES (24,2,5,'Content');
INSERT INTO `taggings` VALUES (25,11,5,'Content');
INSERT INTO `taggings` VALUES (26,12,5,'Content');
INSERT INTO `taggings` VALUES (27,13,5,'Content');
INSERT INTO `taggings` VALUES (28,4,8,'Content');
INSERT INTO `taggings` VALUES (29,14,8,'Content');
INSERT INTO `taggings` VALUES (30,15,8,'Content');
INSERT INTO `taggings` VALUES (31,1,9,'Content');
INSERT INTO `taggings` VALUES (32,2,9,'Content');
INSERT INTO `taggings` VALUES (33,16,9,'Content');
INSERT INTO `taggings` VALUES (34,17,9,'Content');
INSERT INTO `taggings` VALUES (35,18,9,'Content');
INSERT INTO `taggings` VALUES (36,19,9,'Content');
INSERT INTO `taggings` VALUES (37,20,9,'Content');
INSERT INTO `taggings` VALUES (38,21,9,'Content');
INSERT INTO `taggings` VALUES (39,22,11,'Content');
INSERT INTO `taggings` VALUES (40,23,11,'Content');
INSERT INTO `taggings` VALUES (41,24,11,'Content');
INSERT INTO `taggings` VALUES (42,1,13,'Content');
INSERT INTO `taggings` VALUES (43,2,13,'Content');
INSERT INTO `taggings` VALUES (44,25,13,'Content');
INSERT INTO `taggings` VALUES (45,1,18,'Content');
INSERT INTO `taggings` VALUES (46,26,18,'Content');
INSERT INTO `taggings` VALUES (47,27,18,'Content');
INSERT INTO `taggings` VALUES (48,28,18,'Content');
INSERT INTO `taggings` VALUES (49,29,18,'Content');
INSERT INTO `taggings` VALUES (50,9,20,'Content');
INSERT INTO `taggings` VALUES (51,22,20,'Content');
INSERT INTO `taggings` VALUES (52,30,20,'Content');
INSERT INTO `taggings` VALUES (53,31,20,'Content');
INSERT INTO `taggings` VALUES (54,32,20,'Content');
INSERT INTO `taggings` VALUES (55,33,20,'Content');
INSERT INTO `taggings` VALUES (56,4,21,'Content');
INSERT INTO `taggings` VALUES (57,34,21,'Content');
INSERT INTO `taggings` VALUES (58,35,21,'Content');
INSERT INTO `taggings` VALUES (59,3,21,'Content');
INSERT INTO `taggings` VALUES (60,26,22,'Content');
INSERT INTO `taggings` VALUES (61,28,22,'Content');
INSERT INTO `taggings` VALUES (62,29,22,'Content');
INSERT INTO `taggings` VALUES (63,36,22,'Content');
INSERT INTO `taggings` VALUES (64,37,23,'Content');
INSERT INTO `taggings` VALUES (66,39,23,'Content');
INSERT INTO `taggings` VALUES (67,40,23,'Content');
INSERT INTO `taggings` VALUES (68,22,34,'Content');
INSERT INTO `taggings` VALUES (69,41,34,'Content');
INSERT INTO `taggings` VALUES (70,42,34,'Content');
INSERT INTO `taggings` VALUES (71,43,34,'Content');
INSERT INTO `taggings` VALUES (72,44,35,'Content');
INSERT INTO `taggings` VALUES (73,45,35,'Content');
INSERT INTO `taggings` VALUES (74,46,35,'Content');
INSERT INTO `taggings` VALUES (75,1,36,'Content');
INSERT INTO `taggings` VALUES (76,2,36,'Content');
INSERT INTO `taggings` VALUES (77,9,36,'Content');
INSERT INTO `taggings` VALUES (78,38,36,'Content');
INSERT INTO `taggings` VALUES (79,47,36,'Content');
INSERT INTO `taggings` VALUES (80,2,39,'Content');
INSERT INTO `taggings` VALUES (81,47,39,'Content');
INSERT INTO `taggings` VALUES (82,48,39,'Content');
INSERT INTO `taggings` VALUES (83,2,40,'Content');
INSERT INTO `taggings` VALUES (84,43,40,'Content');
INSERT INTO `taggings` VALUES (85,49,40,'Content');
INSERT INTO `taggings` VALUES (86,2,41,'Content');
INSERT INTO `taggings` VALUES (87,43,41,'Content');
INSERT INTO `taggings` VALUES (88,49,41,'Content');
INSERT INTO `taggings` VALUES (89,50,41,'Content');
INSERT INTO `taggings` VALUES (90,22,42,'Content');
INSERT INTO `taggings` VALUES (91,51,42,'Content');
INSERT INTO `taggings` VALUES (92,52,42,'Content');
/*!40000 ALTER TABLE `taggings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `tags` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'rails');
INSERT INTO `tags` VALUES (2,'ruby');
INSERT INTO `tags` VALUES (3,'gist');
INSERT INTO `tags` VALUES (4,'javascript');
INSERT INTO `tags` VALUES (5,'jquery');
INSERT INTO `tags` VALUES (6,'user experience');
INSERT INTO `tags` VALUES (7,'prototype');
INSERT INTO `tags` VALUES (8,'ux');
INSERT INTO `tags` VALUES (9,'search');
INSERT INTO `tags` VALUES (10,'filter');
INSERT INTO `tags` VALUES (11,'yaml');
INSERT INTO `tags` VALUES (12,'configuration');
INSERT INTO `tags` VALUES (13,'convention');
INSERT INTO `tags` VALUES (14,'rhino');
INSERT INTO `tags` VALUES (15,'shell');
INSERT INTO `tags` VALUES (16,'activerecord');
INSERT INTO `tags` VALUES (17,'patch');
INSERT INTO `tags` VALUES (18,'bug');
INSERT INTO `tags` VALUES (19,'fix');
INSERT INTO `tags` VALUES (20,'private');
INSERT INTO `tags` VALUES (21,'collision');
INSERT INTO `tags` VALUES (22,'bash');
INSERT INTO `tags` VALUES (23,'tips');
INSERT INTO `tags` VALUES (24,'command-line');
INSERT INTO `tags` VALUES (25,'dsl');
INSERT INTO `tags` VALUES (26,'vim');
INSERT INTO `tags` VALUES (27,'rspec');
INSERT INTO `tags` VALUES (28,'tdd');
INSERT INTO `tags` VALUES (29,'bdd');
INSERT INTO `tags` VALUES (30,'ack');
INSERT INTO `tags` VALUES (31,'tools');
INSERT INTO `tags` VALUES (32,'grep');
INSERT INTO `tags` VALUES (33,'perl');
INSERT INTO `tags` VALUES (34,'fluid');
INSERT INTO `tags` VALUES (35,'cookies');
INSERT INTO `tags` VALUES (36,'testing');
INSERT INTO `tags` VALUES (37,'gnu screen');
INSERT INTO `tags` VALUES (38,'scaling');
INSERT INTO `tags` VALUES (39,'mail command');
INSERT INTO `tags` VALUES (40,'commandline');
INSERT INTO `tags` VALUES (41,'nopoconi');
INSERT INTO `tags` VALUES (42,'wiff');
INSERT INTO `tags` VALUES (43,'diff');
INSERT INTO `tags` VALUES (44,'ubuntu');
INSERT INTO `tags` VALUES (45,'linux');
INSERT INTO `tags` VALUES (46,'dual boot');
INSERT INTO `tags` VALUES (47,'sphinx');
INSERT INTO `tags` VALUES (48,'github');
INSERT INTO `tags` VALUES (49,'gem');
INSERT INTO `tags` VALUES (50,'diffy');
INSERT INTO `tags` VALUES (51,'ssh');
INSERT INTO `tags` VALUES (52,'productivity');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
CREATE TABLE `users` (
  `id` int(11) NOT NULL auto_increment,
  `login` varchar(40) default NULL,
  `email` varchar(100) default NULL,
  `crypted_password` varchar(40) default NULL,
  `salt` varchar(40) default NULL,
  `activation_code` varchar(40) default NULL,
  `activated_at` datetime default NULL,
  `created_at` datetime default NULL,
  `updated_at` datetime default NULL,
  `deleted_at` datetime default NULL,
  `token` varchar(255) default NULL,
  `token_expires_at` datetime default NULL,
  `filter` varchar(255) default 'textile_filter',
  `admin` tinyint(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
SET character_set_client = @saved_cs_client;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Sam Goldstein','sgrock@gmail.com','6cb884089938772d892cb0ca45545a0866fec409','7e3041ebc2fc05a40c60028e2c4901a81035d3cd',NULL,'2009-05-20 05:06:17','2009-05-20 05:06:17','2011-04-06 16:09:10',NULL,'e85f293b5e0533ea6b94866cfbbc1718317aa277','2011-04-20 16:09:09','textile_filter',1);
INSERT INTO `users` VALUES (2,'peter','sam_g@beezwax.net','d4164b65acecbb73a8b698d836ceb27fe0646b15','09852d897746539017053233d7aa12319dc540e7',NULL,NULL,'2009-07-28 17:46:23','2009-07-28 18:22:21','2009-07-28 18:22:21',NULL,NULL,'textile_filter',0);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2012-09-01 10:11:02
